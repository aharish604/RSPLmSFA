package com.rspl.sf.msfa.store;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;

import com.arteriatech.mutils.common.OfflineError;
import com.arteriatech.mutils.common.OfflineODataStoreException;
import com.arteriatech.mutils.common.Operation;
import com.arteriatech.mutils.common.UIListener;
import com.arteriatech.mutils.common.UtilConstants;
import com.arteriatech.mutils.common.UtilOfflineManager;
import com.arteriatech.mutils.log.LogManager;
import com.arteriatech.mutils.store.CredentialsProvider;
import com.arteriatech.mutils.store.OnlineODataInterface;
import com.arteriatech.mutils.store.OnlineRequestListeners;
import com.rspl.sf.msfa.BuildConfig;
import com.rspl.sf.msfa.R;
import com.rspl.sf.msfa.SPGeo.database.DatabaseHelperGeo;
import com.rspl.sf.msfa.appointment.AppointmentBean;
import com.rspl.sf.msfa.attendance.AttendanceConfigTypesetTypesBean;
import com.rspl.sf.msfa.attendance.attendancesummary.AttendanceSummaryBean;
import com.rspl.sf.msfa.collectionPlan.WeekDetailsList;
import com.rspl.sf.msfa.collectionPlan.WeekHeaderList;
import com.rspl.sf.msfa.collectionPlan.collectionCreate.SaleAreaBean;
import com.rspl.sf.msfa.common.Constants;
import com.rspl.sf.msfa.common.ConstantsUtils;
import com.rspl.sf.msfa.common.MyUtils;
import com.rspl.sf.msfa.complaint.ComplaintBean;
import com.rspl.sf.msfa.dbstock.DBStockBean;
import com.rspl.sf.msfa.dealerstockprice.DealerPriceBean;
import com.rspl.sf.msfa.expense.ExpenseBeanJK;
import com.rspl.sf.msfa.expense.MediaLink;
import com.rspl.sf.msfa.feedback.FeedbackBean;
import com.rspl.sf.msfa.finance.CollectionBean;
import com.rspl.sf.msfa.finance.InvoiceBean;
import com.rspl.sf.msfa.mbo.BirthdaysBean;
import com.rspl.sf.msfa.mbo.CompetitorMasterBean;
import com.rspl.sf.msfa.mbo.Config;
import com.rspl.sf.msfa.mbo.ConfigTypesetTypesBean;
import com.rspl.sf.msfa.mbo.CustomerBean;
import com.rspl.sf.msfa.mbo.ForwardingAgentBean;
import com.rspl.sf.msfa.mbo.MaterialFright;
import com.rspl.sf.msfa.mbo.MaterialsBean;
import com.rspl.sf.msfa.mbo.MeansOfTransport;
import com.rspl.sf.msfa.mbo.MerchandisingBean;
import com.rspl.sf.msfa.mbo.MyPerformanceBean;
import com.rspl.sf.msfa.mbo.MyTargetsBean;
import com.rspl.sf.msfa.mbo.OutstandingAgeBean;
import com.rspl.sf.msfa.mbo.ProcessingField;
import com.rspl.sf.msfa.mbo.RouteBean;
import com.rspl.sf.msfa.mbo.RoutePlanBean;
import com.rspl.sf.msfa.mbo.SKUGroupBean;
import com.rspl.sf.msfa.mbo.SaleDistrictBean;
import com.rspl.sf.msfa.mbo.SalesOrderBean;
import com.rspl.sf.msfa.mbo.SalesOrderItemBean;
import com.rspl.sf.msfa.mbo.SalesPersonBean;
import com.rspl.sf.msfa.mbo.ShipToPartyListBean;
import com.rspl.sf.msfa.mbo.StocksInfoBean;
import com.rspl.sf.msfa.mbo.StorageLocBean;
import com.rspl.sf.msfa.mtp.MTPHeaderBean;
import com.rspl.sf.msfa.mtp.MTPRoutePlanBean;
import com.rspl.sf.msfa.prospectedCustomer.ProspectedCustomerBean;
import com.rspl.sf.msfa.registration.Configuration;
import com.rspl.sf.msfa.registration.RegistrationActivity;
import com.rspl.sf.msfa.reports.CollectionHistoryBean;
import com.rspl.sf.msfa.reports.InvoiceHistoryBean;
import com.rspl.sf.msfa.reports.OutstandingBean;
import com.rspl.sf.msfa.reports.invoicelist.InvoiceListBean;
import com.rspl.sf.msfa.reports.invoicelist.invoiceDetails.InvConItemBean;
import com.rspl.sf.msfa.reports.invoicelist.invoiceDetails.InvoiceConditionsBean;
import com.rspl.sf.msfa.reports.invoicelist.invoiceDetails.InvoiceItemBean;
import com.rspl.sf.msfa.reports.invoicelist.invoiceDetails.InvoicePartnerFunctionsBean;
import com.rspl.sf.msfa.retailerStock.RetailerStockBean;
import com.rspl.sf.msfa.so.SOUtils;
import com.rspl.sf.msfa.soapproval.SalesOrderConditionsBean;
import com.rspl.sf.msfa.socreate.ConfigTypeValues;
import com.rspl.sf.msfa.socreate.CreditLimitBean;
import com.rspl.sf.msfa.socreate.CustomerPartnerFunctionBean;
import com.rspl.sf.msfa.socreate.DefaultValueBean;
import com.rspl.sf.msfa.socreate.SOConditionItemDetaiBean;
import com.rspl.sf.msfa.socreate.SOItemBean;
import com.rspl.sf.msfa.solist.SOListBean;
import com.rspl.sf.msfa.stock.DepotStockBean;
import com.rspl.sf.msfa.visit.VisitActivityBean;
import com.sap.client.odata.v4.core.CharBuffer;
import com.sap.client.odata.v4.core.StringFunction;
import com.sap.smp.client.httpc.HttpConversationManager;
import com.sap.smp.client.httpc.IManagerConfigurator;
import com.sap.smp.client.httpc.authflows.CommonAuthFlowsConfigurator;
import com.sap.smp.client.odata.ODataDuration;
import com.sap.smp.client.odata.ODataEntity;
import com.sap.smp.client.odata.ODataEntitySet;
import com.sap.smp.client.odata.ODataGuid;
import com.sap.smp.client.odata.ODataNavigationProperty;
import com.sap.smp.client.odata.ODataPayload;
import com.sap.smp.client.odata.ODataPropMap;
import com.sap.smp.client.odata.ODataProperty;
import com.sap.smp.client.odata.exception.ODataContractViolationException;
import com.sap.smp.client.odata.exception.ODataException;
import com.sap.smp.client.odata.exception.ODataParserException;
import com.sap.smp.client.odata.impl.ODataEntityDefaultImpl;
import com.sap.smp.client.odata.impl.ODataErrorDefaultImpl;
import com.sap.smp.client.odata.impl.ODataGuidDefaultImpl;
import com.sap.smp.client.odata.impl.ODataPropertyDefaultImpl;
import com.sap.smp.client.odata.impl.ODataUploadMediaDefaultImpl;
import com.sap.smp.client.odata.offline.ODataOfflineStore;
import com.sap.smp.client.odata.offline.ODataOfflineStoreOptions;
import com.sap.smp.client.odata.offline.ODataOfflineStoreState;
import com.sap.smp.client.odata.store.ODataDownloadMediaResult;
import com.sap.smp.client.odata.store.ODataDownloadMediaSyncListener;
import com.sap.smp.client.odata.store.ODataRequestChangeSet;
import com.sap.smp.client.odata.store.ODataRequestExecution;
import com.sap.smp.client.odata.store.ODataRequestListener;
import com.sap.smp.client.odata.store.ODataRequestParamBatch;
import com.sap.smp.client.odata.store.ODataRequestParamSingle;
import com.sap.smp.client.odata.store.ODataRequestParamSingle.Mode;
import com.sap.smp.client.odata.store.ODataResponseSingle;
import com.sap.smp.client.odata.store.ODataStore;
import com.sap.smp.client.odata.store.impl.ODataDownloadMediaResultDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestChangeSetDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamBatchDefaultImpl;
import com.sap.smp.client.odata.store.impl.ODataRequestParamSingleDefaultImpl;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.locks.ReentrantLock;

public class OfflineManager {
    public static final String TAG = OfflineManager.class.getSimpleName();
    public static ODataOfflineStore offlineStore;
    public static ODataOfflineStoreOptions options = null;
    public static ODataOfflineStore offlineGeo;
    public static ODataOfflineStoreOptions optionsGeo= null;
    private static String storeState;
    public static boolean isOfflineStoreOpen() {
        boolean isOpen = false;
        if (offlineStore != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(UtilOfflineManager.getStoreState())) {
            isOpen = true;
        }
        return isOpen;
    }
    public static String getStoreState() {
        return storeState;
    }

    public static void setStoreState(String state) {
        storeState = state;
    }
    /**
     * Initialize a new offline odata store
     *
     * @param context the application context
     * @return true if it's initialized, false otherwise
     * @throws OfflineODataStoreException
     */
    public static boolean openOfflineStore(Context context, UIListener uiListener) throws OfflineODataStoreException {
        if (!isOfflineStoreOpen()) {
            try {
                //This instantiate the native UDB libraries which are located in the

                ODataOfflineStore.globalInit();
                //Get application endpoint URL
               /* LogonCoreContext lgCtx = null;
                    try {
                        lgCtx = LogonCore.getInstance().getLogonContext();
                    }catch (Throwable e){
                        e.getMessage();
                    }
                    if(lgCtx!=null) {*/
//                    String endPointURL = lgCtx.getAppEndPointUrl();
                String endPointURL = MyUtils.getDefaultEndPointURL();
                URL url = new URL(endPointURL);
                // Define the offline store options.
                // Connection parameter and credentials and
                // the application connection id we got at the registration

                options = new ODataOfflineStoreOptions();
                options.storeEncryptionKey = Constants.EncryptKey;
                options.host = url.getHost();
                options.port = String.valueOf(url.getPort());
//                    options.enableHTTPS = lgCtx.isHttps();
                options.enableHTTPS =Configuration.IS_HTTPS;
                options.enableRepeatableRequests = true;
                // the serviceRoot is the backend connector name, which is usually the same
                // as the application configuration name in the SMP Management Cockpit
                options.serviceRoot = Configuration.APP_ID;

                //for Relay enable next line
//				options.urlSuffix = lgCtx.getResourcePath()+"/"+lgCtx.getFarmId();

                //The logon configurator uses the information obtained in the registration
                // (i.e endpoint URL, login, etc ) to configure the conversation manager
                   /* IManagerConfigurator configurator =
                            LogonUIFacade.getInstance().getLogonConfigurator(context);
                    HttpConversationManager manager = new HttpConversationManager(context);
                    configurator.configure(manager);*/
                CredentialsProvider credProvider = CredentialsProvider.getInstance(context);
                HttpConversationManager manager = new CommonAuthFlowsConfigurator(context).supportBasicAuthUsing(credProvider).configure(new HttpConversationManager(context));

                options.conversationManager = manager;
                options.storeName = Constants.STORE_NAME;

                options.customHeaders.put(Constants.arteria_dayfilter, Constants.NO_OF_DAYS);
//                options.customHeaders.put("Content-Type", "application/atom+xml");
                String[] DEFINGREQARRAY = Constants.getDefinigReq(context);
                for (int incReq = 0; incReq < DEFINGREQARRAY.length; incReq++) {
                    String collectionName = DEFINGREQARRAY[incReq];
                    if (collectionName.contains("?")) {
                        String splitCollName[] = collectionName.split("\\?");
                        collectionName = splitCollName[0];
                    }


                    if (collectionName.equalsIgnoreCase(Constants.MerchReviewImages)
                            || collectionName.equalsIgnoreCase(Constants.ExpenseDocuments)) {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], true);
                    } else {
                        options.addDefiningRequest(collectionName, DEFINGREQARRAY[incReq], false);


                    }
                }

                offlineStore = new ODataOfflineStore(context);
                OfflineStoreListner offlineStoreListner = new OfflineStoreListner(uiListener);
                offlineStore.setOfflineStoreListener(offlineStoreListner);
                //Assign an Offline
                offlineStore.setRequestErrorListener(new OfflineErrorListener());

                offlineStore.openStoreSync(options);
                return true;
                /*}else{
                    restartApplication(context);
                    return false;
                }*/
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } else {
            return true;
        }
        //END
    }
    public static void restartApplication(final Context mcontext) {

        ((Activity) mcontext).runOnUiThread(new Runnable() {
            public void run() {

                AlertDialog.Builder builder = new AlertDialog.Builder(
                        mcontext, R.style.MyTheme);

                builder.setMessage(R.string.was_idle)
                        .setCancelable(false)
                        .setPositiveButton(
                                R.string.ok,
                                new DialogInterface.OnClickListener() {
                                    public void onClick(
                                            DialogInterface dialog,
                                            int id) {
                                        dialog.cancel();
                                        //  activity.finishAffinity();
                                        ((Activity) mcontext).finishAffinity();
                                        Intent dialogIntent = new Intent(mcontext, RegistrationActivity.class);
                                        mcontext.startActivity(dialogIntent);


                                    }
                                });
                builder.show();
            }
        });


    }
    public static void restartApplicationWithError(final Context mcontext, final String msg) {

        ((Activity) mcontext).runOnUiThread(new Runnable() {
            public void run() {

                AlertDialog.Builder builder = new AlertDialog.Builder(
                        mcontext, R.style.MyTheme);

                builder.setMessage(""+msg)
                        .setCancelable(false)
                        .setPositiveButton(
                                R.string.ok,
                                new DialogInterface.OnClickListener() {
                                    public void onClick(
                                            DialogInterface dialog,
                                            int id) {
                                        dialog.cancel();
                                        //  activity.finishAffinity();
                                        ((Activity) mcontext).finishAffinity();
                                        Intent dialogIntent = new Intent(mcontext, RegistrationActivity.class);
                                        mcontext.startActivity(dialogIntent);


                                    }
                                });
                builder.show();
            }
        });


    }

    /*
     * Closes existing or opened Offline store if it is not null
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static boolean closeOfflineStore() throws OfflineODataStoreException {
        if (isOfflineStoreOpen()) {
            try {
                UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                OfflineManager.offlineStore.closeStore();
                return true;
            } catch (ODataException e) {
                LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
                throw new OfflineODataStoreException(e);
            }
        } else {
            return false;
        }
    }

    public static boolean closeOfflineStore(Context context, ODataOfflineStoreOptions options) throws OfflineODataStoreException {
        try {
            UtilOfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.closeOfflineStore(context, options, OfflineManager.offlineStore, Constants.PREFS_NAME);
            return true;
        } catch (Exception e) {
            LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
            throw new OfflineODataStoreException(e);
        }
    }

    /*
     * refresh offline store data for collections passed as input parameter to this method
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     * */
    public static void refreshStoreSync(Context context, UIListener uiListener, String syncType, String defineReq) throws OfflineODataStoreException {

        if (offlineStore != null) {
            try {
                if(syncType.equalsIgnoreCase(Constants.Fresh)){
                    LogManager.writeLogDebug("Download Sync In progress");
                }else if(syncType.equalsIgnoreCase(Constants.ALL)){
                    LogManager.writeLogDebug("All Sync In progress");
                }
                OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, syncType, defineReq, uiListener);

                if (syncType.equals(Constants.Fresh)) {
                    offlineStore.scheduleRefresh(defineReq, refreshListener);
                } else {
                    offlineStore.scheduleRefresh(refreshListener);
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
    }

    public static void refreshGeoStoreSync(Context context, UIListener uiListener, String syncType, String defineReq) throws OfflineODataStoreException {

        if (offlineGeo != null) {
            try {
                if(syncType.equalsIgnoreCase(Constants.Fresh)){
                    LogManager.writeLogDebug("Download Sync In progress");
                }else if(syncType.equalsIgnoreCase(Constants.ALL)){
                    LogManager.writeLogDebug("All Sync In progress");
                }
                OfflineGeoRefreshListener refreshListener = new OfflineGeoRefreshListener(context, syncType, defineReq, uiListener);

                if (syncType.equals(Constants.Fresh)) {
                    offlineGeo.scheduleRefresh(defineReq, refreshListener);
                } else {
                    offlineGeo.scheduleRefresh(refreshListener);
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
    }

    /**
     * CreateOperation a new entity in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createAttendance(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createAttendanceEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Attendances,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Attendances),
                    null);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getBrandListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];


                    int incVal = 1;
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.BrandID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.BrandDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] geMaterialGroupValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];


                    int incVal = 1;
                    configVal[0][0] = Constants.All;
                    configVal[1][0] = Constants.All;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialGrp);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialGrpDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getCategoryListValues(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialCategoryID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialCategoryDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getOrderedMaterialGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.OrderMaterialGroupID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * Update an existing attendance in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateAttendance(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateAttendanceEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Resets existing Attendance for today in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void resetAttendanceEntity(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = resetAttendanceEntity(table);

            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Attendances), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * CreateOperation a new entity in the local database for visit
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createVisit(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Visits),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }


    public static void createProspectedCustomer(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createProspectedCustomerEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.ChannelPartners,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Customers),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }


    /*Create entity for visit to store in offline store*/
    private static ODataEntity createProspectedCustomerEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ChannelPartnerEntity);

                offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPGUID).toUpperCase())));
             /*   newEntity.getProperties().put(Constants.CustomerNo,
                        new ODataPropertyDefaultImpl(Constants.CustomerNo, hashtable.get(Constants.CustomerNo)));*/
                newEntity.getProperties().put(Constants.Name,
                        new ODataPropertyDefaultImpl(Constants.Name, hashtable.get(Constants.Name)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
//                newEntity.getProperties().put(Constants.ContactPerson,
//                        new ODataPropertyDefaultImpl(Constants.ContactPerson, hashtable.get(Constants.ContactPerson)));
                newEntity.getProperties().put(Constants.Mobile1,
                        new ODataPropertyDefaultImpl(Constants.Mobile1, hashtable.get(Constants.Mobile1)));
                newEntity.getProperties().put(Constants.Address1,
                        new ODataPropertyDefaultImpl(Constants.Address1, hashtable.get(Constants.Address1)));
                newEntity.getProperties().put(Constants.CityDesc,
                        new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                //    newEntity.getProperties().put(Constants.Country,
                //              new ODataPropertyDefaultImpl(Constants.Country, hashtable.get(Constants.Country)));
                //   newEntity.getProperties().put(Constants.DistrictDesc,

                newEntity.getProperties().put(Constants.DistrictDesc,
                        new ODataPropertyDefaultImpl(Constants.DistrictDesc, hashtable.get(Constants.DistrictDesc)));
                //         new ODataPropertyDefaultImpl(Constants.DistrictID, hashtable.get(Constants.DistrictID)));
                //     newEntity.getProperties().put(Constants.StateID,
                //             new ODataPropertyDefaultImpl(Constants.StateID, hashtable.get(Constants.StateID)));
                //    newEntity.getProperties().put(Constants.StateDesc,
                //            new ODataPropertyDefaultImpl(Constants.StateDesc, hashtable.get(Constants.StateDesc)));

                //      newEntity.getProperties().put(Constants.CityDesc,
                //              new ODataPropertyDefaultImpl(Constants.CityDesc, hashtable.get(Constants.CityDesc)));
                //     newEntity.getProperties().put(Constants.Landmark,
                //             new ODataPropertyDefaultImpl(Constants.Landmark, hashtable.get(Constants.Landmark)));
                newEntity.getProperties().put(Constants.PostalCode,
                        new ODataPropertyDefaultImpl(Constants.PostalCode, hashtable.get(Constants.PostalCode)));
          /*      newEntity.getProperties().put(Constants.Taluka,
                        new ODataPropertyDefaultImpl(Constants.Taluka, hashtable.get(Constants.Taluka)));
                newEntity.getProperties().put(Constants.Block,
                        new ODataPropertyDefaultImpl(Constants.Block, hashtable.get(Constants.Block)));*/

                //      newEntity.getProperties().put(Constants.EmailID,
                //              new ODataPropertyDefaultImpl(Constants.EmailID, hashtable.get(Constants.EmailID)));
                //    newEntity.getProperties().put(Constants.PAN,
                //            new ODataPropertyDefaultImpl(Constants.PAN, hashtable.get(Constants.PAN)));
                //     newEntity.getProperties().put(Constants.VATNo,
                //             new ODataPropertyDefaultImpl(Constants.VATNo, hashtable.get(Constants.VATNo)));
                //    newEntity.getProperties().put(Constants.OutletName,
                //             new ODataPropertyDefaultImpl(Constants.OutletName, hashtable.get(Constants.OutletName)));
                //      newEntity.getProperties().put(Constants.OwnerName,
                //             new ODataPropertyDefaultImpl(Constants.OwnerName, hashtable.get(Constants.OwnerName)));
                //     newEntity.getProperties().put(Constants.RetailerProfile,
                //             new ODataPropertyDefaultImpl(Constants.RetailerProfile, hashtable.get(Constants.RetailerProfile)));
                //     newEntity.getProperties().put(Constants.DOB,
                //             new ODataPropertyDefaultImpl(Constants.DOB, UtilConstants.convertDateFormat(hashtable.get(Constants.DOB))));
                //      newEntity.getProperties().put(Constants.Latitude,
                //              new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                //      newEntity.getProperties().put(Constants.Longitude,
                //              new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                //      newEntity.getProperties().put(Constants.ParentID,
                //              new ODataPropertyDefaultImpl(Constants.ParentID, hashtable.get(Constants.ParentID)));
             /*   newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                //       newEntity.getProperties().put(Constants.ParentTypeID,
                //               new ODataPropertyDefaultImpl(Constants.ParentTypeID, hashtable.get(Constants.ParentTypeID)));
                //       newEntity.getProperties().put(Constants.ParentName,
                //               new ODataPropertyDefaultImpl(Constants.ParentName, hashtable.get(Constants.ParentName)));
                //       newEntity.getProperties().put(Constants.Group2,
                //               new ODataPropertyDefaultImpl(Constants.Group2, hashtable.get(Constants.Group2)));
                //       newEntity.getProperties().put(Constants.PartnerMgrGUID,
                //               new ODataPropertyDefaultImpl(Constants.PartnerMgrGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID).toUpperCase())));

                //      newEntity.getProperties().put(Constants.CPTypeID,
                //              new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                //      newEntity.getProperties().put(Constants.CPTypeDesc,
                //              new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashtable.get(Constants.CPTypeDesc)));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;
    }


    public static void createVisit(Hashtable<String, String> table) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Update an existing visit in the local database for visit
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void updateVisit(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateVisitEntity(table);
            //Send the request to update visit in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Visits), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }


    /*Creates Attendance Entity to save in offline store*/
    private static ODataEntity createAttendanceEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.AttendanceGUID))));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashTable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashTable.get(Constants.AttendanceTypeH1)));

                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashTable.get(Constants.AttendanceTypeH2)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, UtilConstants.convertDateFormat(hashTable.get(Constants.StartDate))));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashTable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashTable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashTable.get(Constants.StartLong)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

                if (!hashTable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Create entity for visit to store in offline store*/
    private static ODataEntity createVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITENTITY);
                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));

                if (hashtable.get(Constants.STARTDATE) != "")
                    newEntity.getProperties().put(Constants.STARTDATE,
                            new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                if (hashtable.get(Constants.VisitDate) != "")
                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                if (hashtable.get(Constants.STARTTIME) != "")
                    newEntity.getProperties().put(Constants.STARTTIME,
                            new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                if (hashtable.get(Constants.StartLat) != "")
                    newEntity.getProperties().put(Constants.StartLat,
                            new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));

                if (hashtable.get(Constants.StartLong) != "")
                    newEntity.getProperties().put(Constants.StartLong,
                            new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                if (hashtable.get(Constants.VisitDate) != "")
                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                newEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));
                newEntity.getProperties().put(Constants.VisitSeq,
                        new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.VisitCatID,
                        new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID).toString()));
//                newEntity.getProperties().put(Constants.LOGINID,
//                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));


                if (hashtable.get(Constants.PlannedDate) != "")
                    newEntity.getProperties().put(Constants.PlannedDate,
                            new ODataPropertyDefaultImpl(Constants.PlannedDate, UtilConstants.convertDateFormat(hashtable.get(Constants.PlannedDate))));

                if (hashtable.get(Constants.PlannedStartTime) != "")
                    newEntity.getProperties().put(Constants.PlannedStartTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedStartTime, hashtable.get(Constants.PlannedStartTime)));
                if (hashtable.get(Constants.PlannedEndTime) != "")
                    newEntity.getProperties().put(Constants.PlannedEndTime,
                            new ODataPropertyDefaultImpl(Constants.PlannedEndTime, hashtable.get(Constants.PlannedEndTime)));
                if (hashtable.get(Constants.Remarks) != "")
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.VisitTypeID,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeID, hashtable.get(Constants.VisitTypeID)));

                newEntity.getProperties().put(Constants.VisitTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeDesc, hashtable.get(Constants.VisitTypeDesc)));


                if (!TextUtils.isEmpty(hashtable.get(Constants.VISITKEY))) {
                    newEntity.setResourcePath(Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')", Constants.Visits + "(guid'" + hashtable.get(Constants.VISITKEY) + "')");
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates Entity to update visit in offline store*/
    private static ODataEntity updateVisitEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, hashtable.get(Constants.STARTDATE)));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));

                try {
                    if (!hashtable.get(Constants.CPTypeID).equalsIgnoreCase("")) {
                        newEntity.getProperties().put(Constants.CPTypeID,
                                new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));


                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, hashtable.get(Constants.VisitDate)));
                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    newEntity.getProperties().put(Constants.VisitSeq,
                            new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));
                    try {
                        newEntity.getProperties().put(Constants.VisitCatID,
                                new ODataPropertyDefaultImpl(Constants.VisitCatID, hashtable.get(Constants.VisitCatID)));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

//                newEntity.getProperties().put(Constants.LOGINID,
//                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, UtilConstants.convertDateFormat(hashtable.get(Constants.EndDate))));
                newEntity.getProperties().put(Constants.EndLat,
                        new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                newEntity.getProperties().put(Constants.EndLong,
                        new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));

                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates entity to reset attendance in offline store*/
    private static ODataEntity resetAttendanceEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.ATTENDANCEENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }

                newEntity.getProperties().put(Constants.AttendanceGUID,
                        new ODataPropertyDefaultImpl(Constants.AttendanceGUID, hashtable.get(Constants.AttendanceGUID)));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));

                newEntity.getProperties().put(Constants.StartDate,
                        new ODataPropertyDefaultImpl(Constants.StartDate, hashtable.get(Constants.StartDate)));

                newEntity.getProperties().put(Constants.StartTime,
                        new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.EndDate,
                        new ODataPropertyDefaultImpl(Constants.EndDate, null));
                newEntity.getProperties().put(Constants.EndLat,
                        new ODataPropertyDefaultImpl(Constants.EndLat, null));
                newEntity.getProperties().put(Constants.EndLong,
                        new ODataPropertyDefaultImpl(Constants.EndLong, null));
                newEntity.getProperties().put(Constants.EndTime,
                        new ODataPropertyDefaultImpl(Constants.EndTime, null));

                newEntity.getProperties().put(Constants.AttendanceTypeH1,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH1, hashtable.get(Constants.AttendanceTypeH1)));
                newEntity.getProperties().put(Constants.AttendanceTypeH2,
                        new ODataPropertyDefaultImpl(Constants.AttendanceTypeH2, hashtable.get(Constants.AttendanceTypeH2)));
                newEntity.getProperties().put(Constants.REMARKS,
                        new ODataPropertyDefaultImpl(Constants.REMARKS, hashtable.get(Constants.REMARKS)));

                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));

                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                if (!hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void createMerChndisingHeader(Hashtable<String, String> tableHdr, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createMerchndisingHeaderEntity(tableHdr);

            //Send the request to create the new visit in the local database


            offlineStore.scheduleCreateEntity(newEntity, Constants.MerchReviews,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviews),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    public static void createMerChndisingItem(Hashtable<String, String> tableItem, Hashtable<String, String> tableHdr, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createMerchndisingItemEntity(tableItem, tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.MerchReviewImages));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }


    private static ODataEntity createMerchndisingHeaderEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity headerEntity = null;
        try {
            if (hashtable != null) {
                // CreateOperation the parent Entity
                headerEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.MERCHINDISINGENTITY);
                if (!TextUtils.isEmpty(hashtable.get(Constants.MerchReviewGUID))) {
                    String resourcePath = UtilConstants.getEditResourcePath(Constants.MerchReviews, hashtable.get(Constants.MerchReviewGUID));
                    headerEntity.setResourcePath(resourcePath, resourcePath);
                }

                offlineStore.allocateProperties(headerEntity, ODataStore.PropMode.Keys);

                offlineStore.allocateNavigationProperties(headerEntity);

                headerEntity.getProperties().put(Constants.MerchReviewGUID,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.MerchReviewGUID))));
                headerEntity.getProperties().put(Constants.MerchReviewDate,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewDate, UtilConstants.convertDateFormat(hashtable.get(Constants.MerchReviewDate))));
                headerEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));
                headerEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                headerEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                headerEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                headerEntity.getProperties().put(Constants.MerchReviewLat,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLat, hashtable.get(Constants.MerchReviewLat)));
                headerEntity.getProperties().put(Constants.MerchReviewLong,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewLong, hashtable.get(Constants.MerchReviewLong)));
                headerEntity.getProperties().put(Constants.MerchReviewType,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewType, hashtable.get(Constants.MerchReviewType)));
                headerEntity.getProperties().put(Constants.MerchReviewTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTypeDesc, hashtable.get(Constants.MerchReviewTypeDesc)));

                headerEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    headerEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }

                headerEntity.getProperties().put(Constants.MerchReviewTime,
                        new ODataPropertyDefaultImpl(Constants.MerchReviewTime, hashtable.get(Constants.MerchReviewTime)));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return headerEntity;

    }

    private static ODataRequestParamSingle createMerchndisingItemEntity(Hashtable<String, String> hashTblItm, Hashtable<String, String> hashtable) throws ODataParserException {
//		ODataEntity itemEntity = null;
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                // CreateOperation the item Entity

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.ImagePath), hashTblItm.get(Constants.ImageMimeType));


                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();

                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.MerchReviewImages);
                oDataRequestParamSingle.setCustomTag(Constants.MerchReviews + "(guid'" + hashTblItm.get(Constants.MerchReviewGUID) + "')/" + Constants.MerchReviewImages + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.ImageMimeType));
                createHeaders.put("SLUG", Constants.MerchImageGUID + ":" + hashTblItm.get(Constants.MerchImageGUID).replace("-", "").toUpperCase() + ","
                        + Constants.MerchReviewGUID + ":" + hashTblItm.get(Constants.MerchReviewGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + "");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    /**
     * returns configurations( values for drop down) for attendance
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListAttendance(String qry) throws OfflineODataStoreException {

        String[] configVal[] = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[3][entities.size()];
                    /*configVal[0][0] = Constants.str_00;
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = Constants.X;*/
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        String propIDVal = (String) property.getValue();
                        configVal[0][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, Constants.PROP_ATTTYP);
                        configVal[2][incVal] = mStrTypeVal;
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[3][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentID);
                        configVal[2][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help(Time Intervals for appointment to display)
     *
     * @throws OfflineODataStoreException
     */
    public static String[] getAppointmentTimeConfigList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configVal[incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help checks for default value(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListWithDefultVal(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[4][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentID);
                        configVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.IsDefault);
                        Boolean boolVal = null;
                        try {
                            boolVal = (Boolean) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        configVal[3][incVal] = boolVal.toString();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * returns Configurations from value help and returns default value as NONE(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigListWithDefaultValAndNone(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[4][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = "";
                    configVal[3][0] = Constants.str_false;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        configVal[0][incVal] = (String) property.getValue();
                        String propIDVal = (String) property.getValue();
                        property = properties.get(Constants.DESCRIPTION);
                        configVal[1][incVal] = (String) property.getValue();
                        String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, typeSetVal);
                        configVal[2][incVal] = mStrTypeVal;
                        property = properties.get(Constants.IsDefault);
                        Boolean boolVal = null;
                        try {
                            boolVal = (Boolean) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        configVal[3][incVal] = boolVal.toString();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }


    //TODO

    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDistributorList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPGUID);
                        distVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPName);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CountryID);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CPTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.SPGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[8][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.CPGUID);
                        try {

                            distVal[5][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.SPNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.FirstName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPNo);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.LastName);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }


    /**
     * returns List of plants from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getPlantList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        distVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.AuthOrgValDesc);
                        distVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }


    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<MaterialsBean> getMaterialList(String retListQry) throws OfflineODataStoreException {

        ArrayList<MaterialsBean> materialList = new ArrayList<MaterialsBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MaterialsBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        retBean = new MaterialsBean();
                        property = properties.get(Constants.MaterialNo);
                        retBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        retBean.setMaterialDesc((String) property.getValue());
//						property = properties.get(Constants.DepotStock);
//						retBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.BaseUom);
                        retBean.setBaseUom((String) property.getValue());


                        materialList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return materialList;

    }


    public static ArrayList<DealerPriceBean> getMaterialPriceList(String retListQry) throws OfflineODataStoreException {

        ArrayList<DealerPriceBean> materialList = new ArrayList<DealerPriceBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DealerPriceBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        retBean = new DealerPriceBean();
                        property = properties.get(Constants.MaterialNo);
                        retBean.setMaterialno((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        retBean.setMaterial((String) property.getValue());
//						property = properties.get(Constants.DepotStock);
//						retBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.BasePrice);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            retBean.setPrice(mStrAmount.toString());
                        }

                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());


                        materialList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return materialList;

    }


    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getCustomerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());


                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        try {
                            property = properties.get(Constants.MobileNo);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        }

                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());


                        // Currency


                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static String getCustomerQry(String retListQry) throws OfflineODataStoreException {
        String mStrRouteQry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
                if (entities != null) {
                    int i = 0;
                    int entitiesTotalSize = entities.size();
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        String cuNumber = (String) property.getValue();

                        if (i == 0 && i == entitiesTotalSize - 1) {
                            mStrRouteQry = Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";

                        } else if (i == 0) {
                            mStrRouteQry = mStrRouteQry + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";

                        } else if (i == entitiesTotalSize - 1) {
                            mStrRouteQry = mStrRouteQry + " or " + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";
                        } else {
                            mStrRouteQry = mStrRouteQry + " or " + Constants.CustomerNo + " eq '"
                                    + cuNumber + "'";
                        }

                        i++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + retListQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (TextUtils.isEmpty(mStrRouteQry)) {
            mStrRouteQry = Constants.Customers + "?$select=CustomerNo,Name,Address1,Address2,Address3,District,City,PostalCode,Mobile1,Currency &$orderby=Name asc";
        } else {
            mStrRouteQry = Constants.Customers + "?$select=CustomerNo,Name,Address1,Address2,Address3,District,City,PostalCode,Mobile1,Currency &$filter=" + mStrRouteQry + "&$orderby=Name asc";
        }
        return mStrRouteQry;

    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getPartnerCustomerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.PartnerCustomerNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        property = properties.get(Constants.PartnerCustomerName);
                        retBean.setCustomerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());


                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobile1((String) property.getValue());


                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }


    public static ArrayList<CustomerBean> getRetailerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCPNo((String) property.getValue());
                        property = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());

                        property = properties.get(Constants.DistrictDesc);
                        retBean.setDistrictDesc((String) property.getValue());

                        property = properties.get(Constants.Landmark);
                        retBean.setLandMark((String) property.getValue());

                        property = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        property = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) property.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        property = properties.get(Constants.CityDesc);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.CPTypeDesc);
                        retBean.setCPTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Group2Desc);
                        retBean.setRetailerCatDesc((String) property.getValue());

                        property = properties.get(Constants.CPUID);
                        retBean.setUID((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retBean.setCPGUID(mCpGuid.guidAsString36());
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.DOB);
                        retBean.setCustDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        retBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.OwnerName);
                        retBean.setOwnerName((String) property.getValue());

                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<StocksInfoBean> getMaterialByCustomersList(String retListQry) throws OfflineODataStoreException {

        ArrayList<StocksInfoBean> getMaterialList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            StocksInfoBean stocksInfoBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        stocksInfoBean = new StocksInfoBean();
                        property = properties.get(Constants.MaterialDesc);
                        stocksInfoBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.MaterialNo);
                        stocksInfoBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.BaseUOM);
                        stocksInfoBean.setUOM((String) property.getValue());
                        property = properties.get(Constants.CustomerStock);
                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();
                        stocksInfoBean.setAsOnDateQuantity(String.valueOf(mDecimalLatitude));
                        getMaterialList.add(stocksInfoBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return getMaterialList;

    }

    public static ArrayList<StocksInfoBean> getStocksList(String retListQry) throws OfflineODataStoreException {

        ArrayList<StocksInfoBean> getStocksList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            StocksInfoBean stocksInfoBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        stocksInfoBean = new StocksInfoBean();
                        property = properties.get(Constants.MaterialDesc);
                        stocksInfoBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.Material);
                        stocksInfoBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.UOM);

                        stocksInfoBean.setUOM((String) property.getValue());
                        property = properties.get(Constants.Unrestricted);

                        BigDecimal mDecimalLatitude = (BigDecimal) property.getValue();
                        if (checkNoUOMZero(String.valueOf(stocksInfoBean.getUOM()))) {
                            stocksInfoBean.setAsOnDateQuantity(trimQtyDecimalPlace(String.valueOf(mDecimalLatitude)));
                        } else
                            stocksInfoBean.setAsOnDateQuantity(String.valueOf(mDecimalLatitude));
                        property = properties.get(Constants.StockGuid);
                        ODataGuid stocksGuid = (ODataGuid) property.getValue();
                        stocksInfoBean.setStockGuid(stocksGuid.guidAsString36().toUpperCase());
                        if (entity.getEtag() != null) {
                            stocksInfoBean.setEtag(entity.getEtag());
                        }
                        getStocksList.add(stocksInfoBean);

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return getStocksList;

    }

    public static ArrayList<CompetitorMasterBean> getCompetitorMasterList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CompetitorMasterBean> getStocksList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CompetitorMasterBean competitorMasterBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        competitorMasterBean = new CompetitorMasterBean();
                        property = properties.get(Constants.CompGUID);
                        competitorMasterBean.setCompGUID(String.valueOf(property.getValue()));
                        property = properties.get(Constants.CompName);
                        competitorMasterBean.setCompName((String) property.getValue());
                        getStocksList.add(competitorMasterBean);

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return getStocksList;

    }


    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<ProspectedCustomerBean> getProspectedCustomerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<ProspectedCustomerBean> retailerList = new ArrayList<ProspectedCustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ProspectedCustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new ProspectedCustomerBean((String) property.getValue());
                        retBean.setCustomerNo((String) property.getValue());
                        property = properties.get(Constants.Name);
                        retBean.setCustName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddresss2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());


                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        property = properties.get(Constants.MobileNo);
                        retBean.setMobile1((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());


                        // Currency


                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }


    /**
     * returns List of Retailer Birthdays from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<BirthdaysBean> getTodayBirthDayList(String todayAnyBirthDayListQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> birthyDayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean birthdaysBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(todayAnyBirthDayListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        birthdaysBean = new BirthdaysBean();

                        property = properties.get(Constants.CPGUID);
//						birthdaysBean.setCPUID((String) property.getValue());

                        try {
                            ODataGuid mCPGUID = (ODataGuid) property.getValue();
                            birthdaysBean.setCPUID(mCPGUID.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.RetailerName);
                        birthdaysBean.setRetailerName((String) property.getValue());
                        property = properties.get(Constants.OwnerName);
                        birthdaysBean.setOwnerName((String) property.getValue());

                        property = properties.get(Constants.DOB);
                        birthdaysBean.setDOB(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Anniversary);
                        birthdaysBean.setAnniversary(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        birthdaysBean.setDOBStatus("");
                        birthdaysBean.setAnniversaryStatus("");
                        property = properties.get(Constants.MobileNo);
                        birthdaysBean.setMobileNo((String) property.getValue());

                        birthyDayList.add(birthdaysBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return birthyDayList;

    }

    /**
     * returns latitude and longitude for Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerLatLongValues(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty oDataProperty;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        oDataProperty = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) oDataProperty.getValue());

                        retBean.setCPNo((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.RetailerName);
                        retBean.setRetailerName((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.MobileNo);
                        retBean.setMobileNumber((String) oDataProperty.getValue());

                        oDataProperty = properties.get(Constants.Latitude);
                        BigDecimal mDecimalLatitude = (BigDecimal) oDataProperty.getValue();  //---------> Decimal property

                        if (mDecimalLatitude != null) {
                            retBean.setLatVal(mDecimalLatitude.doubleValue());
                        } else {
                            retBean.setLatVal(0.0);
                        }

                        oDataProperty = properties.get(Constants.Longitude);
                        BigDecimal mDecimalLongitude = (BigDecimal) oDataProperty.getValue();  //---------> Decimal property

                        if (mDecimalLongitude != null) {
                            retBean.setLongVal(mDecimalLongitude.doubleValue());
                        } else {
                            retBean.setLongVal(0.0);
                        }

                        oDataProperty = properties.get(Constants.CPGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) oDataProperty.getValue();
                            retBean.setCpGuidStringFormat(mCpGuid.guidAsString32() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    /**
     * returns List of Collections from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CollectionHistoryBean> getCollectionHeaderDetails(String collectionHeaderQry) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> collectionHeadereList = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionHeaderQry);
                //Send a request to read the Collections from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.CPNo);
                        collectionHistoryBean.setCPNo((String) property.getValue());
                        property = properties.get(Constants.FIPDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setFIPDate(convertDateFormat);
                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.PaymentModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        collectionHeadereList.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return collectionHeadereList;

    }

    /**
     * returns List of Items for collection from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CollectionHistoryBean> getCollectionItemDetails(String collectionItemsQry) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> collectionItemsList = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionItemsQry);
                //Send a request to read the Collection Items from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.InvoiceNo);

                        String RefId = (String) property.getValue() != null ? (String) property.getValue() : "";

                        collectionHistoryBean.setInvoiceNo((String) property.getValue());

                        property = properties.get(Constants.ItemNo);

                        collectionHistoryBean.setFIPItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

//                        property = properties.get(Constants.InstrumentNo);
//                        collectionHistoryBean.setInstrumentNo((String) property.getValue());

                        property = properties.get(Constants.PaymetModeDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.InvoiceDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setInvoiceDate(convertDateFormat);
                        property = properties.get(Constants.InvoicedAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setInvoiceAmount(mStrAmount.toString());
                        }

                        property = properties.get(Constants.OpenAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setInvoiceBalanceAmount(mStrAmount.toString());
                        }

                        property = properties.get(Constants.CollectedAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setInvoiceClearedAmount(mStrAmount.toString());
                        }

                        collectionHistoryBean.setIsDetailEnabled(false);
                        collectionItemsList.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return collectionItemsList;

    }

    /**
     * returns Invoice number for collection reference id from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getInvoiceNoFromRefId(String invNoByRefIdQry) throws OfflineODataStoreException {
        String invNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invNoByRefIdQry);
                //Send a request to read the invoice no from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        invNo = (String) (properties.get(Constants.InvoiceNo)).getValue() != null ?
                                (String) (properties.get(Constants.InvoiceNo)).getValue() : "";
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return invNo;
    }

    /**
     * returns Details of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getRetDetails(String strQry) throws OfflineODataStoreException {

        ODataEntity retailerEntity = null;

        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    retailerEntity = oDataEntity;
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        retailerEntity = entity;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerEntity;

    }


    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitStatusForCustomer(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    public static boolean getVisitStatusForCustomerGeo(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineGeo != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineGeo.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * returns check for at least one entry in result from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getAtleastOneEntity(String strQry) throws OfflineODataStoreException {

        boolean mAtleastOne = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        return true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mAtleastOne;
    }

    /**
     * returns Authorization data from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<Config> getAuthorizations(Context cntxt) throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = Constants.UserProfileAuthSet + "?$filter=Application eq 'PD' and AuthOrgTypeID eq '000011' ";
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                    SharedPreferences sharedPreferences = cntxt.getSharedPreferences(Constants.PREFS_NAME, 0);
                    SharedPreferences.Editor editor = sharedPreferences.edit();

                    Constants.updateTCodetoSharedPreference(sharedPreferences, editor, authList);


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    /**
     * returns Visit status for visit Guid from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataEntity getVisitDetailsByKey(ODataGuid visitKey) throws OfflineODataStoreException {

        ODataEntity visitEntity = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            try {
                //Define the resource path
                String resourcePath = Constants.Visits + "(guid'" + visitKey.guidAsString36() + "')";

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Visits from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntity oDataEntity = (ODataEntity) response.getPayload();
                    visitEntity = oDataEntity;
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitEntity;

    }

    /**
     * returns Attendance guid as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getAttendance(String strQry) throws OfflineODataStoreException {


        String attdVal = "";
        //Check if the offline oData store is initialized
        if (isOfflineStoreOpen()) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.AttendanceGUID);
                        attdVal = property.getValue().toString();
                        Constants.MapEntityVal.put(Constants.AttendanceGUID, property.getValue());

                        property = properties.get(Constants.StartDate);
                        Constants.MapEntityVal.put(Constants.StartDate, property.getValue());
                        property = properties.get(Constants.StartTime);
                        Constants.MapEntityVal.put(Constants.StartTime, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.EndDate);
                        Constants.MapEntityVal.put(Constants.EndDate, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());

                        property = properties.get(Constants.Remarks);
                        Constants.MapEntityVal.put(Constants.Remarks, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH1);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH1, property.getValue());
                        property = properties.get(Constants.AttendanceTypeH2);
                        Constants.MapEntityVal.put(Constants.AttendanceTypeH2, property.getValue());

                        property = properties.get(Constants.AttendanceGUID);
                        ODataGuid mAttendenceGuid = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.SetResourcePath, Constants.Attendances + "(guid'" + mAttendenceGuid.guidAsString36() + "')");
                        if (entity.getEtag() != null) {
                            Constants.MapEntityVal.put(Constants.Etag, entity.getEtag());
                        }
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;
    }

    /**
     * returns Login Name (Sales person Name) from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getLoginName(String strQry) throws OfflineODataStoreException {

        String conctName = "", mstrLastName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.LastName);
                        mstrLastName = property.getValue().toString();
                        conctName = mstrLastName;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return conctName;

    }

    /**
     * returns Sales persons Mobile number from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getSalePersonMobileNo(String strQry) throws OfflineODataStoreException {


        String mobileNoVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Attendances from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.SalesPersonMobileNo);
                        mobileNoVal = property.getValue().toString();
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mobileNoVal;

    }

    /**
     * returns currency for sales person as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getCurrency(String strQry) throws OfflineODataStoreException {

        String currencyVal = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.Currency);
                        if (property != null) {
                            currencyVal = property.getValue().toString();
                            if (!TextUtils.isEmpty(currencyVal)) {
                                break;
                            }
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return currencyVal;

    }

    /**
     * returns beat name for retailes as string from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getBeatNameForRetailer(String strQry) throws OfflineODataStoreException {

        ODataGuid routseScheduleGuid;
        String beatName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.RouteSchGUID);
                        routseScheduleGuid = (ODataGuid) property.getValue();

                        if (!routseScheduleGuid.equals("")) {

                            String query = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + routseScheduleGuid.guidAsString36().toUpperCase() + "'";
                            beatName = getBeatUsingRouteScheduleGuid(query);
                        }

                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return beatName;

    }

    public static String getBeatUsingRouteScheduleGuid(String strQry) throws OfflineODataStoreException {

        String beatName = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the currency from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.Description);
                        beatName = property.getValue().toString();


                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return beatName;

    }

    /**
     * returns Appointment details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<AppointmentBean> getAppointmentList(String strQry) throws OfflineODataStoreException {

        ArrayList<AppointmentBean> appointmentList = new ArrayList<AppointmentBean>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            AppointmentBean appointment;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new AppointmentBean();
                        properties = entity.getProperties();

						/*property = properties.get(Constants.VISITKEY);
                        appointment.setVisitGUID((String)property.getValue());*/
                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setPlannedDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedStartTime(oDataDuration.toString());
                        property = properties.get(Constants.PlannedEndTime);

                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setPlannedEndTime(oDataDuration.toString());
                        property = properties.get(Constants.VisitTypeDesc);
                        appointment.setVisitTypeDesc((String) property.getValue());
                        property = properties.get(Constants.CPGUID);
                        appointment.setCPGUID((String) property.getValue());
                    /*	property = properties.get(Constants.VISIT_TYPE);
                        appointment.setActivityType((String)property.getValue());*/
                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }

    /**
     * returns Appointment details for Alerts from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<BirthdaysBean> getAppointmentListForAlert(String strQry) throws OfflineODataStoreException {

        ArrayList<BirthdaysBean> appointmentList = new ArrayList<>();

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            BirthdaysBean appointment;
            ODataProperty property, retProperty;
            ODataPropMap properties, retProperties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {

                        appointment = new BirthdaysBean();

                        appointment.setAppointmentAlert(true);
                        properties = entity.getProperties();


                        property = properties.get(Constants.PlannedDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());

                        appointment.setAppointMentDate(convertDateFormat);
                        property = properties.get(Constants.PlannedStartTime);
                        ODataDuration oDataDuration = null;
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentTime(oDataDuration.toString());

                        property = properties.get(Constants.PlannedEndTime);
                        try {
                            oDataDuration = (ODataDuration) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        appointment.setAppointmentEndTime(oDataDuration.toString());


                        property = properties.get(Constants.VisitTypeDesc);
                        String visitTypeDesc = (String) property.getValue() != null ? (String) property.getValue() : "";

                        appointment.setAppointmentType(visitTypeDesc);

                        property = properties.get(Constants.CPGUID);
                        String cpGUID32 = (String) property.getValue();
                        String cpGUID36 = Constants.convertStrGUID32to36(cpGUID32.toUpperCase());
                        appointment.setCPUID(cpGUID36);


                        String cpGuidQry = Constants.ChannelPartners + "(guid'" + cpGUID36 + "') ";
                        ODataEntity retilerEntity = OfflineManager.getRetDetails(cpGuidQry);
                        retProperties = retilerEntity.getProperties();
                        retProperty = retProperties.get(Constants.RetailerName);
                        appointment.setRetailerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.OwnerName);
                        appointment.setOwnerName((String) retProperty.getValue());

                        retProperty = retProperties.get(Constants.MobileNo);
                        appointment.setMobileNo((String) retProperty.getValue());

                        appointment.setAppointmentStatus("");

                        appointmentList.add(appointment);
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return appointmentList;

    }


    /**
     * returns Visit details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ODataGuid getVisitDetails(String strQry) throws OfflineODataStoreException {

        ODataGuid attdVal = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.VISITKEY);
                        attdVal = (ODataGuid) property.getValue();
                        Constants.MapEntityVal.put(Constants.VISITKEY, property.getValue());
                        property = properties.get(Constants.STARTDATE);
                        Constants.MapEntityVal.put(Constants.STARTDATE, property.getValue());
                        property = properties.get(Constants.STARTTIME);
                        Constants.MapEntityVal.put(Constants.STARTTIME, property.getValue());
                        property = properties.get(Constants.StartLat);
                        Constants.MapEntityVal.put(Constants.StartLat, property.getValue());
                        property = properties.get(Constants.StartLong);
                        Constants.MapEntityVal.put(Constants.StartLong, property.getValue());
                        property = properties.get(Constants.ENDDATE);
                        Constants.MapEntityVal.put(Constants.ENDDATE, property.getValue());
                        property = properties.get(Constants.EndLat);
                        Constants.MapEntityVal.put(Constants.EndLat, property.getValue());
                        property = properties.get(Constants.EndLong);
                        Constants.MapEntityVal.put(Constants.EndLong, property.getValue());
                        property = properties.get(Constants.CPNo);
                        Constants.MapEntityVal.put(Constants.CPNo, property.getValue());
                        property = properties.get(Constants.CPGUID);
                        Constants.MapEntityVal.put(Constants.CPGUID, property.getValue());

                        if (property.getValue().toString() != null) {
                            String guidValue = property.getValue().toString();
                            String mStrAddDashSymbol = CharBuffer.join9(StringFunction.substring(guidValue, 0, 8), "-", StringFunction.substring(guidValue, 8, 12), "-", StringFunction.substring(guidValue, 12, 16), "-", StringFunction.substring(guidValue, 16, 20), "-", StringFunction.substring(guidValue, 20, 32));

                            Constants.MapEntityVal.put(Constants.OtherCustGuid, mStrAddDashSymbol);
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return attdVal;

    }

    /**
     * returns List of invoices from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceListBean> getInvoiceHistoryList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<InvoiceListBean>();
        Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceListBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceListBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                invoiceHisBean.setNetAmount(mStrAmount.toString());
                            }


                            invoiceHisBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, invoiceHisBean.getInvoiceDate()));
                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());


                            double outAmt = netAmount - (collamt + devcollamt);

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt > 0) {
                                    if (outAmt >= netAmount) {
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt <= 0) {
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt < netAmount) {
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }
                                    alInvoiceHis.add(invoiceHisBean);
                                } else {
                                    property = properties.get(Constants.InvoiceStatus);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());
                                    alInvoiceHis.add(invoiceHisBean);
                                }

                            }


                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    /* */

    /**
     * returns List of invoices from offline store based on query
     *
     * @throws OfflineODataStoreException
     *//*
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceHistoryBean> getNewInvoiceHistoryList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHis = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceHistoryBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                invoiceHisBean.setInvoiceAmount(mStrAmount.toString());
                            }

//                            property = properties.get(Constants.);
//
//                            if (property != null) {
//                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
//                                collamt = mStrAmount.doubleValue();
//                                invoiceHisBean.setCollectionAmount(mStrAmount.toString());
//                            }

                            property = properties.get(Constants.InvoiceQty);
                            String qty = "0.000";
                            if (property != null) {
                                qty = property.getValue().toString();
                            }
                            property = properties.get(Constants.UOM);
                            invoiceHisBean.setUom((String) property.getValue());
                            if (checkNoUOMZero(invoiceHisBean.getUom()))
                                invoiceHisBean.setInvoiceQuantity(trimQtyDecimalPlace(qty));
                            else
                                invoiceHisBean.setInvoiceQuantity(qty);

                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());


                            property = properties.get(Constants.MaterialDesc);
                            invoiceHisBean.setMatDesc((String) property.getValue());
                            property = properties.get(Constants.MaterialNo);
                            invoiceHisBean.setMatCode((String) property.getValue());

//                            property = properties.get(Constants.ActualInvQty);
//                            invoiceHisBean.setCurrency((String) property.getValue());
//
//                            property = properties.get(Constants.UOM);
//                            invoiceHisBean.setCurrency((String) property.getValue());


//                            property = properties.get(Constants.InvoiceGUID);
//                            String mStrInvoiceGUID32 = "";
//                            try {
//                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
//                                invoiceHisBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
//                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
//                            } catch (Exception e) {
//                                e.printStackTrace();
//                            }
//
//                            invoiceHisBean.setDeviceNo("");
//                            invoiceHisBean.setDeviceStatus("");
//
//							property = properties.get(Constants.SoldToID);
//							String soldTOID = (String) property.getValue();
////
////
////
//							try {
//								devcollamt = getDeviceCollAmt(context,soldTOID,mStrInvoiceGUID32);
//								invoiceHisBean.setDevCollAmount(devcollamt+"");
//							} catch (Exception e) {
//								devcollamt= 0.0;
//								invoiceHisBean.setDevCollAmount("0.0");
//							}
//
//
                            double outAmt = netAmount - (collamt + devcollamt);

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt > 0) {
                                    if (outAmt >= netAmount) {
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt <= 0) {
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt < netAmount) {
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }
                                    alInvoiceHis.add(invoiceHisBean);
                                } else {
                                    property = properties.get(Constants.PaymentStatus);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());
                                    alInvoiceHis.add(invoiceHisBean);
                                }

                            }
//                            alInvoiceHis.add(invoiceHisBean);

                       *//*     OfflineManager.getInvoiceHistoryItem(Constants.SFINVOICES+"?$filter="+ Constants.CustomerNo+" eq '"+mStrBundleRetID+"' " +
                                    "and "+ Constants.InvoiceDate+" ge datetime'" + Constants.getLastMonthDate() + "' ",getApplicationContext(),status,mStrBundleCPGUID);

*//*

                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceHistoryBean>() {
                public int compare(InvoiceHistoryBean one, InvoiceHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }*/
    public static ArrayList<InvoiceListBean> getNewInvoiceHistoryList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<InvoiceListBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceListBean invoiceHisBean;
            Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            invoiceHisBean = new InvoiceListBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            invoiceHisBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            invoiceHisBean.setInvoiceDate(convertDateFormat);
                            invoiceHisBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, invoiceHisBean.getInvoiceDate()));
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                invoiceHisBean.setNetAmount(mStrAmount.toString());
                            }


                            property = properties.get(Constants.InvoiceQty);
                            String qty = "0.000";
                            if (property != null) {
                                qty = property.getValue().toString();
                            }
                            property = properties.get(Constants.UOM);
                            invoiceHisBean.setUOM((String) property.getValue());
                            /*if (checkNoUOMZero(invoiceHisBean.getUOM()))
                                invoiceHisBean.setQuantity(trimQtyDecimalPlace(qty));
                            else
                                invoiceHisBean.setQuantity(qty);*/
                            invoiceHisBean.setQuantity(ConstantsUtils.checkNoUOMZero(invoiceHisBean.getUOM(), qty));


                            property = properties.get(Constants.Currency);
                            invoiceHisBean.setCurrency((String) property.getValue());


                            property = properties.get(Constants.MaterialDesc);
                            invoiceHisBean.setMaterialDesc((String) property.getValue());
                            property = properties.get(Constants.MaterialNo);
                            invoiceHisBean.setMaterial((String) property.getValue());
                            property = properties.get(Constants.InvoiceTypDesc);
                            if (property != null)
                                invoiceHisBean.setInvoiceTypDesc((String) property.getValue());

                            property = properties.get(Constants.InvoiceType);
                            if (property != null)
                                invoiceHisBean.setInvoiceType((String) property.getValue());

                            property = properties.get(Constants.IncoTerm1);
                            if (property != null)
                                invoiceHisBean.setIncoterm1Desc((String) property.getValue());
                            property = properties.get(Constants.IncoTerm1Desc);
                            if (property != null)
                                invoiceHisBean.setIncoterm1Desc((String) property.getValue());

                            property = properties.get(Constants.IncoTerm2);
                            if (property != null)
                                invoiceHisBean.setIncoTerm2((String) property.getValue());
                            property = properties.get(Constants.PaymentTermDes);
                            if (property != null)
                                invoiceHisBean.setPaymentTermDesc((String) property.getValue());
                            property = properties.get(Constants.PaymentTerm);
                            if (property != null)
                                invoiceHisBean.setPaymentTerm((String) property.getValue());

                            double outAmt = netAmount - (collamt + devcollamt);

                            if (status.equalsIgnoreCase("")) {
                                if (devcollamt > 0) {
                                    if (outAmt >= netAmount) {
                                        invoiceHisBean.setInvoiceStatus("01");
                                    } else if (outAmt <= 0) {
                                        invoiceHisBean.setInvoiceStatus("03");
                                    } else if (outAmt < netAmount) {
                                        invoiceHisBean.setInvoiceStatus("02");
                                    }
                                    alInvoiceHis.add(invoiceHisBean);
                                } else {
                                    property = properties.get(Constants.PaymentStatus);
                                    invoiceHisBean.setInvoiceStatus((String) property.getValue());

                                    alInvoiceHis.add(invoiceHisBean);
                                }

                            }

                        }

                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    /**
     * returns List of SalesOrder from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<SalesOrderBean> getSalesOrderList(String schemeQry) throws OfflineODataStoreException {

        ArrayList<SalesOrderBean> alSalesOrderList = new ArrayList<SalesOrderBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path


                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(schemeQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    Double netAmount = 0.0;
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        salesOrderBean.setOrderNo((String) property.getValue());
                        property = properties.get(Constants.TotalAmount);
//							if(property!=null){
//								BigDecimal mStrAmount = (BigDecimal) property.getValue();
//								netAmount = mStrAmount.doubleValue();
//								salesOrderBean.setTotalAmount(mStrAmount.toString());
//							}

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        salesOrderBean.setOrderDate(convertDateFormat);
                        alSalesOrderList.add(salesOrderBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alSalesOrderList != null && alSalesOrderList.size() > 0) {
            Collections.sort(alSalesOrderList, new Comparator<SalesOrderBean>() {
                public int compare(SalesOrderBean one, SalesOrderBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getOrderNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getOrderNo().compareTo(one.getOrderNo());
                    }
                }
            });

        }

        return alSalesOrderList;
    }

    /**
     * returns List of Outstanding Invoices from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<OutstandingBean> getOutstandingList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstanding = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Outstanding invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            outstandingBean = new OutstandingBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            outstandingBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            outstandingBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.NetAmount);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {


                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                outstandingBean.setInvoiceAmount(mStrAmount.toString());
                            }

                            property = properties.get(Constants.CollectionAmount);

                            if (property != null) {


                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collamt = mStrAmount.doubleValue();
                                outstandingBean.setCollectionAmount(mStrAmount.toString());
                            }
//							property = properties.get(Constants.PaymentStatusID);
                            property = properties.get(Constants.InvoiceStatus);
                            outstandingBean.setInvoiceStatus((String) property.getValue());

                            property = properties.get(Constants.Currency);
                            outstandingBean.setCurrency((String) property.getValue());

                            property = properties.get(Constants.InvoiceGUID);
                            String mStrInvoiceGUID32 = "";
                            try {
                                ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                                outstandingBean.setInvoiceGuid(mInvoiceGUID.guidAsString36());
                                mStrInvoiceGUID32 = mInvoiceGUID.guidAsString32().toUpperCase();
                            } catch (Throwable e) {
                                e.printStackTrace();
                            }

                            property = properties.get(Constants.CustomerNo);
                            String custNo = (String) property.getValue();


                            try {
                                devcollamt = getDeviceCollAmt(context, "CustomerNo", mStrInvoiceGUID32);
                                outstandingBean.setDevCollAmount(devcollamt + "");
                            } catch (Exception e) {
                                devcollamt = 0.0;
                                outstandingBean.setDevCollAmount("0.0");
                            }

                            outstandingBean.setDeviceNo("");
                            outstandingBean.setDeviceStatus("");


                            double outAmt = netAmount - (collamt + devcollamt);

                            if (outAmt >= netAmount) {
                                alOutstanding.add(outstandingBean);

                            } else if (outAmt <= 0) {


                            } else if (outAmt > 0 && outAmt < netAmount) {
                                alOutstanding.add(outstandingBean);

                            }


                            property = properties.get(Constants.Bucket1);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket1(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket2);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket2(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket3);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket3(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket4);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket4(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket5);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket5(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket6);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket6(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket7);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket7(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket8);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket8(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket9);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket9(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket10);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket10(mStrAmount.toString());
                            }

                        }
                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

//        if (alOutstanding != null && alOutstanding.size() > 0) {
//            Collections.sort(alOutstanding, new Comparator<OutstandingBean>() {
//                public int compare(OutstandingBean one, OutstandingBean other) {
//                    BigInteger i1 = null;
//                    BigInteger i2 = null;
//                    try {
//                        i1 = new BigInteger(one.getInvoiceNo());
//                    } catch (NumberFormatException e) {
//                    }
//
//                    try {
//                        i2 = new BigInteger(other.getInvoiceNo());
//                    } catch (NumberFormatException e) {
//                    }
//
//                    if (i1 != null && i2 != null) {
//                        return i2.compareTo(i1);
//                    } else {
//                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
//                    }
//                }
//            });
//
//        }
        return alOutstanding;
    }

    public static ArrayList<OutstandingBean> getNewOutstandingList(String schemeQry, Context context, String status, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstanding = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                if (!status.equalsIgnoreCase("5")) {
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(Mode.Read);
                    request.setResourcePath(schemeQry);
                    //Send a request to read the Outstanding invoices from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);
                    //Check if the response is an error
                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        //Retrieve the data from the response
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            outstandingBean = new OutstandingBean();

                            property = properties.get(Constants.InvoiceHisNo);
                            outstandingBean.setInvoiceNo((String) property.getValue());
                            property = properties.get(Constants.MaterialNo);
                            outstandingBean.setMaterialNumber((String) property.getValue());
                            property = properties.get(Constants.MaterialDesc);
                            outstandingBean.setMaterialDescription((String) property.getValue());
                            property = properties.get(Constants.InvoiceDate);
                            String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            outstandingBean.setInvoiceDate(convertDateFormat);
                            property = properties.get(Constants.AmtDue);
                            double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                netAmount = mStrAmount.doubleValue();
                                outstandingBean.setInvoiceAmount(mStrAmount.toString());
                            }
                            property = properties.get(Constants.AmtPastDue);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collamt = mStrAmount.doubleValue();
                                outstandingBean.setCollectionAmount(mStrAmount.toString());
                            }
                            property = properties.get(Constants.NetAmount);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collamt = mStrAmount.doubleValue();
                                outstandingBean.setNetAmount(mStrAmount.toString());
                            }
                            property = properties.get(Constants.InvoiceQty);
                            String qty = "0.000";
                            if (property != null) {
                                qty = property.getValue().toString();
                            }
                            property = properties.get(Constants.UOM);
                            outstandingBean.setUom((String) property.getValue());
                            if (checkNoUOMZero(outstandingBean.getUom()))
                                outstandingBean.setQuantity(trimQtyDecimalPlace(qty));
                            else
                                outstandingBean.setQuantity(qty);
////							property = properties.get(Constants.PaymentStatusID);
//                            property = properties.get(Constants.InvoiceStatus);
//                            outstandingBean.setInvoiceStatus((String) property.getValue());

                            property = properties.get(Constants.Currency);
                            outstandingBean.setCurrency((String) property.getValue());

//
                            outstandingBean.setDeviceNo("");
                            outstandingBean.setDeviceStatus("");


                            double outAmt = netAmount - (collamt + devcollamt);

                            if (outAmt >= netAmount) {
                                alOutstanding.add(outstandingBean);

                            } else if (outAmt <= 0) {


                            } else if (outAmt > 0 && outAmt < netAmount) {
                                alOutstanding.add(outstandingBean);

                            }


                            property = properties.get(Constants.Bucket1);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket1(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket2);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket2(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket3);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket3(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket4);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket4(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket5);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket5(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket6);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket6(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket7);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket7(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket8);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket8(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket9);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket9(mStrAmount.toString());
                            }


                            property = properties.get(Constants.Bucket10);
                            if (property != null) {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                outstandingBean.setBucket10(mStrAmount.toString());
                            }

                            alOutstanding.add(outstandingBean);
                        }
                    } else {
                        throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alOutstanding;
    }

    /**
     * returns List of invoices from device (Data Vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceHistoryBean> getDevInvoiceHistoryList(Context context, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHis = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            try {

                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.InvList, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = ConstantsUtils.getFromDataVault(deviceNo,context);
                        } catch (Throwable e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice) && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(mStrCPGUID.toUpperCase())) {
                                invoiceHisBean = new InvoiceHistoryBean();
                                invoiceHisBean.setDeviceStatus(Constants.X);
                                invoiceHisBean.setDeviceNo(deviceNo);
                                invoiceHisBean.setCpGuid(mStrCPGUID.toUpperCase());

                                invoiceHisBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo) != null ? fetchJsonHeaderObject.getString(Constants.InvoiceNo) : "");
                                invoiceHisBean.setInvoiceStatus("5");
                                invoiceHisBean.setInvoiceAmount(fetchJsonHeaderObject.getString(Constants.NetAmount));
                                invoiceHisBean.setInvoiceDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.InvoiceDate)));
                                invoiceHisBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
                                invoiceHisBean.setInvoiceGuid(fetchJsonHeaderObject.getString(Constants.InvoiceGUID));
                                alInvoiceHis.add(invoiceHisBean);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alInvoiceHis;

    }

    /**
     * returns List of Collections from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<CollectionHistoryBean> getCollectionHistoryList(String collectionListQry, Context context, String mStrCpGuid) throws OfflineODataStoreException {

        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<CollectionHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CollectionHistoryBean collectionHistoryBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(collectionListQry);
                //Send a request to read the Collections from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        collectionHistoryBean = new CollectionHistoryBean();

                        property = properties.get(Constants.InstrumentNo);
                        collectionHistoryBean.setInstrumentNo((String) property.getValue());


                        property = properties.get(Constants.DocumentNo);
                        collectionHistoryBean.setFIPDocNo((String) property.getValue());
                        property = properties.get(Constants.DocumentDate);
                        String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        collectionHistoryBean.setFIPDate(convertDateFormat);
                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionHistoryBean.setAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.Currency);
                        collectionHistoryBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.PaymentMethodDesc);
                        collectionHistoryBean.setPaymentModeDesc((String) property.getValue());

                        property = properties.get(Constants.CollectionTypeDesc);
                        collectionHistoryBean.setCollectionTypeDesc((String) property.getValue());


                      /*  property = properties.get(Constants.FIPGUID);
                        try {
                            ODataGuid mFIPGUID = (ODataGuid) property.getValue();
                            collectionHistoryBean.setFIPGUID("guid'" + mFIPGUID.guidAsString36().toUpperCase() + "'");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/

                        collectionHistoryBean.setDeviceStatus("");
                        collectionHistoryBean.setDeviceNo("");
                        alCollHistory.add(collectionHistoryBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alCollHistory != null && alCollHistory.size() > 0) {
            Collections.sort(alCollHistory, new Comparator<CollectionHistoryBean>() {
                public int compare(CollectionHistoryBean one, CollectionHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getFIPDocNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getFIPDocNo().compareTo(one.getFIPDocNo());
                    }
                }
            });

        }

        return alCollHistory;
    }

    /**
     * returns List of Collections Device(Data Vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<CollectionHistoryBean> getDevCollHisList(Context context, String mStrCpGuid) throws OfflineODataStoreException {
        CollectionHistoryBean collectionHistoryBean;
        ArrayList<CollectionHistoryBean> alCollHistory = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.CollList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCpGuid)) {
                        collectionHistoryBean = new CollectionHistoryBean();
                        collectionHistoryBean.setDeviceStatus(Constants.X);
                        collectionHistoryBean.setDeviceNo(deviceNo);
                        collectionHistoryBean.setFIPDocNo(fetchJsonHeaderObject.getString(Constants.DocumentNo) != null ? fetchJsonHeaderObject.getString(Constants.DocumentNo) : "");

                        collectionHistoryBean.setInstrumentNo(fetchJsonHeaderObject.getString(Constants.InstrumentNo));
                        collectionHistoryBean.setFIPDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.DocumentDate)));
                        collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                        collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
//                        collectionHistoryBean.setFIPGUID(fetchJsonHeaderObject.getString(Constants.FIPGUID));
                        collectionHistoryBean.setPaymentModeDesc(fetchJsonHeaderObject.getString(Constants.PaymentMethodDesc));
                        collectionHistoryBean.setCollectionTypeDesc(fetchJsonHeaderObject.getString(Constants.CollectionTypeDesc));
                        collectionHistoryBean.setIsDetailEnabled(false);
                        alCollHistory.add(collectionHistoryBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return alCollHistory;

    }

    /**
     * Get the conflict errors registered in the ErrorArchive
     *
     * @return List of Errors
     * @throws OfflineODataStoreException
     */
    public static List<OfflineError> getErrorArchive() throws OfflineODataStoreException {
        ArrayList<OfflineError> errorList = new ArrayList<>();
        if (offlineStore != null) {
            OfflineError offlineError;
            ODataProperty property;
            ODataPropMap properties = null;
            try {
                String resourcePath = Constants.ERROR_ARCHIVE_COLLECTION;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl) response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (int k = entities.size() - 1; k >= 0; k--) {
                        ODataEntity entity = entities.get(k);
                        properties = entity.getProperties();
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        String mStrGetMsg = (String) property.getValue();
                        String errorMsg = "";
                        try {
                            JSONObject jsonObject = new JSONObject(mStrGetMsg);
                            JSONObject errorJson = (JSONObject) jsonObject.get(Constants.error);
                            JSONObject errorMsgJson = (JSONObject) errorJson.get(Constants.message);
                            errorMsg = (String) errorMsgJson.get(Constants.value);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_URL);
                        String requestURL = (String) property.getValue();
                        String repalceString = "";
                        if (requestURL != null && !requestURL.equalsIgnoreCase("")) {
                            if (requestURL.indexOf("/") != -1) {
                                repalceString = requestURL.replace("/", "");
                            } else {
                                repalceString = requestURL;
                            }
                        }
                        String errMsg = null;
                        try {
                            errMsg = errorMsg.equalsIgnoreCase("") ? mStrGetMsg : errorMsg;
                        } catch (Exception e) {
                            errMsg = "";
                            e.printStackTrace();
                        }
                        LogManager.writeLogError(repalceString + " : " + errMsg);

                        if (repalceString.contains("guid")) {
                            try {

                                String requiredString = "";
                                requiredString = repalceString.replace(repalceString.substring(repalceString.indexOf("("), repalceString.length()), "");
                                Constants.AL_ERROR_MSG.add(requiredString + " : " + errMsg);
                                Constants.Entity_Set.add(requiredString);
                            } catch (Exception e) {
                                Constants.Entity_Set.add(repalceString);
                                Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                            }
                        } else {
                            Constants.AL_ERROR_MSG.add(repalceString + " : " + errMsg);
                        }

                        property = properties.get(Constants.ERROR_ARCHIVE_ENTRY_MESSAGE);
                        offlineError = new OfflineError((String) property.getValue());
                        offlineError.setEditResourcePath(entity.getEditResourcePath());
                        deleteErrorArchiveEntity(entity);
                        Log.d(Constants.error_txt1, Constants.error_archive_called_txt);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return errorList;
    }


    /**
     * Delete error archive on offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void deleteErrorArchiveEntity(ODataEntity oDataEntity) throws OfflineODataStoreException {
        //BEGIN
        if (offlineStore == null) return;
        try {
            //Get Edit resource path
            ODataPropMap properties = null;
            properties = oDataEntity.getProperties();
            OfflineRequestListener offlineRequestListener = new OfflineRequestListener(
                    Operation.DeleteErrorArchive.getValue(), (String) properties.get(Constants.ERROR_ARCHIVE_ENTRY_REQUEST_METHOD).getValue());
            //Delete the selected error from the ErrorArchive
            offlineStore.executeDeleteEntity(oDataEntity,
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Flush request queue for collection on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener, String collection) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener, collection);
            //Assign an Offline Error Archive
            offlineStore.setRequestErrorListener(new OfflineErrorListener());

            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    public static void flushQueuedRequestsForGeo(UIListener uiListener, String collection) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineGeo == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineGeoFlushListener flushListener = new OfflineGeoFlushListener(uiListener, collection);
            //Assign an Offline Error Archive
            offlineGeo.setRequestErrorListener(new OfflineErrorListener());

            //Asynchronously starts sending pending modification request to the server
            offlineGeo.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Flush request queue on offline request DB
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void flushQueuedRequests(UIListener uiListener) throws
            OfflineODataStoreException {
        //BEGIN
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a flush operation
            OfflineFlushListener flushListener = new OfflineFlushListener(uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleFlushQueuedRequests(flushListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Refresh offline db(store) for selected collection
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void refreshRequests(Context context, String collName, UIListener uiListener) throws
            OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //used to get progress updates of a refresh operation
            OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, Constants.Fresh, collName, uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineStore.scheduleRefresh(collName, refreshListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /**
     * Returns List of Invoices based on retailerID and query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceBean> getInvoices(String InvListQry, String mStrBundleCPGUID, String mStrBundleRetID, Context context) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> invoiceList = new ArrayList<InvoiceBean>();
        InvoiceBean invoiceBean;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(InvListQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        invoiceBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ShipToName);
                        property = properties.get(Constants.InvoiceNo);
                        String invNo = (String) property.getValue();
                        invoiceBean.setInvoiceNo(invNo);

                        property = properties.get(Constants.Currency);
                        invoiceBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InvoiceGUID);
                        String mStrInvGuid = "";

                        try {
                            ODataGuid mInvGUID = (ODataGuid) property.getValue();
                            mStrInvGuid = mInvGUID.guidAsString32();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceGUID(mStrInvGuid);

                        property = properties.get(Constants.NetAmount);
                        String invAmtStr = "0";
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invAmtStr = mStrAmount.toString();
                        }


                        property = properties.get(Constants.CollectionAmount);
                        String collAmtStr = "0";
                        if (property != null) {
                            try {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collAmtStr = mStrAmount.toString();
                            } catch (Exception e) {
                                collAmtStr = "0";
                            }
                        }

//						String mStrCollAmount= getInvCollectedAmount(Constants.FinancialPostings
//								+ "?$filter=" + Constants.CPNo + " eq '" + mStrBundleRetID + "' ",mStrInvGuid.toUpperCase());
                        String mStrPendingAmount = "0";
                        try {
                            //TODO logic changed 22092016 (column name is miss matched retilerNo is name property)
                            double doublePenAmt = Double.parseDouble(invAmtStr) - (Double.parseDouble(collAmtStr) + getDeviceCollAmt(context, mStrBundleRetID, mStrInvGuid.toUpperCase()));
                            mStrPendingAmount = doublePenAmt + "";
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setItemSelected(false);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setInvoiceAmount(invAmtStr);
                        invoiceBean.setDeviceInvStatus("");


                        invoiceBean.setCollectionAmount(collAmtStr);

                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (invoiceList != null && invoiceList.size() > 0) {
            Collections.sort(invoiceList, new Comparator<InvoiceBean>() {
                public int compare(InvoiceBean one, InvoiceBean other) {
                    Integer i1 = null;
                    Integer i2 = null;
                    try {
                        i1 = Integer.parseInt(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Integer.parseInt(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getInvoiceNo().compareTo(other.getInvoiceNo());
                    }
                }
            });
        }

        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.InvList, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store =ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SSInvoice) && fetchJsonHeaderObject.getString(Constants.SoldToID).equalsIgnoreCase(mStrBundleRetID)) {
                        invoiceBean = new InvoiceBean();
                        invoiceBean.setInvoiceNo(fetchJsonHeaderObject.getString(Constants.InvoiceNo) != null ? fetchJsonHeaderObject.getString(Constants.InvoiceNo) : "");
                        invoiceBean.setInvoiceGUID(fetchJsonHeaderObject.getString(Constants.InvoiceGUID));
                        invoiceBean.setInvoiceAmount(fetchJsonHeaderObject.getString(Constants.NetAmount));
                        String mStrPendingAmount = "0";
                        try {
                            double doublePenAmt = Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetAmount)) - (getDeviceCollAmt(context, fetchJsonHeaderObject.getString(Constants.SoldToID),
                                    fetchJsonHeaderObject.getString(Constants.InvoiceGUID).replace("-", "").toUpperCase()));
                            mStrPendingAmount = doublePenAmt + "";
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }
                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setDeviceInvStatus(Constants.X);
                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        return invoiceList;

    }

    /**
     * Returns List of Invoices based on retailerID and query
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static ArrayList<InvoiceBean> getInvoicesByCustomerNo(String InvListQry, String mStrBundleCPGUID, String mStrBundleRetID, Context context) throws OfflineODataStoreException {

        ArrayList<InvoiceBean> invoiceList = new ArrayList<>();
        InvoiceBean invoiceBean;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(InvListQry);
                //Send a request to read the Invoices from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {

                        invoiceBean = new InvoiceBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.InvoiceNo);
                        String invNo = (String) property.getValue();
                        invoiceBean.setInvoiceNo(invNo);

                        property = properties.get(Constants.Currency);
                        invoiceBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.InvoiceDate);
                        String convertDateFormat = UtilConstants.convertGregorianCalendarToYYYYMMDDFormat((GregorianCalendar) property.getValue());
                        invoiceBean.setInvoiceDate(convertDateFormat + "T00:00:00");

                        property = properties.get(Constants.InvoiceTypDesc);
                        invoiceBean.setInvoiceTypDesc((String) property.getValue());

                        property = properties.get(Constants.InvoiceType);
                        invoiceBean.setInvoiceType((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        String invAmtStr = "0";
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invAmtStr = mStrAmount.toString();
                        }

                        property = properties.get(Constants.AmtDue);
                        String collAmtStr = "0";
                        if (property != null) {
                            try {
                                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                                collAmtStr = mStrAmount.toString();
                            } catch (Exception e) {
                                collAmtStr = "0";
                            }
                        }

                        String mStrPendingAmount = "0";
                        try {
                            double doublePenAmt = Double.parseDouble(collAmtStr) - getDeviceCollAmtByCustomerNoInvNo(context, mStrBundleRetID, invoiceBean.getInvoiceNo());
                            mStrPendingAmount = doublePenAmt + "";
                        } catch (NumberFormatException e) {
                            mStrPendingAmount = "0";
                            e.printStackTrace();
                        }

                        invoiceBean.setInvoiceOutstanding(mStrPendingAmount);
                        invoiceBean.setItemSelected(false);
                        invoiceBean.setInputInvAmount("0");
                        invoiceBean.setInvoiceAmount(invAmtStr);
                        invoiceBean.setDeviceInvStatus("");


                        invoiceBean.setCollectionAmount("0");

                        if (Double.parseDouble(mStrPendingAmount) > 0) {
                            invoiceList.add(invoiceBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (invoiceList != null && invoiceList.size() > 0) {
            Collections.sort(invoiceList, new Comparator<InvoiceBean>() {
                public int compare(InvoiceBean one, InvoiceBean other) {
                    Integer i1 = null;
                    Integer i2 = null;
                    try {
                        i1 = Integer.parseInt(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = Integer.parseInt(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getInvoiceNo().compareTo(other.getInvoiceNo());
                    }
                }
            });
        }


        return invoiceList;

    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceCollAmtByCustomerNoInvNo(Context context, String custNo, String invNo) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(custNo)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ItemsText);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (invNo.equalsIgnoreCase(singleRow.get(Constants.InvoiceNo))) {
                                    mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(singleRow.get(Constants.CollectedAmount));
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceCollAmt(Context context, String cpNO, String refID) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.ItemsText);

                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            for (int i = 0; i < arrtable.size(); i++) {
                                HashMap<String, String> singleRow = arrtable.get(i);
                                if (refID.equalsIgnoreCase(singleRow.get(Constants.ReferenceID))) {
                                    mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(singleRow.get(Constants.FIPAmount));
                                }

                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceCollAmt(Context context, String cpNO) {

        double mDoubleDevCollAmout = 0.0;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.CollList, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Collection)
                                && fetchJsonHeaderObject.getString(Constants.CPNo).equalsIgnoreCase(cpNO)
                                && fetchJsonHeaderObject.getString(Constants.FIPDocType).equalsIgnoreCase("01")) {
                            mDoubleDevCollAmout = mDoubleDevCollAmout + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.Amount));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevCollAmout;
    }

    /**
     * returns Invoice details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<InvoiceHistoryBean> getInvoiceHistoryDetails(String invQry) throws OfflineODataStoreException {

        ArrayList<InvoiceHistoryBean> alInvoiceHisDetails = new ArrayList<InvoiceHistoryBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceHisBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invQry);
                //Send a request to read the Invoice Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        invoiceHisBean = new InvoiceHistoryBean();

                        property = properties.get(Constants.UOM);
                        invoiceHisBean.setUom((String) property.getValue());

                        property = properties.get(Constants.InvoiceHisMatNo);
                        invoiceHisBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        invoiceHisBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        invoiceHisBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());

//						property = properties.get(Constants.NetAmount);
                        property = properties.get(Constants.GrossAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invoiceHisBean.setInvoiceAmount(mStrAmount.toString());
                        }

                        property = properties.get(Constants.Tax);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invoiceHisBean.setTaxAmount(mStrAmount.toString());
                        }


                        property = properties.get(Constants.ActualInvQty);
                        String mStrQty = "0.000";
                        if (property != null) {
                            mStrQty = String.valueOf((BigDecimal) property.getValue());
                        }
                        if (checkNoUOMZero(invoiceHisBean.getUom()))
                            invoiceHisBean.setInvQty(trimQtyDecimalPlace(mStrQty));
                        else
                            invoiceHisBean.setInvQty(mStrQty);

                        invoiceHisBean.setIsDetailEnabled(false);

                        alInvoiceHisDetails.add(invoiceHisBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException
                        (e)
                        ;
            }
        }

        if (alInvoiceHisDetails != null && alInvoiceHisDetails.size() > 0) {
            Collections.sort(alInvoiceHisDetails, new Comparator<InvoiceHistoryBean>() {
                public int compare(InvoiceHistoryBean one, InvoiceHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });
        }
        return alInvoiceHisDetails;
    }

    /**
     * returns Outstanding details from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<OutstandingBean> getOutstandingDetails(String outstandingQry) throws OfflineODataStoreException {

        ArrayList<OutstandingBean> alOutstandingDetails = new ArrayList<OutstandingBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            OutstandingBean outstandingBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(outstandingQry);
                //Send a request to read the Outstandin Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        outstandingBean = new OutstandingBean();

                        property = properties.get(Constants.UOM);
                        outstandingBean.setUom((String) property.getValue());

                        property = properties.get(Constants.InvoiceHisMatNo);
                        outstandingBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        outstandingBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        outstandingBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        outstandingBean.setCurrency((String) property.getValue());


                        property = properties.get(Constants.Tax);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            outstandingBean.setTaxAmount(mStrAmount.toString());
                        } else {
                            outstandingBean.setTaxAmount("0.00");
                        }

//						property = properties.get(Constants.NetAmount);
                        property = properties.get(Constants.GrossAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            outstandingBean.setInvoiceAmount(mStrAmount.toString());
                        } else {
                            outstandingBean.setInvoiceAmount("0.00");
                        }
//						property = properties.get(Constants.InvoiceHisQty);
                        property = properties.get(Constants.ActualInvQty);

                        String mStrQty = "0.000";
                        if (property != null) {
                            mStrQty = String.valueOf((BigDecimal) property.getValue());
                        }
                        if (checkNoUOMZero(outstandingBean.getUom()))
                            outstandingBean.setInvQty(trimQtyDecimalPlace(mStrQty));
                        else
                            outstandingBean.setInvQty(mStrQty);
                        outstandingBean.setIsDetailEnabled(false);

                        alOutstandingDetails.add(outstandingBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (alOutstandingDetails != null && alOutstandingDetails.size() > 0) {
            Collections.sort(alOutstandingDetails, new Comparator<OutstandingBean>() {
                public int compare(OutstandingBean one, OutstandingBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });

        }
        return alOutstandingDetails;
    }

    /**
     * Create a new entity for VisitActivities in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createVisitActivity(Hashtable<String, String> hashtable) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitActivityEntity(hashtable);

            offlineStore.executeCreateEntity(newEntity, Constants.VisitActivities, null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Creates a entity to start new visit in the local database
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createVisitActivityEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITACTIVITYENTITY);

                newEntity.getProperties().put(Constants.VisitActivityGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitActivityGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitActivityGUID))));
                newEntity.getProperties().put(Constants.ActivityType,
                        new ODataPropertyDefaultImpl(Constants.ActivityType, hashtable.get(Constants.ActivityType)));
                newEntity.getProperties().put(Constants.ActivityTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ActivityTypeDesc, hashtable.get(Constants.ActivityTypeDesc)));
//                newEntity.getProperties().put(Constants.LOGINID,
//                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                if (hashtable.get(Constants.Latitude) != null) {
                    newEntity.getProperties().put(Constants.Latitude,
                            new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
                }
                if (hashtable.get(Constants.Longitude) != null) {
                    newEntity.getProperties().put(Constants.Longitude,
                            new ODataPropertyDefaultImpl(Constants.Longitude, hashtable.get(Constants.Longitude)));
                }
                if (hashtable.get(Constants.StartTime) != null) {
                    newEntity.getProperties().put(Constants.StartTime,
                            new ODataPropertyDefaultImpl(Constants.StartTime, hashtable.get(Constants.StartTime)));
                }
                if (hashtable.get(Constants.EndTime) != null) {
                    newEntity.getProperties().put(Constants.EndTime,
                            new ODataPropertyDefaultImpl(Constants.EndTime, hashtable.get(Constants.EndTime)));
                }
                newEntity.getProperties().put(Constants.VisitGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VisitGUID))));
                newEntity.getProperties().put(Constants.ActivityRefID,
                        new ODataPropertyDefaultImpl(Constants.ActivityRefID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ActivityRefID))));


                if (!TextUtils.isEmpty(hashtable.get(Constants.VisitActivityGUID))) {
                    newEntity.setResourcePath(Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')", Constants.VisitActivities + "(guid'" + hashtable.get(Constants.VisitActivityGUID) + "')");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }


    /**
     * Returns Monthly target sum for sales person based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getTotalSumByCondition(String monthTargetQry, String columnValue) throws OfflineODataStoreException {

        BigDecimal monthTargetVal = new BigDecimal("0");
        BigDecimal mBigDecTargetVal = new BigDecimal("0");
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(monthTargetQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnValue);
                        monthTargetVal = new BigDecimal("0");
                        if (property != null) {
                            try {
                                monthTargetVal = (BigDecimal) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                        mBigDecTargetVal = mBigDecTargetVal.add(monthTargetVal);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return String.valueOf(mBigDecTargetVal);

    }

    public static String getTotalSumByConditionHighLevel(String monthTargetQry, String columnValue) throws OfflineODataStoreException {

        BigDecimal monthTargetVal = new BigDecimal("0");
        BigDecimal mBigDecTargetVal = new BigDecimal("0");
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(monthTargetQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.HighLevellItemNo);
                        String highLevellItemNo = property.getValue().toString();

                        property = properties.get(Constants.RejReason);
                        String rejReason = property.getValue().toString();

                        property = properties.get(columnValue);
                        monthTargetVal = new BigDecimal("0");
                        if (property != null) {
                            try {
                                monthTargetVal = (BigDecimal) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }
                        if(highLevellItemNo.equalsIgnoreCase("000000") && rejReason.equalsIgnoreCase("")) {
                            mBigDecTargetVal = mBigDecTargetVal.add(monthTargetVal);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return String.valueOf(mBigDecTargetVal);

    }

    /**
     * Returns VisitAcitivityBean object from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static VisitActivityBean getVisitActivityGuid(String visitActRefIDQry) throws OfflineODataStoreException {
        VisitActivityBean visitActivityBean = new VisitActivityBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(visitActRefIDQry);
                //Send a request to read the Visit Activities from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.VisitActivityGUID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setVisitActivityGUID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.ActivityRefID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setActivityRefID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.VisitGUID);

                        try {
                            ODataGuid mvisitGUID = (ODataGuid) property.getValue();
                            visitActivityBean.setVisitGUID(mvisitGUID.guidAsString36());

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.ActivityType);
                        visitActivityBean.setActivityType((String) property.getValue());

                        property = properties.get(Constants.ActivityTypeDesc);
                        visitActivityBean.setActivityTypeDesc((String) property.getValue());

                        property = properties.get(Constants.LOGINID);
                        visitActivityBean.setLoginID((String) property.getValue());

                        visitActivityBean.setETag(entity.getEtag());

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitActivityBean;

    }


    /**
     * Deletes VisitActivities from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static void deleteVisitActivity(VisitActivityBean visitActivityBean) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = deleteVisitActEntity(visitActivityBean);

            offlineStore.executeDeleteEntity(newEntity, null);

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Returns entity to delete VisitActivities from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity deleteVisitActEntity(VisitActivityBean visitBean) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (visitBean != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITACTIVITYENTITY);


                newEntity.getProperties().put(Constants.VisitActivityGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitActivityGUID, ODataGuidDefaultImpl.initWithString32(visitBean.getVisitActivityGUID())));

                newEntity.getProperties().put(Constants.VisitGUID,
                        new ODataPropertyDefaultImpl(Constants.VisitGUID, ODataGuidDefaultImpl.initWithString32(visitBean.getVisitGUID())));
                newEntity.getProperties().put(Constants.ActivityRefID,
                        new ODataPropertyDefaultImpl(Constants.ActivityRefID, ODataGuidDefaultImpl.initWithString32(visitBean.getActivityRefID())));

                newEntity.getProperties().put(Constants.ActivityType,
                        new ODataPropertyDefaultImpl(Constants.ActivityType, visitBean.getActivityType()));
                newEntity.getProperties().put(Constants.ActivityTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ActivityTypeDesc, visitBean.getActivityTypeDesc()));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, visitBean.getLoginID()));

                String resourcePath = Constants.VisitActivities + "(guid'" + visitBean.getVisitActivityGUID() + "')";

                newEntity.setResourcePath(resourcePath, resourcePath);

                if (!visitBean.getETag().equalsIgnoreCase("")) {
                    newEntity.setEtag(visitBean.getETag());
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getValueByColumnName(String mQry, String columnName) throws OfflineODataStoreException {
        String mStrVal = "";
        if (offlineStore != null) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(columnName);
                        mStrVal = (String) property.getValue();
                    }


                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }

    /**
     * Returns value for selected column name from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getGuidValueByColumnName(String retailerQry, String columnName) throws OfflineODataStoreException {
        String mStrVal = "0";
        if (isOfflineStoreOpen()) {
            try {
                //Define the resource path
                ODataProperty property;
                ODataPropMap properties;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerQry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(columnName);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            mStrVal = mInvoiceGUID.guidAsString36().toUpperCase();
                            //To Remove
                            break;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrVal;

    }


    //new 28112016

    /**
     * Returns VisitAcitivities for retailer done or not from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean checkVisitActivitiesForRetailer(String strQry) throws OfflineODataStoreException {

        boolean isVisitActivities = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();


                    for (ODataEntity entity : entities) {
                        isVisitActivities = true;
                        break;
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return isVisitActivities;

    }

    /**
     * Returns other retailers visit status before starting visit for current retailer from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[] checkVisitForOtherRetailer(String strQry) throws OfflineODataStoreException {

        String[] visitDetail = new String[2];
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPGUID);
                        String cpGUID = (String) property.getValue();
                        String custName = "";
                        visitDetail[0] = (custName.equalsIgnoreCase("")) ? getValueByColumnName(Constants.Customers +
                                "?$select=" + Constants.RetailerName + " &$filter = " + Constants.CustomerNo + " eq '" + cpGUID + "'", Constants.RetailerName) : custName;


                        if (visitDetail[0] == "") {

                            visitDetail[0] = Constants.events.getRetailerName("SELECT  * FROM " + Constants.PROSPECTED_TABLE + " where CustomerNo = '" + cpGUID + "'");
                        }
                        property = properties.get(Constants.VISITKEY);
                        visitDetail[1] = ((ODataGuid) property.getValue()).guidAsString36();
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitDetail;
    }

    public static String[] checkVisitForOtherRetailerProspective(String strQry) throws OfflineODataStoreException {

        String[] visitDetail = new String[2];
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(strQry);
                //Send a request to read the visit details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPGUID);
                        String cpGUID = (String) property.getValue();
                        String custName = "";
                        visitDetail[0] = (custName.equalsIgnoreCase("")) ? getValueByColumnName(Constants.Customers +
                                "?$select=" + Constants.RetailerName + " &$filter = " + Constants.CustomerNo + " eq '" + cpGUID + "'", Constants.RetailerName) : custName;

                        visitDetail[0] = Constants.events.getRetailerName("SELECT  * FROM " + Constants.PROSPECTED_TABLE + " where CustomerNo = '" + cpGUID + "'");

                        property = properties.get(Constants.VISITKEY);
                        visitDetail[1] = ((ODataGuid) property.getValue()).guidAsString36();
                    }
                }


            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return visitDetail;
    }

    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutesName(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> listRoutes = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();


                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            listRoutes.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String appendQryRoute = "";
                    for (i = 0; i < listRoutes.size(); i++) {
                        if (i == 0)
                            appendQryRoute += " eq guid'" + listRoutes.get(i) + "'";
                        else
                            appendQryRoute += " or " + Constants.RouteSchGUID + " eq guid'" + listRoutes.get(i) + "'";
                    }
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQryRoute;
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }


    /**
     * Returns List of retailers for route from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForRoute(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        property = properties.get(Constants.CustomerNo);
                        String customerNo = (String) property.getValue() != null ?
                                (String) property.getValue() : "";
                        String dayOfWeek = "";
                        String dayOfMonth = "";
                        property = properties.get(Constants.DOW);

                        if (property.getValue() != null)
                            dayOfWeek = (String) property.getValue();
                        property = properties.get(Constants.DOM);
                        if (property.getValue() != null)
                            dayOfMonth = (String) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                            String qryForTodaysBeat = Constants.RouteSchedulePlans + "?$filter=" + Constants.RouteSchGUID + " eq guid'"
                                    + RschGuid.guidAsString36().toUpperCase() + "' and DayOfWeek eq '" + dayOfWeek + "' and DayOfMonth eq '" + dayOfMonth + "'" +
                                    " &$orderby=" + Constants.SequenceNo + "";

                            List<CustomerBean> listRetailers = OfflineManager.getBeatList(qryForTodaysBeat);
                            alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                            retailerList.addAll(alRetailerList);

                        }


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;

    }

    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getBeatList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
//						property = properties.get(Constants.ViisitCPNo);
                        property = properties.get(Constants.VisitCPGUID);
                        try {
                            String mSpItemGuid = (String) property.getValue();
//							mSpItemGuid = Constants.convertStrGUID32to36(mSpItemGuid);
                            ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
//							List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
//									Constants.CPGUID + " eq guid'" + mSpItemGuid + "' and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" );

//							alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                            alRetailerList = getCustomerList(Constants.Customers + "?$filter=" +
                                    Constants.CustomerNo + " eq '" + mSpItemGuid + "'");

                            retailerList.addAll(alRetailerList);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForOtherRoute() throws OfflineODataStoreException {

        //getting retailers for route
        ArrayList<CustomerBean> alRouteRetailerList = new ArrayList<CustomerBean>();
        String routeQry = Constants.RoutePlans + "?$filter=" + Constants.VisitDate + " eq datetime'" + UtilConstants.getNewDate() + "'";
        alRouteRetailerList = OfflineManager.getRetailerListForRoute(routeQry);


        //getting all active retailers for sales peron
        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
                Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
                " &$orderby=" + Constants.RetailerName + "%20asc");
        retailerList = (ArrayList<CustomerBean>) listRetailers;

        //removing retailers from route
        for (CustomerBean retailer : alRouteRetailerList) {
            for (int i = 0; i < retailerList.size(); i++) {
                if (retailer.getCPGUID().equalsIgnoreCase(retailerList.get(i).getCPGUID())) {
                    retailerList.remove(i);
                    break;
                }
            }
        }
        return retailerList;
    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getCheckMoreThanOneRoute(String qry) throws OfflineODataStoreException {

        boolean mBoolMoreThanOneRoute = false;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> guidArray = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            guidArray.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }

                    if (guidArray != null && guidArray.size() > 0) {
                        if (guidArray.size() > 1) {
                            mBoolMoreThanOneRoute = true;
                        } else {
                            mBoolMoreThanOneRoute = false;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return mBoolMoreThanOneRoute;
    }


    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutes(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> listRoutes = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();


                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            listRoutes.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String appendQryRoute = "";
                    for (i = 0; i < listRoutes.size(); i++) {
                        if (i == 0)
                            appendQryRoute += " eq guid'" + listRoutes.get(i) + "'";
                        else
                            appendQryRoute += " or " + Constants.RouteSchGUID + " eq guid'" + listRoutes.get(i) + "'";
                    }
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQryRoute;
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }


    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForOtherRoute(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    List<String> guidArray = new ArrayList<String>();
                    int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();


                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            guidArray.add(RschGuid.guidAsString36().toUpperCase());
                        }

                    }
                    String appendQry = "";
                    for (i = 0; i < guidArray.size(); i++) {
                        if (i == 0)
                            appendQry += " ne guid'" + guidArray.get(i) + "'";
                        else
                            appendQry += " and " + Constants.RouteSchGUID + " ne guid'" + guidArray.get(i) + "'";
                    }
                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    String qryForOthersBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " " + appendQry;
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    /**
     * Returns List of retailers for other routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListForOtherRoute1(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<>();
        String rchGuidQry = "";
        String qryForOthersBeat = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!Constants.mSetTodayRouteSch.contains(RschGuid.guidAsString36())) {
                            if (rchGuidQry.length() == 0)
                                rchGuidQry += " guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                            else
                                rchGuidQry += " or " + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                        }

                    }

                    qryForOthersBeat = Constants.RouteSchedules + "?$filter=(" +
//							Constants.RouteSchGUID + " eq "+rchGuidQry+") and " + Constants.ApprovalStatus + " eq '03'";
                            Constants.RouteSchGUID + " eq " + rchGuidQry + ")";


                    ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
                    List<CustomerBean> listRetailers = OfflineManager.getOtherBeatList(qryForOthersBeat);
                    alRetailerList = (ArrayList<CustomerBean>) listRetailers;
                    retailerList.addAll(alRetailerList);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;
    }

    public static ArrayList<CustomerBean> getOtherBeatList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RoutId);

                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setRouteID((String) property.getValue());
//						retBean.setCPNo((String) property.getValue());
                        property = properties.get(Constants.Description);
                        retBean.setRouteDesc((String) property.getValue());
                        property = properties.get(Constants.RouteSchGUID);
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            retBean.setRouteGuid36(mCpGuid.guidAsString36());
                            retBean.setRschGuid(mCpGuid.guidAsString36());
                            retBean.setRouteGuid32(mCpGuid.guidAsString32() + "");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        retBean.setEditResourceURL(entity.getEditResourcePath());
                        retBean.setIsAddressEnabled(false);
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<CustomerBean> getRetailerListForOtherBeats(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
//						property = properties.get(Constants.ViisitCPNo);
                        property = properties.get(Constants.VisitCPGUID);

                        try {
                            String mSpItemGuid = (String) property.getValue();
                            mSpItemGuid = UtilConstants.removeLeadingZeros(mSpItemGuid);
//							mSpItemGuid = Constants.convertStrGUID32to36(mSpItemGuid);
                            ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
//							List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
//									Constants.CPGUID + " eq guid'" + mSpItemGuid + "' and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
//									" &$orderby=" + Constants.RetailerName + "%20asc");
                            alRetailerList = getCustomerList(Constants.Customers + "?$filter=" +
                                    Constants.CustomerNo + " eq '" + mSpItemGuid +
                                    "'");

                            retailerList.addAll(alRetailerList);

                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return retailerList;

    }


    public static String getRouteQry(String qry) throws OfflineODataStoreException {
        String mStrRouteQry = "";

        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        RoutePlanBean routePlanBean;
        ArrayList<RoutePlanBean> alRouteList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RschGuid);
                ODataGuid RschGuid = null;
                RschGuid = (ODataGuid) property.getValue();
                if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                    routePlanBean = new RoutePlanBean();
                    routePlanBean.setRschGuid(RschGuid.guidAsString36().toUpperCase());
                    String dayOfWeek = "";
                    String dayOfMonth = "";
                    property = properties.get(Constants.DOW);
                    if (property.getValue() != null)
                        dayOfWeek = (String) property.getValue();
                    property = properties.get(Constants.DOM);
                    if (property.getValue() != null)
                        dayOfMonth = (String) property.getValue();

                    routePlanBean.setDOM(dayOfMonth);
                    routePlanBean.setDOW(dayOfWeek);

                    alRouteList.add(routePlanBean);
                }
            }

            if (alRouteList != null && alRouteList.size() > 0) {
                for (int i = 0; i < alRouteList.size(); i++) {
                    if (i == 0 && i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "')";

                    } else if (i == 0) {
                        mStrRouteQry = mStrRouteQry
                                + "((" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "')";

                    } else if (i == alRouteList.size() - 1) {
                        mStrRouteQry = mStrRouteQry
                                + "%20)or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "'))";
                    } else {
                        mStrRouteQry = mStrRouteQry
                                + "%20)or%20(" + Constants.RouteSchGUID + "%20eq%20guid'"
                                + alRouteList.get(i).getRschGuid() + "' and " + Constants.DayOfWeek + " eq '" + alRouteList.get(i).getDOW() + "' " +
                                "and " + Constants.DayOfMonth + " eq '" + alRouteList.get(i).getDOM() + "') ";
                    }
                }

            }

        } else {
            mStrRouteQry = "";
        }


        return mStrRouteQry;
    }





    /*
     *//**
     * Returns List of retailers for route who are not visited from offline db based on query
     * @throws OfflineODataStoreException
     *//*
    public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws OfflineODataStoreException{

		//Check if the offline oData store is initialized
		String[] configVal[] = null;
		int i = 0;
		if (offlineStore!=null){
			ODataProperty property;
			ODataPropMap properties;

			try {
				//Define the resource path
				ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
				request.setMode(Mode.Read);
				request.setResourcePath(qry);
				//Send a request to read the config from the local database
				ODataResponseSingle response = (ODataResponseSingle) offlineStore.
						executeRequest(request);
				//Check if the response is an error
				if (response.getPayloadType() == ODataPayload.Type.Error) {
					ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
							response.getPayload();
					throw new OfflineODataStoreException(error.getMessage());
					//Check if the response contains EntitySet
				}else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
					ODataEntitySet feed = (ODataEntitySet) response.getPayload();
					List<ODataEntity> entities = feed.getEntities();
					//Retrieve the data from the response
					configVal = new String[entities.size()][5];
					int incVal=0;
					for (ODataEntity entity: entities) {
						properties = entity.getProperties();



						property = properties.get(Constants.RoutePlanKey);
						String routePlanKey = null;
						try {
							routePlanKey = (String) property.getValue();
						} catch (Exception e) {
							e.printStackTrace();
						}

						property = properties.get(Constants.PlannedRoute);
						String routeID = (String) property.getValue() != null ?
								(String) property.getValue() : "";
						if (routeID.equalsIgnoreCase("")) {

							property = properties.get(Constants.CPGuid);
							ODataGuid cpGuid = null;
							try {
								cpGuid = (ODataGuid) property.getValue();
							} catch (Exception e) {
								e.printStackTrace();
							}

							if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
									+ "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.guidAsString32().toUpperCase()
									+ "' and StartDate eq datetime'" + startDate + "' " +
									"and ("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02') and " +
									""+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'" )) {
								property = properties.get(Constants.CustomerNo);
								String custNo = (String) property.getValue();
								//new 01122016
								custNo = custNo.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
										"?$select=" + Constants.CPNo + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                        Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.CPNo) : custNo;
								configVal[incVal][0] = (String) property.getValue();
								property = properties.get(Constants.CustomerName);
								String custName = (String) property.getValue();

								custName = custName.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
										"?$select=" + Constants.RetailerName + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                        Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.RetailerName) : custName;
								configVal[incVal][1] = custName;
								configVal[incVal][2] = custName + " - " + custNo;
								configVal[incVal][3] = cpGuid.guidAsString32().toUpperCase();
								configVal[incVal][4] = routePlanKey;
								incVal++;
								i++;
							}
						} else {
							ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
							List<CustomerBean> listRetailers = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter=" +
									Constants.RouteID + " eq '" + routeID + "' and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
									" &$orderby=" + Constants.RetailerName + "%20asc");
							alRetailerList = (ArrayList<CustomerBean>) listRetailers;

							for (CustomerBean retailer : alRetailerList) {
								if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits + "?$filter=" + Constants.CPGUID +
										" eq '" + retailer.getCpGuidStringFormat().toUpperCase() + "' and StartDate eq datetime'" +
										startDate + "' and ("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02')  and "  +
										Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"' ")) {
									configVal[incVal][0] = retailer.getCPNo();
									configVal[incVal][1] = retailer.getRetailerName();
									configVal[incVal][2] = retailer.getRetailerName()+" - "+retailer.getCPNo();
									configVal[incVal][3] = retailer.getCpGuidStringFormat().toUpperCase();
									configVal[incVal][4] = routePlanKey;
									incVal++;
									i++;
								}
							}

							property = properties.get(Constants.CustomerNo);
							String customerNo = (String) property.getValue() != null ?
									(String) property.getValue() : "";
							if(!customerNo.equalsIgnoreCase("")){
								property = properties.get(Constants.CPGuid);
								ODataGuid cpGuid = null;
								try {
									cpGuid = (ODataGuid) property.getValue();
								} catch (Exception e) {
									e.printStackTrace();
								}

								if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
										+ "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.guidAsString32().toUpperCase()
										+ "' and StartDate eq datetime'" + startDate + "' and "+Constants.StatusID
										+" eq '01'("+Constants.StatusID+" eq '01' or " +Constants.StatusID+" eq '02')  and "
										+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'")) {
									property = properties.get(Constants.CustomerNo);
									String custNo = (String) property.getValue();
									//new 01122016
									custNo = custNo.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
											"?$select=" + Constants.CPNo + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                            Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.CPNo) : custNo;
									configVal[incVal][0] = (String) property.getValue();
									property = properties.get(Constants.CustomerName);
									String custName = (String) property.getValue();

									custName = custName.equalsIgnoreCase("") ? getValueByColumnName(Constants.ChannelPartners +
											"?$select=" + Constants.RetailerName + " &$filter = " +*//* Constants.CPNo + " eq '" + custNo*//*
                                            Constants.CPGUID + " eq guid'" + cpGuid.guidAsString36().toUpperCase() + "'", Constants.RetailerName) : custName;
									configVal[incVal][1] = custName;
									configVal[incVal][2] = custName + " - " + custNo;
									configVal[incVal][3] = cpGuid.guidAsString32().toUpperCase();
									configVal[incVal][4] = routePlanKey;
									incVal++;
									i++;
								}
							}
						}
					}
				} else {
					throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
				}
			} catch (Exception e) {
				throw new OfflineODataStoreException(e);
			}
		}

		if(i<=0)
			return null;
		else{
			String[][] tempVal = new String[i][5];
			for(int j=0; j<i; j++){
				tempVal[j][0] = configVal[j][0];
				tempVal[j][1] = configVal[j][1];
				tempVal[j][2] = configVal[j][2];
				tempVal[j][3] = configVal[j][3];
				tempVal[j][4] = configVal[j][4];
			}

			//sorting array based on name
			Arrays.sort(tempVal, new Comparator<String[]>() {
				@Override
				public int compare(String[] entry1, String[] entry2) {
					// Sort by name
					return entry1[1].compareTo(entry2[1]);
				}
			});
			return tempVal;
		}

	}*/


    /**
     * Returns List of retailers for route who are not visited from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getNotVisitedRetailerList(String qry, String startDate) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        int i = 0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[entities.size()][6];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();


                        property = properties.get(Constants.RouteSchGUID);
                        ODataGuid routeSchGuid = null;
                        try {
                            routeSchGuid = (ODataGuid) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        String routePlanKey = getValueByColumnName(Constants.RoutePlans +
                                "?$select=" + Constants.RoutePlanKey + " &$filter = " +
                                Constants.RschGuid + " eq guid'" + routeSchGuid.guidAsString36().toUpperCase() + "'", Constants.RoutePlanKey);


                        property = properties.get(Constants.VisitCPGUID);
                        String cpGuid = (String) property.getValue();


                        if (!OfflineManager.getVisitStatusForCustomer(Constants.Visits
                                + "?$filter=" + Constants.CPGUID + " eq '" + cpGuid.toUpperCase()
                                + "' and StartDate eq datetime'" + startDate + "' " +
                                "and (" + Constants.StatusID + " eq '01' or " + Constants.StatusID + " eq '02') ")) {

								/*and " +
								""+Constants.ROUTEPLANKEY+" eq guid'"+Constants.convertStrGUID32to36(routePlanKey.toUpperCase())+"'*/

                            String custNo = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.CPNo + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.CPNo);
                            configVal[incVal][0] = custNo;
                            String custName = getValueByColumnName(Constants.ChannelPartners +
                                    "?$select=" + Constants.RetailerName + " &$filter = " +
                                    Constants.CPGUID + " eq guid'" + Constants.convertStrGUID32to36(cpGuid.toUpperCase()) + "'", Constants.RetailerName);
                            configVal[incVal][1] = custName;
                            configVal[incVal][2] = custName + " - " + custNo;
                            configVal[incVal][3] = cpGuid.toUpperCase();
                            configVal[incVal][4] = routePlanKey;
                            configVal[incVal][5] = "";
                            incVal++;
                            i++;
                        }

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        if (i <= 0)
            return null;
        else {
            String[][] tempVal = new String[i][6];
            for (int j = 0; j < i; j++) {
                tempVal[j][0] = configVal[j][0];
                tempVal[j][1] = configVal[j][1];
                tempVal[j][2] = configVal[j][2];
                tempVal[j][3] = configVal[j][3];
                tempVal[j][4] = configVal[j][4];
                tempVal[j][5] = configVal[j][5];
            }

            //sorting array based on name
            Arrays.sort(tempVal, new Comparator<String[]>() {
                @Override
                public int compare(String[] entry1, String[] entry2) {
                    // Sort by name
                    return entry1[1].compareTo(entry2[1]);
                }
            });
            return tempVal;
        }

    }

    /**
     * Create Appointment to store in offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void createAppointment(Hashtable<String, String> table) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createAppointmentEntity(table);

            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /**
     * Returns an Entity for Appointement
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createAppointmentEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                //new
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.VISITKEY))));

                newEntity.getProperties().put(Constants.StatusID,
                        new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID).toString()));
                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
                newEntity.getProperties().put(Constants.PlannedStartTime,
                        new ODataPropertyDefaultImpl(Constants.PlannedStartTime, hashtable.get(Constants.PlannedStartTime)));
                newEntity.getProperties().put(Constants.PlannedEndTime,
                        new ODataPropertyDefaultImpl(Constants.PlannedEndTime, hashtable.get(Constants.PlannedEndTime)));

                newEntity.getProperties().put(Constants.VisitTypeID,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeID, hashtable.get(Constants.VisitTypeID)));
                newEntity.getProperties().put(Constants.VisitTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.VisitTypeDesc, hashtable.get(Constants.VisitTypeDesc)));
                newEntity.getProperties().put(Constants.PlannedDate,
                        new ODataPropertyDefaultImpl(Constants.PlannedDate, UtilConstants.convertDateFormat(hashtable.get(Constants.PlannedDate))));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Create visit start end Entity to store in offline store
     *
     * @throws OfflineODataStoreException
     */
    public static void createVisitStartEnd(Hashtable<String, String> table) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createVisitEntityEndRemarks(table);

            offlineStore.scheduleCreateEntity(newEntity, Constants.Visits,
                    new OfflineRequestListener(Operation.Create.getValue(), null, Constants.Visits),
                    null);


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    //new 30112016

    /**
     * Returns visitActivity status for retailer for selected visitActivity type from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitActivityStatusForCustomer(String strQry, String activityType) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        for (ODataEntity entity : entities) {
                            ODataGuid visitGuid = null;
                            properties = entity.getProperties();
                            property = properties.get(Constants.VisitGUID);
                            try {
                                visitGuid = (ODataGuid) property.getValue();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            String activityStatusForVisitQry = Constants.VISITACTIVITIES + "?$filter=" + Constants.VisitGUID
                                    + " eq guid'" + visitGuid.guidAsString36() + "' and " + Constants.ActivityType + " eq '" + activityType + "'";
                            if (getVisitActivityStatusForVisit(activityStatusForVisitQry))
                                return true;
                        }
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * Returns VisitActivity status for selected visit from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getVisitActivityStatusForVisit(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    if (entities.size() > 0) {
                        mBooleanVisitStatus = true;
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mBooleanVisitStatus;

    }

    /**
     * Returns an Entity for visit start end with remarks from Attendance closure
     *
     * @throws OfflineODataStoreException
     */
    private static ODataEntity createVisitEntityEndRemarks(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                //new
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.VISITENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }


                newEntity.getProperties().put(Constants.VISITKEY,
                        new ODataPropertyDefaultImpl(Constants.VISITKEY, hashtable.get(Constants.VISITKEY)));
                newEntity.getProperties().put(Constants.STARTDATE,
                        new ODataPropertyDefaultImpl(Constants.STARTDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.STARTDATE))));

                newEntity.getProperties().put(Constants.STARTTIME,
                        new ODataPropertyDefaultImpl(Constants.STARTTIME, hashtable.get(Constants.STARTTIME)));

                newEntity.getProperties().put(Constants.StartLat,
                        new ODataPropertyDefaultImpl(Constants.StartLat, hashtable.get(Constants.StartLat)));
                newEntity.getProperties().put(Constants.StartLong,
                        new ODataPropertyDefaultImpl(Constants.StartLong, hashtable.get(Constants.StartLong)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                if (!hashtable.get(Constants.ENDDATE).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.EndLat,
                            new ODataPropertyDefaultImpl(Constants.EndLat, hashtable.get(Constants.EndLat)));
                    newEntity.getProperties().put(Constants.EndLong,
                            new ODataPropertyDefaultImpl(Constants.EndLong, hashtable.get(Constants.EndLong)));
                    newEntity.getProperties().put(Constants.ENDDATE,
                            new ODataPropertyDefaultImpl(Constants.ENDDATE, UtilConstants.convertDateFormat(hashtable.get(Constants.ENDDATE))));

                    newEntity.getProperties().put(Constants.ENDTIME,
                            new ODataPropertyDefaultImpl(Constants.ENDTIME, hashtable.get(Constants.ENDTIME)));


                    newEntity.getProperties().put(Constants.VisitDate,
                            new ODataPropertyDefaultImpl(Constants.VisitDate, UtilConstants.convertDateFormat(hashtable.get(Constants.VisitDate))));

                    newEntity.getProperties().put(Constants.StatusID,
                            new ODataPropertyDefaultImpl(Constants.StatusID, hashtable.get(Constants.StatusID)));

                    newEntity.getProperties().put(Constants.VisitSeq,
                            new ODataPropertyDefaultImpl(Constants.VisitSeq, hashtable.get(Constants.VisitSeq)));

                    //new 28112016
                    newEntity.getProperties().put(Constants.Remarks,
                            new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

                    newEntity.getProperties().put(Constants.CPGUID,
                            new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                }

//                newEntity.getProperties().put(Constants.LOGINID,
//                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));


                newEntity.setResourcePath(hashtable.get(Constants.SetResourcePath), hashtable.get(Constants.SetResourcePath));
                if (hashtable.get(Constants.Etag) != null && !hashtable.get(Constants.Etag).equalsIgnoreCase("")) {
                    newEntity.setEtag(hashtable.get(Constants.Etag));
                }

                if (!hashtable.get(Constants.ROUTEPLANKEY).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.ROUTEPLANKEY,
                            new ODataPropertyDefaultImpl(Constants.ROUTEPLANKEY, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.ROUTEPLANKEY))));
                }


                if (!hashtable.get(Constants.SPGUID).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * Returns RoutePlan Key for selected route from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getRoutePlanKey(String mQuery) throws OfflineODataStoreException {

        String mStrRouteKey = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(mQuery);
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RoutePlanKey);
                        mStrRouteKey = property.getValue().toString();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrRouteKey;

    }

    /**
     * Returns RoutePlan Key for selected route from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String getRoutePlanKeyNew(String mQuery) throws OfflineODataStoreException {

        String mStrRouteKey = "";
        //Check if the offline oData store is initialized


        try {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mQuery);
            ODataProperty property;
            ODataPropMap properties;
            ODataGuid RschGuid = null;
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.RouteSchGUID);
                    RschGuid = (ODataGuid) property.getValue();
                }
                if (RschGuid != null) {
                    String mStrRouteQry = Constants.RoutePlans + "?$filter=" + Constants.RschGuid + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'" +
                            " and " + Constants.VisitDate + " eq datetime'" + UtilConstants.getNewDate() + "' ";

                    List<ODataEntity> routeEntities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrRouteQry);

                    if (routeEntities != null && routeEntities.size() > 0) {
                        for (ODataEntity entity : routeEntities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.RoutePlanKey);
                            mStrRouteKey = (String) property.getValue();
                        }
                    } else {
                        mStrRouteKey = "";
                    }
                } else {
                    mStrRouteKey = "";
                }
            } else {
                mStrRouteKey = "";
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }


        return mStrRouteKey;

    }


    public static ArrayList<Config> getFocusedProdList(String focusedPrdQry) throws OfflineODataStoreException {

        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config focsBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    focsBean = new Config();
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialNo);

                    String materialNo = (String) property.getValue();
                    focsBean.setValue((String) property.getValue());

                    property = properties.get(Constants.MaterialDesc);

                    focsBean.setDescription((String) property.getValue());

                    property = properties.get(Constants.UspDesc);
                    focsBean.setUSPDescription((String) property.getValue());

                    focList.add(focsBean);
                }
            }

        }
        return focList;

    }

    @SuppressLint("NewApi")
    public static ArrayList<MerchandisingBean> getMerchandisingList(String merQry, String getType,Context context) throws OfflineODataStoreException {

        ArrayList<MerchandisingBean> alMercReview = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MerchandisingBean merchReviewBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, merQry);

            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    merchReviewBean = new MerchandisingBean();

                    property = properties.get(Constants.MerchReviewType);

                    merchReviewBean.setMerchReviewType((String) property.getValue());

                    property = properties.get(Constants.MerchReviewTypeDesc);
                    merchReviewBean.setMerchReviewTypeDesc((String) property.getValue());

                    property = properties.get(Constants.Remarks);
                    merchReviewBean.setRemarks((String) property.getValue());

                    property = properties.get(Constants.MerchReviewDate);
                    String convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                    merchReviewBean.setMerchReviewDate(convertDateFormat);

                    property = properties.get(Constants.MerchReviewGUID);
                    ODataGuid mMerHeaderGUID = null;
                    try {
                        mMerHeaderGUID = (ODataGuid) property.getValue();
                        merchReviewBean.setMerchReviewGUID(mMerHeaderGUID.guidAsString36());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    merchReviewBean.setMerchReviewImgGUID(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.MerchImageGUID + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.MerchImageGUID));

                    merchReviewBean.setDocumentStore(getValueByColumnName(Constants.MerchReviewImages
                            + "?$select=" + Constants.DocumentStore + " &$filter = " + Constants.MerchReviewGUID
                            + " eq guid'" + mMerHeaderGUID.guidAsString36().toUpperCase() + "'", Constants.DocumentStore));
                    merchReviewBean.setEtag(entity.getEtag() != null ? entity.getEtag() : "");

                    if (getType.equalsIgnoreCase(Constants.DeviceMechindising)) {
                        merchReviewBean.setImagePath(Constants.getValueFromDataVault(mMerHeaderGUID.guidAsString36().toUpperCase(),context));
                    }

                    merchReviewBean.setResourcePath(entity.getResourcePath());
                    alMercReview.add(merchReviewBean);
                }
            }
        }
        return alMercReview;

    }


    public static String[][] getDistributors(String distQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, distQry);

            if (entities != null && entities.size() > 0) {
                int incVal = 0;
                distList = new String[3][entities.size()];
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();
                    property = properties.get(Constants.CPNo);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.CPGUID);
                    distList[1][incVal] = (String) property.getValue();
                    property = properties.get(Constants.CPName);
                    distList[2][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }


    public static String[][] getBrands(String brandQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);

            if (entities != null && entities.size() > 0) {
                distList = new String[2][entities.size() + 1];
                distList[0][0] = Constants.str_00;
                distList[1][0] = Constants.All;
                int incVal = 1;
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();
                    property = properties.get(Constants.BrandID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.BrandDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getMaterialCategries(String matCatQry) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, matCatQry);

            if (entities != null && entities.size() > 0) {

                distList = new String[2][entities.size() + 1];
                distList[0][0] = Constants.str_00;
                distList[1][0] = Constants.All;
                int incVal = 1;
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.MaterialCategoryID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.MaterialCategoryDesc);
                    distList[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            }

        }
        return distList;

    }

    public static String[][] getCatgeriesBrandsLink(String brandQry, String mStrSelID, String mStrSelDesc) throws OfflineODataStoreException {

        String[][] distList = null;
        ArrayList<Config> focList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, brandQry);

            if (entities != null && entities.size() > 0) {
                distList = new String[2][entities.size() + 1];
                distList[0][0] = Constants.str_00;
                distList[1][0] = Constants.All;
//				distList[2][0] = "";
                int incVal = 1;
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();
                    property = properties.get(mStrSelID);
                    distList[0][incVal] = (String) property.getValue();
                    property = properties.get(mStrSelDesc);
                    distList[1][incVal] = (String) property.getValue();

                    incVal++;
                }
            }

        }
        return distList;

    }


    public static ArrayList<SKUGroupBean> getCRSSKUGroup(String focusedPrdQry, String mStrInvListQry) throws OfflineODataStoreException {

        ArrayList<SKUGroupBean> matList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);
                    skuGrpBean.setMaterialDesc(matSkuDesc);
                    String mStrMatType = getValueByColumnName(Constants.SegmentedMaterials + "?$select=" + Constants.SegmentId
                            + " &$filter=" + Constants.Material_No + " eq '" + matNo + "' ", Constants.SegmentId);
                    skuGrpBean.setMatTypeVal(mStrMatType);
                    skuGrpBean.setDBSTK("" + getDBStk(Constants.CPStockItems
                            + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.MaterialNo + " eq '" + matNo + "' "));

                    if (getMoreThanOneMaterial(Constants.CPStockItems
                            + "?$select=" + Constants.Material_No + "&$filter=" + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId + "' ")) {
                        skuGrpBean.setMultipleMatAval(Constants.YES);
                    } else {
                        skuGrpBean.setMultipleMatAval("");
                    }

                    skuGrpBean.setSOQ(getSOQ("") + "");
                    skuGrpBean.setMRP(getMRP("") + "");
                    skuGrpBean.setRETSTK(getRLSTK("") + "");
                    if (mStrInvListQry.equalsIgnoreCase("")) {
                        skuGrpBean.setUnBilledStatus("");
                    } else {

                        if (OfflineManager.getVisitStatusForCustomer(Constants.SSInvoiceItemDetails
                                + "?$filter=" + Constants.MaterialNo + " eq '" + matNo
                                + "' and " + mStrInvListQry)) {
                            skuGrpBean.setUnBilledStatus(Constants.X);
                        } else {
                            skuGrpBean.setUnBilledStatus("");
                        }
                    }
                    property = properties.get(Constants.UOM);
                    skuGrpBean.setUOM((String) property.getValue());
                    property = properties.get(Constants.Currency);
                    skuGrpBean.setCurrency((String) property.getValue());

                    skuGrpBean.setChildItemTag("");
                    matList.add(skuGrpBean);
                }
            }
        }
        return matList;

    }


    public static ArrayList<SKUGroupBean> getMaterialsByCRSSKUGroup(String focusedPrdQry, String mStrLastMatno) throws OfflineODataStoreException {

        ArrayList<SKUGroupBean> matList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            SKUGroupBean skuGrpBean = null;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, focusedPrdQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    skuGrpBean = new SKUGroupBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    skuGrpBean.setSKUGroup(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    skuGrpBean.setSKUGroupDesc((String) property.getValue());
                    property = properties.get(Constants.MaterialNo);
                    String matNo = (String) property.getValue();
                    property = properties.get(Constants.MaterialDesc);
                    String matSkuDesc = (String) property.getValue();
                    skuGrpBean.setMaterialNo(matNo);
                    skuGrpBean.setMaterialDesc(matSkuDesc);
                    skuGrpBean.setDBSTK("" + getDBStk(Constants.CPStockItems
                            + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.MaterialNo + " eq '" + matNo + "' "));
                    skuGrpBean.setMultipleMatAval("");
                    skuGrpBean.setMRP(getMRP("") + "");
                    property = properties.get(Constants.UOM);
                    skuGrpBean.setUOM((String) property.getValue());
                    property = properties.get(Constants.Currency);
                    skuGrpBean.setCurrency((String) property.getValue());

                    if (mStrLastMatno.equalsIgnoreCase("") || !mStrLastMatno.equalsIgnoreCase(matNo)) {
                        skuGrpBean.setLastPurchasedMaterial("");
                    } else {
                        skuGrpBean.setLastPurchasedMaterial(Constants.YES);
                    }
                    skuGrpBean.setChildItemTag(Constants.YES);
                    matList.add(skuGrpBean);
                }
            }
        }
        return matList;

    }

    public static double getDBStk(String dbStkQry) throws OfflineODataStoreException {
        double doubleDBStk = 0.0;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStkQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.UnrestrictedQty);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        if (mStrQty != null) {
                            doubleDBStk = doubleDBStk + mStrQty.doubleValue();
                        } else {
                            doubleDBStk = doubleDBStk + 0.0;
                        }

                    }
                }
            }

        }

        return doubleDBStk;
    }

    public static double getSOQ(String soqQRY) throws OfflineODataStoreException {
        double doubleSOQ = 0.0;
        if (offlineStore != null) {

        }
        return doubleSOQ;
    }

    public static double getMRP(String mrpQry) throws OfflineODataStoreException {
        double doubleMRP = 0.0;
        if (offlineStore != null) {

        }
        return doubleMRP;
    }

    public static double getRLSTK(String rlSTKQry) throws OfflineODataStoreException {
        double doubleRLSTK = 0.0;
        if (offlineStore != null) {

        }
        return doubleRLSTK;
    }

    public static double getBMT(String bmtQry) throws OfflineODataStoreException {
        double doubleBMT = 0.0;
        if (offlineStore != null) {

        }
        return doubleBMT;
    }

    public static double getTLSD(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet) {

        double mDoubleDevTLSDValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CustomerNo))) {
                            mDoubleDevTLSDValue = mDoubleDevTLSDValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TLSD));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevTLSDValue;
    }

    public static String makeInvoiceQry(String invQry) throws OfflineODataStoreException {

        String invListQry = "";
        ArrayList<InvoiceHistoryBean> invArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    invoiceBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.InvoiceGUID);
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        invoiceBean.setInvoiceGuid(mInvoiceGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    invArrayList.add(invoiceBean);

                }
            }
        }


        if (invArrayList != null && invArrayList.size() > 0) {
            for (int i = 0; i < invArrayList.size(); i++) {
                if (i == 0 && i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "')";

                } else if (i == 0) {
                    invListQry = invListQry
                            + "(" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "'";

                } else if (i == invArrayList.size() - 1) {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "')";
                } else {
                    invListQry = invListQry
                            + "%20or%20" + Constants.InvoiceGUID + "%20eq%20guid'"
                            + invArrayList.get(i).getInvoiceGuid() + "'";
                }
            }
        } else {
            invListQry = "";
        }

        return invListQry;
    }


    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDistributorListByCPGUID(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[11][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[0][incVal] = mInvoiceGUID.guidAsString36();
                            distVal[1][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[2][incVal] = (String) property.getValue();

                        property = properties.get(Constants.PartnerMgrName);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ParentID);
                        distVal[4][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ParentTypeID);
                        distVal[5][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ParentTypDesc);
                        distVal[6][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ParentName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPTypeID);
                        distVal[8][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPTypeDesc);
                        distVal[9][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getDMSDivisionByCPGUID(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        distVal = new String[2][entities.size()];
                        int incVal = 0;
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.DMSDivision);
                            distVal[0][incVal] = (String) property.getValue();

                            property = properties.get(Constants.DMSDivisionDesc);
                            distVal[1][incVal] = (String) property.getValue();

                            incVal++;
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }


    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static boolean getMoreThanOneMaterial(String strQry) throws OfflineODataStoreException {

        boolean mBooleanVisitStatus = false;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, strQry);
        if (entities != null && entities.size() > 0) {
            if (entities.size() > 1) {
                mBooleanVisitStatus = true;
            } else {
                mBooleanVisitStatus = false;
            }
        } else {
            mBooleanVisitStatus = false;
        }
        return mBooleanVisitStatus;

    }

    public static ArrayList<SKUGroupBean> getLastInvNoAndMaterialNo(String invListQry) throws OfflineODataStoreException {
        ArrayList<SKUGroupBean> alLastInvNo = new ArrayList<>();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invListQry);
        SKUGroupBean skuGrpBean = null;
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                skuGrpBean = new SKUGroupBean();
                property = properties.get(Constants.InvoiceNo);
                skuGrpBean.setLastInvoiceNo((String) property.getValue());
                property = properties.get(Constants.MaterialNo);
                skuGrpBean.setLastMaterialNo((String) property.getValue());
                alLastInvNo.add(skuGrpBean);
                break;
            }
        }
        return alLastInvNo;
    }


    /**
     * returns List of Retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getRetailerListArray(String retListQry) throws OfflineODataStoreException {
        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        ODataProperty property;
        ODataPropMap properties;
        CustomerBean retBean;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.CPNo);
                retBean = new CustomerBean((String) property.getValue());
                retBean.setCPNo((String) property.getValue());
                property = properties.get(Constants.RetailerName);
                retBean.setRetailerName((String) property.getValue());
                property = properties.get(Constants.CPGUID);
                ODataGuid mCpGuid = null;
                try {
                    mCpGuid = (ODataGuid) property.getValue();
                    retBean.setCPGUID(mCpGuid.guidAsString36().toUpperCase());
                    retBean.setCpGuidStringFormat(mCpGuid.guidAsString32().toUpperCase());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                retailerList.add(retBean);
            }
        }
        return retailerList;
    }


    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargets(ArrayList<MyTargetsBean> arrayList, String mStrSPGuid, String mStrMonthYear) throws OfflineODataStoreException {
        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();
        for (int incVal = 0; incVal < arrayList.size(); incVal++) {
            String mStrPeriodicityVal = arrayList.get(incVal).getPeriodicity();
            String qryTargets = "";
            if (mStrPeriodicityVal.equalsIgnoreCase(Constants.str_04)) {
                qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                        + arrayList.get(incVal).getKpiGuid() + "'";
            } else {
                qryTargets = Constants.Targets + "?$filter=" + Constants.KPIGUID + " eq guid'"
                        + arrayList.get(incVal).getKpiGuid() + "' and " + Constants.Period + " eq '" + mStrMonthYear + "' ";
            }

            ArrayList<MyTargetsBean> myTargetsBeanArrayList = OfflineManager.getMyTargetsList(qryTargets, mStrSPGuid,
                    arrayList.get(incVal).getKPIName(), arrayList.get(incVal).getKPICode(), arrayList.get(incVal).getKpiGuid(),
                    arrayList.get(incVal).getCalculationBase(), arrayList.get(incVal).getKPIFor(),
                    arrayList.get(incVal).getCalculationSource(), arrayList.get(incVal).getRollUpTo(), arrayList.get(incVal).getPeriodicity(),
                    arrayList.get(incVal).getPeriodicityDesc());
            if (myTargetsBeanArrayList != null && myTargetsBeanArrayList.size() > 0) {
                if (myTargetList != null && myTargetList.size() > 0) {
                    myTargetList.addAll(myTargetList.size(), myTargetsBeanArrayList);
                } else {
                    myTargetList.addAll(myTargetsBeanArrayList);
                }
            } else {
                MyTargetsBean targetsBean = new MyTargetsBean();
                targetsBean.setKPICode(arrayList.get(incVal).getKPICode());
                targetsBean.setKPIName(arrayList.get(incVal).getKPIName());
                targetsBean.setKpiGuid(arrayList.get(incVal).getKpiGuid());
                targetsBean.setCalculationBase(arrayList.get(incVal).getCalculationBase());
                targetsBean.setCalculationSource(arrayList.get(incVal).getCalculationBase());
                targetsBean.setKPIFor(arrayList.get(incVal).getKPIFor());
                targetsBean.setPeriodicity(arrayList.get(incVal).getPeriodicity());
                targetsBean.setPeriodicityDesc(arrayList.get(incVal).getPeriodicityDesc());
                targetsBean.setMonthTarget("0");
                targetsBean.setMTDA("0");
                targetsBean.setAchivedPercentage("0");
                targetsBean.setBTD("0");
                myTargetList.add(targetsBean);


            }
        }

        return myTargetList;
    }


    /*Returns list of target item for sales person*/
    public static ArrayList<MyTargetsBean> getMyTargetsList(String myTargetQry, String mStrSPGuid,
                                                            String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                            String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto, String Periodicity, String mStrPerDesc) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsList(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid, Periodicity, mStrPerDesc);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    public static ArrayList<MyTargetsBean> getMyTargetItemsList(String targetGuid, String mSPGuid,
                                                                String mStrCalBase, String mStrRollUp,
                                                                String mStrKpiName, String mStrKpiGuid, String Periodicity, String mStrPerDesc) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {

            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mSPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    ;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    ;
                }


                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " eq '" + mSPGuid + "'";

            } else if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " ne '" + mSPGuid + "' and "
                    + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase() + "' ")) {
//				if (mStrRollUp.equalsIgnoreCase("02")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc
                            + "," + Constants.UOM + "," + Constants.TargetItemGUID;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc
                            + "," + Constants.UOM + "," + Constants.TargetItemGUID;
                }

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.PartnerGUID + " ne '" + mSPGuid + "'";
//				}
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (!TextUtils.isEmpty(mStrTargetQry) && isOfflineStoreOpen()) {
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            ODataProperty property;
            ODataPropMap properties;
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();


                    MyTargetsBean myTargetBean = new MyTargetsBean();

                    String monthTarget = "", actualTarget = "";
                    Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                    if (mStrCalBase.equalsIgnoreCase("01")) {


                        property = properties.get(Constants.TargetQty);
                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobTargetQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobTargetQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                            mDobTargetQty = 0.0;
                        }
                        monthTarget = mDobTargetQty + "";
                        property = properties.get(Constants.ActualQty);

                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobActQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobActQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                            mDobActQty = 0.0;
                        }
                        actualTarget = mDobActQty + "";
                    } else {

                        property = properties.get(Constants.TargetValue);
                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobTargetQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobTargetQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                            mDobTargetQty = 0.0;
                        }
                        monthTarget = mDobTargetQty + "";

                        property = properties.get(Constants.ActualValue);

                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobActQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobActQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                            mDobActQty = 0.0;
                        }
                        actualTarget = mDobActQty + "";
                    }

                    if (monthTarget != null) {
                        myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                    } else {
                        myTargetBean.setMonthTarget("0");
                    }

                    if (actualTarget != null) {
                        myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                    } else {
                        myTargetBean.setMTDA("0");
                    }

                    double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                    double mDoubBTD = getBTD(monthTarget, actualTarget);

                    myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                    myTargetBean.setBTD(mDoubBTD + "");

                    property = properties.get(Constants.MaterialNo);
                    myTargetBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.MaterialDesc);
                    myTargetBean.setMaterialDesc((String) property.getValue());

                    property = properties.get(Constants.MaterialGroup);
                    myTargetBean.setMaterialGroup((String) property.getValue());

                    property = properties.get(Constants.MaterialGrpDesc);
                    myTargetBean.setMaterialGrpDesc((String) property.getValue());

                    property = properties.get(Constants.OrderMaterialGroupID);
                    myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                    property = properties.get(Constants.UOM);
                    myTargetBean.setUOM((String) property.getValue());

                    property = properties.get(Constants.KPICode);
                    String mStrKpiCodeVal = (String) property.getValue();

                    try {
                        if (Constants.isComingFromDashBoard) {
                            ArrayList<String> matGrpayList = Constants.mapMatGrpBasedOnUOM.get(myTargetBean.getUOM());
                            if (matGrpayList == null) {
                                matGrpayList = new ArrayList<>();
                                matGrpayList.add(myTargetBean.getMaterialGroup());
                                Constants.mapMatGrpBasedOnUOM.put(myTargetBean.getUOM(), matGrpayList);
                            } else {
                                matGrpayList.add(myTargetBean.getMaterialGroup());
                                Constants.mapMatGrpBasedOnUOM.put(myTargetBean.getUOM(), matGrpayList);
                            }

                            MyTargetsBean matGrpayListTemp = Constants.mapMatGrpBasedOnUOMTemp.get(mStrKpiCodeVal);
                            if (matGrpayListTemp == null) {
                                ArrayList<String> arrayList1 = new ArrayList<>();
                                arrayList1.add(myTargetBean.getMaterialGroup());
                                matGrpayListTemp = new MyTargetsBean();
                                matGrpayListTemp.setUOM(myTargetBean.getUOM());
                                matGrpayListTemp.setArrayList(arrayList1);
                                Constants.mapMatGrpBasedOnUOMTemp.put(mStrKpiCodeVal, matGrpayListTemp);
                            } else {
                                ArrayList<String> arrayList1 = matGrpayListTemp.getArrayList();
                                arrayList1.add(myTargetBean.getMaterialGroup());
                                matGrpayListTemp.setUOM(myTargetBean.getUOM());
                                matGrpayListTemp.setArrayList(arrayList1);
                                Constants.mapMatGrpBasedOnUOMTemp.put(mStrKpiCodeVal, matGrpayListTemp);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    myTargetBean.setKPIName(mStrKpiName);

                    property = properties.get(Constants.TargetItemGUID);
                    ODataGuid targetItemGUID = null;
                    try {
                        targetItemGUID = (ODataGuid) property.getValue();
                        myTargetBean.setTargetItemGUID(targetItemGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    myTargetBean.setTargetGUID(targetGuid);
                    myTargetBean.setKPICode(mStrKpiCodeVal);

                    myTargetBean.setKpiGuid(mStrKpiGuid);
                    myTargetBean.setCalculationBase(mStrCalBase);
                    myTargetBean.setPeriodicity(Periodicity);
                    myTargetBean.setPeriodicityDesc(mStrPerDesc);

                    arrayList.add(myTargetBean);
                }
            }
        }
        return arrayList;
    }

    public static ArrayList<MyTargetsBean> getMyTargetItemByGuid(String targetItemGuid, String mStrCalBase,String targetGuid,String materialGroup) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";

        try {


//				if (mStrRollUp.equalsIgnoreCase("02")) {

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc
                            + "," + Constants.UOM + "," + Constants.TargetItemGUID +"," + Constants.PartnerNo+ "," + Constants.PartnerName;
                } else {

                    mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                            + Constants.MaterialNo + "," + Constants.MaterialDesc + "," + Constants.MaterialGroup
                            + "," + Constants.MaterialGrpDesc + "," + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc
                            + "," + Constants.UOM + "," + Constants.TargetItemGUID+ "," + Constants.PartnerNo+ "," + Constants.PartnerName;
                }

                mStrTargetQry = Constants.TargetItems +
                        "?$select=" + mSelectQry + " &$filter=" + Constants.TargetGUID + " eq guid'" + targetGuid.toUpperCase()
                        + "' and " + Constants.MaterialGroup + " eq '" + materialGroup + "'";
//				}

        } catch (Exception e) {
            e.printStackTrace();
        }

        if (!TextUtils.isEmpty(mStrTargetQry) && isOfflineStoreOpen()) {
            try {
                entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
            ODataProperty property;
            ODataPropMap properties;
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();


                    MyTargetsBean myTargetBean = new MyTargetsBean();

                    String monthTarget = "", actualTarget = "";
                    Double mDobTargetQty = 0.0, mDobActQty = 0.0;
                    if (mStrCalBase.equalsIgnoreCase("01")) {


                        property = properties.get(Constants.TargetQty);
                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobTargetQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobTargetQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                            mDobTargetQty = 0.0;
                        }
                        monthTarget = mDobTargetQty + "";
                        property = properties.get(Constants.ActualQty);

                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobActQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobActQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                            mDobActQty = 0.0;
                        }
                        actualTarget = mDobActQty + "";
                    } else {

                        property = properties.get(Constants.TargetValue);
                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobTargetQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobTargetQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                            mDobTargetQty = 0.0;
                        }
                        monthTarget = mDobTargetQty + "";

                        property = properties.get(Constants.ActualValue);

                        try {
                            BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                            mDobActQty = monthTargetVal.doubleValue();
                        } catch (Exception e) {
                            mDobActQty = 0.0;
                            e.printStackTrace();
                        }

                        if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                            mDobActQty = 0.0;
                        }
                        actualTarget = mDobActQty + "";
                    }

                    if (monthTarget != null) {
                        myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                    } else {
                        myTargetBean.setMonthTarget("0");
                    }

                    if (actualTarget != null) {
                        myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                    } else {
                        myTargetBean.setMTDA("0");
                    }

                    double mDouAchivedPercentage = getAchivedPer(monthTarget, actualTarget);

                    double mDoubBTD = getBTD(monthTarget, actualTarget);

                    myTargetBean.setAchivedPercentage(mDouAchivedPercentage + "");
                    myTargetBean.setBTD(mDoubBTD + "");

                    property = properties.get(Constants.MaterialNo);
                    myTargetBean.setMaterialNo((String) property.getValue());

                    property = properties.get(Constants.MaterialDesc);
                    myTargetBean.setMaterialDesc((String) property.getValue());

                    property = properties.get(Constants.MaterialGroup);
                    myTargetBean.setMaterialGroup((String) property.getValue());

                    property = properties.get(Constants.MaterialGrpDesc);
                    myTargetBean.setMaterialGrpDesc((String) property.getValue());

                    property = properties.get(Constants.OrderMaterialGroupID);
                    myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());

                    property = properties.get(Constants.PartnerNo);
                    myTargetBean.setPartnerNo((String) property.getValue());
                    property = properties.get(Constants.PartnerName);
                    myTargetBean.setPartnerName((String) property.getValue());

                    property = properties.get(Constants.UOM);
                    myTargetBean.setUOM((String) property.getValue());


                    property = properties.get(Constants.KPICode);
                    String mStrKpiCodeVal = (String) property.getValue();

                    property = properties.get(Constants.TargetItemGUID);
                    ODataGuid targetItemGUID = null;
                    try {
                        targetItemGUID = (ODataGuid) property.getValue();
                        myTargetBean.setTargetItemGUID(targetItemGUID.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    myTargetBean.setKPICode(mStrKpiCodeVal);
                    arrayList.add(myTargetBean);
                }
            }
        }
        return arrayList;
    }



    public static double getDayTarget(String balTarget, String remingDays) {
        double mDouAchivedPercentage = 0.0;
        try {
            mDouAchivedPercentage = Double.parseDouble(balTarget) / Double.parseDouble(remingDays);
        } catch (NumberFormatException e) {
            mDouAchivedPercentage = 0.0;
        }

        if (Double.isNaN(mDouAchivedPercentage) || Double.isInfinite(mDouAchivedPercentage)) {
            mDouAchivedPercentage = 0.0;
        }

        return mDouAchivedPercentage;
    }

    public static double getAchivedPer(String monthTarget, String actualTarget) {
        double mDouAchivedPercentage = 0.0;
        try {
            mDouAchivedPercentage = Double.parseDouble(actualTarget) / Double.parseDouble(monthTarget) * 100;
        } catch (NumberFormatException e) {
            mDouAchivedPercentage = 0.0;
        }

        if (Double.isNaN(mDouAchivedPercentage) || Double.isInfinite(mDouAchivedPercentage)) {
            mDouAchivedPercentage = 0.0;
        }

        return mDouAchivedPercentage;
    }

    public static double getBTD(String monthTarget, String actualTarget) {
        double mDoubBTD = 0.0;
        try {
            mDoubBTD = Double.parseDouble(monthTarget) - Double.parseDouble(actualTarget);

        } catch (NumberFormatException e) {
            mDoubBTD = 0.0;
        }
        if (Double.isNaN(mDoubBTD) || Double.isInfinite(mDoubBTD)) {
            mDoubBTD = 0.0;
        }

        try {
            if(mDoubBTD<0){
                mDoubBTD = 0.0;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return mDoubBTD;
    }

    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<MyTargetsBean> getKpiSetGuidList(String kpiQry, String mStrDmsDivQry) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> kpiArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (isOfflineStoreOpen()) {
            MyTargetsBean kpiBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    kpiBean = new MyTargetsBean();
                    properties = entity.getProperties();
                    String mStrRollUp = "";
                    property = properties.get(Constants.KPIGUID);
                    ODataGuid kpiGuid = null;
                    try {
                        kpiGuid = (ODataGuid) property.getValue();
                        kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
//                            + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' ";
//                    if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {

                        /*mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        kpiBean.setRollUpTo(mStrRollUp);*/
                    kpiBean.setRollUpTo("");

                    property = properties.get(Constants.KPIName);
                    kpiBean.setKPIName((String) property.getValue());

                    property = properties.get(Constants.KPICode);
                    kpiBean.setKPICode((String) property.getValue());

                    property = properties.get(Constants.KPIFor);
                    kpiBean.setKPIFor((String) property.getValue());

                    property = properties.get(Constants.CalculationSource);
                    kpiBean.setCalculationSource((String) property.getValue());

                    property = properties.get(Constants.CalculationBase);
                    kpiBean.setCalculationBase((String) property.getValue());

                    property = properties.get(Constants.KPICategory);
                    kpiBean.setKPICategory((String) property.getValue());

                    property = properties.get(Constants.Periodicity);
                    kpiBean.setPeriodicity((String) property.getValue());

                    property = properties.get(Constants.PeriodicityDesc);
                    kpiBean.setPeriodicityDesc((String) property.getValue());


                    kpiArrayList.add(kpiBean);
//                    }

                }
            }


        }
        Collections.sort(kpiArrayList, new Comparator<MyTargetsBean>() {
            public int compare(MyTargetsBean one, MyTargetsBean other) {
                BigInteger i1 = null;
                BigInteger i2 = null;
                try {
                    i1 = new BigInteger(one.getKPICode());
                } catch (NumberFormatException e) {
                }

                try {
                    i2 = new BigInteger(other.getKPICode());
                } catch (NumberFormatException e) {
                }
                if (i1 != null && i2 != null) {
                    return i1.compareTo(i2);
                } else {
                    return one.getKPICode().compareTo(other.getKPICode());
                }
            }
        });
        return kpiArrayList;


    }


    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<MyTargetsBean> getKpiSetGuidList(String kpiQry) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> kpiArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (isOfflineStoreOpen()) {
            MyTargetsBean kpiBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    kpiBean = new MyTargetsBean();
                    properties = entity.getProperties();
                    String mStrRollUp = "";
                    property = properties.get(Constants.KPIGUID);
                    try {
                        ODataGuid kpiGuid = (ODataGuid) property.getValue();
                        kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());

                        mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    kpiBean.setRollUpTo(mStrRollUp);

                    property = properties.get(Constants.KPIName);
                    kpiBean.setKPIName((String) property.getValue());


                    property = properties.get(Constants.KPICode);
                    kpiBean.setKPICode((String) property.getValue());

                    property = properties.get(Constants.KPIFor);
                    kpiBean.setKPIFor((String) property.getValue());

                    property = properties.get(Constants.CalculationSource);
                    kpiBean.setCalculationSource((String) property.getValue());

                    property = properties.get(Constants.CalculationBase);
                    kpiBean.setCalculationBase((String) property.getValue());

                    kpiArrayList.add(kpiBean);
                }
            }


        }

        return kpiArrayList;


    }

    public static byte[] getImageList(String mediaLink) throws OfflineODataStoreException {

        final byte[][] bytes = {null};
        //Check if the offline oData store is initialized
        final boolean[] isDataAvailable = {false};
        if (offlineStore != null) {

            ODataDownloadMediaSyncListener oDataDownloadMediaListener = new ODataDownloadMediaSyncListener() {
                @Override
                public void mediaDownloadServerResponse(ODataDownloadMediaResult oDataDownloadMediaResult) {
                    oDataDownloadMediaResult.getAllHttpHeaders();

                    ODataDownloadMediaResultDefaultImpl oDataDownloadMediaResultDefault = (ODataDownloadMediaResultDefaultImpl) oDataDownloadMediaResult;


                    InputStream is = oDataDownloadMediaResultDefault.getInputStream();
                    byte[] buf = null;
                    try {
                        int len;
                        int size = 100 * 1024;


                        if (is instanceof ByteArrayInputStream) {
                            size = is.available();
                            buf = new byte[size];
                            len = is.read(buf, 0, size);
                        } else {
                            ByteArrayOutputStream bos = new ByteArrayOutputStream();
                            buf = new byte[size];
                            while ((len = is.read(buf, 0, size)) != -1)
                                bos.write(buf, 0, len);
                            buf = bos.toByteArray();


                        }
                    } catch (IOException e) {

                    }
                    isDataAvailable[0] = true;
                    bytes[0] = buf;


                }
            };


            URL mediaURL = null;
            try {
                mediaURL = new URL(mediaLink);
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }

            try {
                offlineStore.executeMediaDownload(mediaURL, oDataDownloadMediaListener);
            } catch (ODataException e) {
                e.printStackTrace();
            }
        }

        while (!isDataAvailable[0]) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        isDataAvailable[0] = false;
        return bytes[0];

    }

    public static void createCompetitorInfo(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCompetitorInfoEntity(table);
            //Send the request to create the new visit in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CompetitorInfos,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CompetitorInfos),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    private static ODataEntity createCompetitorInfoEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.CompetitorInfoEntity);


                newEntity.getProperties().put(Constants.CompInfoGUID,
                        new ODataPropertyDefaultImpl(Constants.CompInfoGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CompInfoGUID))));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.SPGUID,
                        new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID))));

                newEntity.getProperties().put(Constants.CompGUID,
                        new ODataPropertyDefaultImpl(Constants.CompGUID, hashtable.get(Constants.CompGUID)));

                newEntity.getProperties().put(Constants.CompName,
                        new ODataPropertyDefaultImpl(Constants.CompName, hashtable.get(Constants.CompName)));


//info
                newEntity.getProperties().put(Constants.MRP,
                        new ODataPropertyDefaultImpl(Constants.MRP, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MRP)))));
                newEntity.getProperties().put(Constants.Margin,
                        new ODataPropertyDefaultImpl(Constants.Margin, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Margin)))));
                newEntity.getProperties().put(Constants.LandingPrice,
                        new ODataPropertyDefaultImpl(Constants.LandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.LandingPrice)))));
                newEntity.getProperties().put(Constants.WholeSalesLandingPrice,
                        new ODataPropertyDefaultImpl(Constants.WholeSalesLandingPrice, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.WholeSalesLandingPrice)))));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.ConsumerOffer,
                        new ODataPropertyDefaultImpl(Constants.ConsumerOffer, hashtable.get(Constants.ConsumerOffer)));
                newEntity.getProperties().put(Constants.TradeOffer,
                        new ODataPropertyDefaultImpl(Constants.TradeOffer, hashtable.get(Constants.TradeOffer)));
                if (hashtable.get(Constants.ShelfLife).equals(""))
                    newEntity.getProperties().put(Constants.ShelfLife,
                            new ODataPropertyDefaultImpl(Constants.ShelfLife, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.ShelfLife)))));
                else
                    newEntity.getProperties().put(Constants.ShelfLife,
                            new ODataPropertyDefaultImpl(Constants.ShelfLife, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.ShelfLife)))));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));

//info


                newEntity.getProperties().put(Constants.Earnings,
                        new ODataPropertyDefaultImpl(Constants.Earnings, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Earnings)))));

                newEntity.getProperties().put(Constants.SchemeName,
                        new ODataPropertyDefaultImpl(Constants.SchemeName, hashtable.get(Constants.SchemeName)));

                //ToDo below lines are hard code values added 02-05-2016

//				newEntity.getProperties().put(Constants.PurchaseQty,
//						new ODataPropertyDefaultImpl(Constants.PurchaseQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.PurchaseQty)))));
//
//				newEntity.getProperties().put(Constants.PurchaseAmount,
//						new ODataPropertyDefaultImpl(Constants.PurchaseAmount, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.PurchaseAmount)))));

                newEntity.getProperties().put(Constants.Period,
                        new ODataPropertyDefaultImpl(Constants.Period, hashtable.get(Constants.Period)));

                newEntity.getProperties().put(Constants.UpdatedOn,
                        new ODataPropertyDefaultImpl(Constants.UpdatedOn, UtilConstants.convertDateFormat(hashtable.get(Constants.UpdatedOn))));

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
				/*if(!hashtable.get(Constants.MatGrp1Amount).equals(""))
					newEntity.getProperties().put(Constants.MatGrp1Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp1Amount, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MatGrp1Amount)))));
				else
					newEntity.getProperties().put(Constants.MatGrp1Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp1Amount,null));

				if(!hashtable.get(Constants.MatGrp2Amount).equals(""))
					newEntity.getProperties().put(Constants.MatGrp2Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp2Amount, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MatGrp2Amount)))));
				else
					newEntity.getProperties().put(Constants.MatGrp2Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp2Amount,null));
				if(!hashtable.get(Constants.MatGrp3Amount).equals(""))
					newEntity.getProperties().put(Constants.MatGrp3Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp3Amount, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MatGrp3Amount)))));
				else
					newEntity.getProperties().put(Constants.MatGrp3Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp3Amount,null));
				if(!hashtable.get(Constants.MatGrp4Amount).equals(""))
					newEntity.getProperties().put(Constants.MatGrp4Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp4Amount, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.MatGrp4Amount)))));
				else
					newEntity.getProperties().put(Constants.MatGrp4Amount,
							new ODataPropertyDefaultImpl(Constants.MatGrp4Amount,null));*/

                if (!TextUtils.isEmpty(hashtable.get(Constants.CompInfoGUID))) {
                    String resourcePath = UtilConstants.getEditResourcePath(Constants.CompetitorInfos, hashtable.get(Constants.CompInfoGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * returns Configurations from value help checks for default value(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getCompetitorNames(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] compNames[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int totalRecords = entities.size() + 1;
                    compNames = new String[2][totalRecords];
                    compNames[0][0] = Constants.None;
                    compNames[1][0] = Constants.None;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CompGUID);
                        compNames[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.CompName);
                        compNames[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return compNames;

    }


    /*Returns KPI set GUID  based on current month and year */
    public static ArrayList<DBStockBean> getCPStockSNosList(String cpStockSnosQry) throws OfflineODataStoreException {

        ArrayList<DBStockBean> dbStockArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean dbStockBean;
            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpStockSnosQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {
                    dbStockBean = new DBStockBean();
                    properties = entity.getProperties();

                    property = properties.get(Constants.MRP);
                    if (property != null) {
                        BigDecimal mStrMrp = (BigDecimal) property.getValue();
                        dbStockBean.setMRP(mStrMrp.toString());
                    }
                    property = properties.get(Constants.LandingPrice);
                    if (property != null) {
                        BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                        dbStockBean.setLandingPrice(mStrLandingPrice.toString());
                    }

                    property = properties.get(Constants.Quantity);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        dbStockBean.setQAQty(mStrQty.toString());
                    }

                    property = properties.get(Constants.DbBatch);
                    dbStockBean.setBatch((String) property.getValue());

                    property = properties.get(Constants.Currency);
                    dbStockBean.setCurrency((String) property.getValue());
                    property = properties.get(Constants.UOM);
                    dbStockBean.setUom((String) property.getValue());

                    property = properties.get(Constants.CPStockItemGUID);
                    ODataGuid mSpItemGuid = null;
                    try {
                        mSpItemGuid = (ODataGuid) property.getValue();
                        dbStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36().toUpperCase());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    if (dbStockArrayList != null && dbStockArrayList.size() > 0) {
                        double mDouQty = 0.0;
                        int incVal;
                        for (incVal = 0; incVal < dbStockArrayList.size(); incVal++) {
                            if ((mSpItemGuid.guidAsString36().toUpperCase()).equalsIgnoreCase(dbStockArrayList.get(incVal).getCPStockItemGUID())) {
                                try {
                                    mDouQty = Double.parseDouble(dbStockArrayList.get(incVal).getQAQty()) + Double.parseDouble(dbStockBean.getQAQty());
                                } catch (NumberFormatException e) {
                                    e.printStackTrace();
                                }

                                dbStockArrayList.get(incVal).setQAQty(mDouQty + "");
                                break;
                            }
                        }
                        if (incVal == dbStockArrayList.size()) {
                            dbStockArrayList.add(dbStockBean);
                        }

                    } else {
                        dbStockArrayList.add(dbStockBean);
                    }


                }
            }


        }

        return dbStockArrayList;


    }


    public static ArrayList<DBStockBean> getDBStockList(String retailerStockQry) throws OfflineODataStoreException {

        ArrayList<DBStockBean> retailerStockList = new ArrayList<DBStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DBStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new DBStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue());


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            retailerStockBean.setStockValue(mStrAmount.toString());
                        }

                        retailerStockBean.setMRP("");
                        retailerStockBean.setRLPrice("");
                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue());
                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            retailerStockBean.setMRP(mStrMrp.toString());
                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue());
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);

                        retailerStockBean.setQAQty("" + getDBStk(Constants.CPStockItems
                                + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' "));


                        if (tempArrList.size() == 0) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        } else if (!tempArrList.contains(MatNo)) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }

    public static ArrayList<RetailerStockBean> getRetailerStockList(String retailerStockQry) throws OfflineODataStoreException {

        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<RetailerStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            RetailerStockBean retailerStockBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        retailerStockBean = new RetailerStockBean();
                        property = properties.get(Constants.CPStockItemGUID);
                        try {
                            ODataGuid mSpItemGuid = (ODataGuid) property.getValue();
                            retailerStockBean.setCPStockItemGUID(mSpItemGuid.guidAsString36().toUpperCase());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.Material_No);

                        String MatNo = (String) property.getValue();
                        retailerStockBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.DbBatch);
                        retailerStockBean.setBatch((String) property.getValue() != null ? (String) property.getValue() : "");


                        property = properties.get(Constants.Material_Desc);
                        retailerStockBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.StockValue);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            if (mStrAmount != null) {
                                retailerStockBean.setStockValue(mStrAmount.toString());
                            } else {
                                retailerStockBean.setStockValue("0.0");
                            }

                        }

                        property = properties.get(Constants.Currency);
                        retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");
                        property = properties.get(Constants.UOM);
                        retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                        property = properties.get(Constants.MRP);
                        if (property != null) {
                            BigDecimal mStrMrp = (BigDecimal) property.getValue();
                            if (mStrMrp != null) {
                                retailerStockBean.setMRP(mStrMrp.toString());
                            } else {
                                retailerStockBean.setMRP("0.0");
                            }

                        }
                        property = properties.get(Constants.LandingPrice);
                        if (property != null) {
                            BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                            if (mStrLandingPrice != null) {
                                retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                            } else {
                                retailerStockBean.setLandingPrice("0.0");
                            }

                        }
                        property = properties.get(Constants.OrderMaterialGroupID);
                        String orderMatGroup = (String) property.getValue();
                        retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                        property = properties.get(Constants.OrderMaterialGroupDesc);
                        retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());
                        property = properties.get(Constants.Batch);
                        retailerStockBean.setBatch((String) property.getValue() != null ? (String) property.getValue() : "");
                        property = properties.get(Constants.ManufacturingDate);
                        String convertDateFormat = "";
                        if (property != null) {
                            convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                        }
                        retailerStockBean.setMFD(convertDateFormat);
                        retailerStockBean.setNewStockItem(false);
                        retailerStockBean.setQAQty("" + getDBStk(Constants.CPStockItems
                                + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' "));


                        if (tempArrList.size() == 0) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        } else if (!tempArrList.contains(MatNo)) {
                            retailerStockList.add(retailerStockBean);
                            tempArrList.add(MatNo);
                        }


                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerStockList;

    }


    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void createCPStockItems(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CPStockItems,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CPStockItems),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to create cpstock items in offline store*/
    private static ODataEntity createCPStockItemsEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.MaterialNo,
                        new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
                newEntity.getProperties().put(Constants.QAQty,
                        new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    //

    /**
     * Creates entity to create cpstock items in offline store from PriceInfo screen
     *
     * @throws OfflineODataStoreException
     */
    public static void createCPStockItemsforPrice(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.CPStockItems,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.CPStockItems),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to create cpstock items in offline store  from PriceInfo screen*/
    private static ODataEntity createCPStockItemsEntityforPrice(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
          /*      newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));*/
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.MaterialNo,
                        new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));

                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, hashtable.get(Constants.StockValue)));
                newEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, hashtable.get(Constants.Currency)));
                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, hashtable.get(Constants.AsOnDate)));

//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
           /*     newEntity.getProperties().put(Constants.QAQty,
                        new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));*/
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
             /*   newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));*/

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }


    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void updateCPStockItemsforPrice(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.CPStockItems), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateCPStockItemsEntityforPrice(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
          /*      newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));*/
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.MaterialNo,
                        new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));

                newEntity.getProperties().put(Constants.StockValue,
                        new ODataPropertyDefaultImpl(Constants.StockValue, hashtable.get(Constants.StockValue)));
                newEntity.getProperties().put(Constants.Currency,
                        new ODataPropertyDefaultImpl(Constants.Currency, hashtable.get(Constants.Currency)));
                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, hashtable.get(Constants.AsOnDate)));

//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
           /*     newEntity.getProperties().put(Constants.QAQty,
                        new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));*/
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
             /*   newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));*/

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;
    }


    /**
     * returns List of materials  from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<DealerPriceBean> getDBStockMaterialsforPrice(String dbStockQry) throws OfflineODataStoreException {

        ArrayList<DealerPriceBean> retailerStockList = new ArrayList<DealerPriceBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStockQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                DealerPriceBean dealerPriceBean = new DealerPriceBean();
                properties = entity.getProperties();
                property = properties.get(Constants.Material_No);
                String MatNo = (String) property.getValue();
                dealerPriceBean.setMaterialno((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                dealerPriceBean.setMaterial((String) property.getValue());

                //  property = properties.get(Constants.OrderMaterialGroupID);
               /* String orderMatGroup = (String) property.getValue();
                dealerPriceBean.setOrderMaterialGro(orderMatGroup);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                dealerPriceBean.setOrderMaterialGroupDesc((String) property.getValue());*/

                property = properties.get(Constants.Currency);
                dealerPriceBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");
/*                property = properties.get(Constants.UOM);
                dealerPriceBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");*/
          /*      property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrMrp = (BigDecimal) property.getValue();
                    if (mStrMrp != null) {
                        dealerPriceBean.setMRP(mStrMrp.toString());
                    } else {
                        dealerPriceBean.setMRP("0.0");
                    }
                }*/
         /*       property = properties.get(Constants.LandingPrice);
                if (property != null) {
                    BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                    if (mStrLandingPrice != null) {
                        dealerPriceBean.setLandingPrice(mStrLandingPrice.toString());
                    } else {
                        dealerPriceBean.setLandingPrice("0.0");
                    }
                }*/

       /*         dealerPriceBean.setQAQty("" + getDBStk(Constants.CPStockItems
                        + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' "));

                if (tempArrList.size() == 0) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(MatNo);
                } else if (!tempArrList.contains(MatNo)) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(MatNo);
                }*/


                property = properties.get(Constants.StockValue);
                dealerPriceBean.setInputPrice((String) property.getValue());


                property = properties.get(Constants.Currency);
                dealerPriceBean.setCurrency((String) property.getValue());


                property = properties.get(Constants.AsOnDate);
                dealerPriceBean.setAsonDate((String) property.getValue());


                property = properties.get(Constants.CPStockItemGUID);
                dealerPriceBean.setCpstockitemguid((ODataGuid) property.getValue());

                dealerPriceBean.setEtag(entity.getEtag());

                property = properties.get(Constants.SetResourcePath);
                dealerPriceBean.setResourcepath((String) property.getValue());

                //ODataGuid kpiGuid =  property.getValue();

            }
        }
        return retailerStockList;
    }

    /**
     * Update an existing CPStockitems in the local database
     *
     * @throws OfflineODataStoreException
     */
    public static void updateCPStockItems(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateCPStockItemsEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.CPStockItems), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    /*Creates entity to update attendance in offline store*/
    private static ODataEntity updateCPStockItemsEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.CPStockItemEntity);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.CPStockItemGUID,
                        new ODataPropertyDefaultImpl(Constants.CPStockItemGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.CPStockItemGUID))));
                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashtable.get(Constants.CPGUID)));
                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));
                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashtable.get(Constants.CPNo)));
                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashtable.get(Constants.CPName)));
                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashtable.get(Constants.CPTypeID)));
                newEntity.getProperties().put(Constants.MaterialNo,
                        new ODataPropertyDefaultImpl(Constants.MaterialNo, hashtable.get(Constants.MaterialNo)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
                newEntity.getProperties().put(Constants.QAQty,
                        new ODataPropertyDefaultImpl(Constants.QAQty, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.QAQty)))));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashtable.get(Constants.OrderMaterialGroupID)));
                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashtable.get(Constants.OrderMaterialGroupDesc)));

                if (!TextUtils.isEmpty(hashtable.get(Constants.CPStockItemGUID))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.CPStockItems, hashtable.get(Constants.CPStockItemGUID));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * returns List of materials  from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<RetailerStockBean> getDBStockMaterials(String dbStockQry) throws OfflineODataStoreException {

        ArrayList<RetailerStockBean> retailerStockList = new ArrayList<RetailerStockBean>();
        ArrayList<String> tempArrList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, dbStockQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                RetailerStockBean retailerStockBean = new RetailerStockBean();
                properties = entity.getProperties();
                property = properties.get(Constants.Material_No);
                String MatNo = (String) property.getValue();
                retailerStockBean.setMaterialNo((String) property.getValue());

                property = properties.get(Constants.MaterialDesc);
                retailerStockBean.setMaterialDesc((String) property.getValue());

                property = properties.get(Constants.OrderMaterialGroupID);
                String orderMatGroup = (String) property.getValue();
                retailerStockBean.setOrderMaterialGroupID(orderMatGroup);
                property = properties.get(Constants.OrderMaterialGroupDesc);
                retailerStockBean.setOrderMaterialGroupDesc((String) property.getValue());

                property = properties.get(Constants.Currency);
                retailerStockBean.setCurrency((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.UOM);
                retailerStockBean.setUom((String) property.getValue() != null ? (String) property.getValue() : "");
                property = properties.get(Constants.MRP);
                if (property != null) {
                    BigDecimal mStrMrp = (BigDecimal) property.getValue();
                    if (mStrMrp != null) {
                        retailerStockBean.setMRP(mStrMrp.toString());
                    } else {
                        retailerStockBean.setMRP("0.0");
                    }
                }
                property = properties.get(Constants.LandingPrice);
                if (property != null) {
                    BigDecimal mStrLandingPrice = (BigDecimal) property.getValue();
                    if (mStrLandingPrice != null) {
                        retailerStockBean.setLandingPrice(mStrLandingPrice.toString());
                    } else {
                        retailerStockBean.setLandingPrice("0.0");
                    }
                }

                retailerStockBean.setQAQty("" + getDBStk(Constants.CPStockItems
                        + "?$select=" + Constants.UnrestrictedQty + "&$filter=" + Constants.Material_No + " eq '" + MatNo + "' "));

                if (tempArrList.size() == 0) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(MatNo);
                } else if (!tempArrList.contains(MatNo)) {
                    retailerStockList.add(retailerStockBean);
                    tempArrList.add(MatNo);
                }

            }
        }
        return retailerStockList;
    }


    /**
     * returns collection amount for device collection(Data vault)
     *
     * @throws OfflineODataStoreException
     */
    @SuppressLint("NewApi")
    public static double getDeviceTotalOrderAmt(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet, boolean hideVisit) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && (alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CustomerNo)) || hideVisit)) {
                            mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.NetPrice));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static double getDeviceTotalOrderQty(String createType, Context context, String mStrCurrentDate, ArrayList<String> alTodayRet, boolean hideVisit) {

        double mDoubleDevOrderQty = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && createdOn[0].equalsIgnoreCase(splitToday[0]) && (alTodayRet.contains(fetchJsonHeaderObject.getString(Constants.CustomerNo)) || hideVisit)) {
                            mDoubleDevOrderQty = mDoubleDevOrderQty + Double.parseDouble(fetchJsonHeaderObject.getString(Constants.TotalQuantity));
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderQty;
    }

/*	public static ArrayList<CustomerBean> getBalanceRetVisitRoute(String qry) throws OfflineODataStoreException{



		ArrayList<CustomerBean> retAlList = new ArrayList<>();
		ODataProperty property;
		ODataPropMap properties;
		List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore,qry) ;
		if(entities!=null && entities.size()>0) {
			for (ODataEntity entity : entities) {
				properties = entity.getProperties();
				property = properties.get(Constants.CPNo);
				CustomerBean customerBean =new CustomerBean()

			}
		}

		ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
		if (offlineStore!=null){
			ODataProperty property;
			ODataPropMap properties;

			try {
				//Define the resource path
				ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
				request.setMode(Mode.Read);
				request.setResourcePath(qry);
				//Send a request to read the routes from the local database
				ODataResponseSingle response = (ODataResponseSingle) offlineStore.
						executeRequest(request);
				//Check if the response is an error
				if (response.getPayloadType() == ODataPayload.Type.Error) {
					ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
							response.getPayload();
					throw new OfflineODataStoreException(error.getMessage());
					//Check if the response contains EntitySet
				}else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
					ODataEntitySet feed = (ODataEntitySet) response.getPayload();
					List<ODataEntity> entities = feed.getEntities();
					//Retrieve the data from the response

					for (ODataEntity entity: entities) {
						properties = entity.getProperties();
						property = properties.get(Constants.RschGuid);
						ODataGuid RschGuid = null;
						RschGuid =  (ODataGuid)property.getValue();
						property = properties.get(Constants.CustomerNo);
						String customerNo = (String) property.getValue() != null ?
								(String) property.getValue() : "";
						String dayOfWeek="";
						String dayOfMonth="";
						property = properties.get(Constants.DOW);

						if(property.getValue()!=null)
							dayOfWeek= (String)property.getValue();
						property = properties.get(Constants.DOM);
						if(property.getValue()!=null)
							dayOfMonth = (String)property.getValue();
						if(!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000"))
						{
							ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
							String qryForTodaysBeat = Constants.RouteSchedulePlans+ "?$filter=" +Constants.RouteSchGUID+ " eq guid'"
									+ RschGuid.guidAsString36().toUpperCase()+"' and DayOfWeek eq '"+dayOfWeek+"' and DayOfMonth eq '"+dayOfMonth+"'" +
									" &$orderby="+Constants.SequenceNo+"";

							List<CustomerBean> listRetailers = OfflineManager.getBeatList(qryForTodaysBeat);
							alRetailerList = (ArrayList<CustomerBean>) listRetailers;
							retailerList.addAll(alRetailerList);

						}






					}
				}
				else {
					throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
				}
			} catch (Exception e) {
				throw new OfflineODataStoreException(e);

			}
		}
		return retailerList;

	}*/

    /**
     * get secondary sales order list
     *
     * @param retailerStockQry
     * @return
     * @throws OfflineODataStoreException
     */
    public static List<SalesOrderBean> getSecondarySalesOrderList(Context context, String retailerStockQry, String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        String SoNo = (String) property.getValue();
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.DelvStatus);
                        salesOrderBean.setDelvStatus((String) property.getValue());
                       /* property = properties.get(Constants.DelvStatusDesc);
                        salesOrderBean.setDelvStatusDesc((String) property.getValue());*/
                        property = properties.get(Constants.Status);
                        salesOrderBean.setStatusID((String) property.getValue());

                       /* property = properties.get(Constants.StatusDesc);
                        salesOrderBean.setStatusDesc((String) property.getValue());*/

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());

                        /*property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");*/


                       /* property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/


                        property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat(((GregorianCalendar) property.getValue()));
                        salesOrderBean.setOrderDate(convertDateFormat);


                       /* property = properties.get(Constants.OrderType);
                        salesOrderBean.setOrderType((String) property.getValue());

                        property = properties.get(Constants.OrderTypeDesc);
                        salesOrderBean.setOrderTypeDesc((String) property.getValue());*/

                      /*  property = properties.get(Constants.SalesArea);
                        salesOrderBean.setSalesArea((String) property.getValue());

                        property = properties.get(Constants.SalesAreaDesc);
                        salesOrderBean.setSalesAreaDesc((String) property.getValue());*/

                       /* property = properties.get(Constants.CustomerNo);
                        salesOrderBean.setSoldTo((String) property.getValue());

                        property = properties.get(Constants.CustomerName);
                        salesOrderBean.setSoldToName((String) property.getValue());*/


                       /* property = properties.get(Constants.ShipToParty);
                        salesOrderBean.setShipTo((String) property.getValue());

                        property = properties.get(Constants.ShipToPartyName);
                        salesOrderBean.setShipToName((String) property.getValue());


                        property = properties.get(Constants.ShippingTypeID);
                        salesOrderBean.setShippingTypeID((String) property.getValue());

                        property = properties.get(Constants.ShippingTypeDesc);
                        salesOrderBean.setShippingTypeDesc((String) property.getValue());*/

//                        property = properties.get("ZZFrwadgAgentName");
//                        salesOrderBean.setForwardingAgentName((String) property.getValue());
//
//
//                        property = properties.get("ZZFrwadgAgent");
//                        salesOrderBean.setForwardingAgent((String) property.getValue());

                       /* property = properties.get(Constants.Plant);
                        salesOrderBean.setPlant((String) property.getValue());

                        property = properties.get(Constants.PlantDesc);
                        salesOrderBean.setPlantDesc((String) property.getValue());

                        property = properties.get(Constants.Incoterm1);
                        salesOrderBean.setIncoTerm1((String) property.getValue());

                        property = properties.get(Constants.Incoterm1Desc);
                        salesOrderBean.setIncoterm1Desc((String) property.getValue());


                        property = properties.get(Constants.Incoterm2);
                        salesOrderBean.setIncoterm2((String) property.getValue());*/

                       /* property = properties.get(Constants.Payterm);
                        salesOrderBean.setPaymentTerm((String) property.getValue());

                        property = properties.get(Constants.PaytermDesc);
                        salesOrderBean.setPaytermDesc((String) property.getValue());
*/

//                        property = properties.get(Constants.SalesDist);
//                        salesOrderBean.setSalesDistrict((String) property.getValue());
//
//
//                        property = properties.get(Constants.SalesDistDesc);
//                        salesOrderBean.setSalesDistrictDesc((String) property.getValue());
//
//
//
//                        property = properties.get(Constants.Route);
//                        salesOrderBean.setRoute((String) property.getValue());
//
//
//                        property = properties.get(Constants.RouteDesc);
//                        salesOrderBean.setRouteDesc((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessing);
//                        salesOrderBean.setSplProcessing((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessingDesc);
//                        salesOrderBean.setSplProcessingDesc((String) property.getValue());


//                        String remarks = getSosText(Constants.SOTexts + "?$filter=" + Constants.SONo + " eq '" + SoNo + "'");
//                        salesOrderBean.setRemarks(remarks);

                        salesOrderBeanList.add(salesOrderBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        ArrayList<SalesOrderBean> soArrayList = new ArrayList<>();
        /*custom sorting start*/
        String lastDate = "";
        for (int i = 0; i < salesOrderBeanList.size(); i++) {
            SalesOrderBean soListBean = salesOrderBeanList.get(i);
            String currentDate = soListBean.getOrderDate();
            if (!currentDate.equalsIgnoreCase(lastDate)) {
                ArrayList<SalesOrderBean> tempNumberSortingList = new ArrayList<>();
                for (int j = i; j < salesOrderBeanList.size(); j++) {
                    SalesOrderBean soListBean1 = salesOrderBeanList.get(j);
                    if (soListBean1.getOrderDate().equalsIgnoreCase(currentDate)) {
                        tempNumberSortingList.add(soListBean1);
                    } else {
                        break;
                    }
                }
                Collections.sort(tempNumberSortingList, new Comparator<SalesOrderBean>() {
                    public int compare(SalesOrderBean one, SalesOrderBean other) {
                        BigInteger i1 = null;
                        BigInteger i2 = null;
                        try {
                            i1 = new BigInteger(one.getOrderNo());
                        } catch (NumberFormatException e) {
                        }

                        try {
                            i2 = new BigInteger(other.getOrderNo());
                        } catch (NumberFormatException e) {
                        }
                        if (i1 != null && i2 != null) {
                            return i2.compareTo(i1);
                        } else {
                            return other.getOrderNo().compareTo(one.getOrderNo());
                        }
                    }
                });
                soArrayList.addAll(tempNumberSortingList);
                lastDate = currentDate;
            }
        }
        /*custom sorting end*/
        return soArrayList;

    }

    public static SalesOrderItemBean getSecondarySalesOrderBean(String retailerStockQry) throws OfflineODataStoreException {

        SalesOrderItemBean salesOrderBean = null;
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderItemBean();

                        property = properties.get(Constants.SONo);
                        String SoNo = (String) property.getValue();
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.DelvStatus);
                        salesOrderBean.setDelvStatus((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");


                        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");


                        property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat(((GregorianCalendar) property.getValue()));
                        salesOrderBean.setOrderDate(convertDateFormat);


                        property = properties.get(Constants.OrderType);
                        salesOrderBean.setOrderType((String) property.getValue());

                        property = properties.get(Constants.OrderTypeDesc);
                        salesOrderBean.setOrderTypeDesc((String) property.getValue());

                        property = properties.get(Constants.SalesArea);
                        salesOrderBean.setSalesArea((String) property.getValue());

                        property = properties.get(Constants.SalesAreaDesc);
                        salesOrderBean.setSalesAreaDesc((String) property.getValue());

                        property = properties.get(Constants.CustomerNo);
                        salesOrderBean.setSoldTo((String) property.getValue());

                        property = properties.get(Constants.CustomerName);
                        salesOrderBean.setSoldToName((String) property.getValue());


                        property = properties.get(Constants.ShipToParty);
                        salesOrderBean.setShipTo((String) property.getValue());

                        property = properties.get(Constants.ShipToPartyName);
                        salesOrderBean.setShipToName((String) property.getValue());


                        property = properties.get(Constants.ShippingTypeID);
                        salesOrderBean.setShippingTypeID((String) property.getValue());

                        property = properties.get(Constants.ShippingTypeDesc);
                        salesOrderBean.setShippingTypeDesc((String) property.getValue());

//                        property = properties.get("ZZFrwadgAgentName");
//                        salesOrderBean.setForwardingAgentName((String) property.getValue());
//
//
//                        property = properties.get("ZZFrwadgAgent");
//                        salesOrderBean.setForwardingAgent((String) property.getValue());

                        property = properties.get(Constants.Plant);
                        salesOrderBean.setPlant((String) property.getValue());

                        property = properties.get(Constants.PlantDesc);
                        salesOrderBean.setPlantDesc((String) property.getValue());

                        property = properties.get(Constants.Incoterm1);
                        salesOrderBean.setIncoTerm1((String) property.getValue());

                        property = properties.get(Constants.Incoterm1Desc);
                        salesOrderBean.setIncoterm1Desc((String) property.getValue());


                        property = properties.get(Constants.Incoterm2);
                        salesOrderBean.setIncoterm2((String) property.getValue());

                        property = properties.get(Constants.Payterm);
                        salesOrderBean.setPaymentTerm((String) property.getValue());

                        property = properties.get(Constants.PaytermDesc);
                        salesOrderBean.setPaytermDesc((String) property.getValue());


//                        property = properties.get(Constants.SalesDist);
//                        salesOrderBean.setSalesDistrict((String) property.getValue());
//
//
//                        property = properties.get(Constants.SalesDistDesc);
//                        salesOrderBean.setSalesDistrictDesc((String) property.getValue());
//
//
//
//                        property = properties.get(Constants.Route);
//                        salesOrderBean.setRoute((String) property.getValue());
//
//
//                        property = properties.get(Constants.RouteDesc);
//                        salesOrderBean.setRouteDesc((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessing);
//                        salesOrderBean.setSplProcessing((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessingDesc);
//                        salesOrderBean.setSplProcessingDesc((String) property.getValue());


                        String remarks = getSosText(Constants.SOTexts + "?$filter=" + Constants.SONo + " eq '" + SoNo + "'");
                        salesOrderBean.setRemarks(remarks);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return salesOrderBean;

    }

    public static List<SalesOrderBean> getNewSecondarySalesOrderList(Context context, String retailerStockQry,
                                                                     String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.DelvStatusID);
                        salesOrderBean.setDelvStatus((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.Material);
                        salesOrderBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        salesOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.Quantity);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        property = properties.get(Constants.UOM);
                        salesOrderBean.setUom((String) property.getValue());
                        if (checkNoUOMZero(salesOrderBean.getUom()))
                            salesOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            salesOrderBean.setQAQty(qty);

                /*        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/
//
//
               /*         property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");*/

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        salesOrderBean.setOrderDate(convertDateFormat);

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + salesOrderBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        salesOrderBean.setRemarks(soTxt != null ? soTxt : "");


                        salesOrderBeanList.add(salesOrderBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return salesOrderBeanList;

    }

    public static int getDeviceCancelledSO(Context context, String mStrCustomerNo) {
        Set<String> set = new HashSet<>();
        int count = 0;
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOCancel, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                        count++;

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return count;
    }

    public static int getDeviceChangedSO(Context context, String mStrCustomerNo) {
        Set<String> set = new HashSet<>();
        int count = 0;
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                        count++;

                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return count;
    }

    /**
     * get secondary salers order from data valt
     *
     * @param context
     * @param mStrCustomerNo
     * @return
     * @throws OfflineODataStoreException
     */
    public static List<SalesOrderBean> getSoListFromDataValt(Context context, String mStrCustomerNo, boolean isFromService) throws OfflineODataStoreException {
        SalesOrderBean salesOrderBean;
        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();

        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SalesOrderDataValt, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    try {
                        deviceNo = itr.next().toString();

                            store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        LogManager.writeLogError("OfflineManager getSoListFromDataValt : "+e.toString());
                        e.printStackTrace();
                    }
                } catch (Throwable e) {
                    LogManager.writeLogError("OfflineManager getSoListFromDataValt Throwable : "+e.toString());
                    e.printStackTrace();
                }
                try {
                    if (store != null) {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && (fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo) || isFromService)) {
                            salesOrderBean = new SalesOrderBean();
                            salesOrderBean.setDeviceNo(deviceNo);
//						salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                            salesOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.SONo));
                            salesOrderBean.setOrderDate(ConstantsUtils.convertDateIntoDDMMYYYY(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate))));
                            salesOrderBean.setDelvStatus("");
                            salesOrderBean.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
//                        salesOrderBean.setNetAmount("0.00");
                            salesOrderBean.setNetAmount(fetchJsonHeaderObject.optString(Constants.NetPrice));
                            salesOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                            salesOrderBean.setOrderType(fetchJsonHeaderObject.optString(Constants.OrderType));
                            salesOrderBean.setOrderTypeDesc(fetchJsonHeaderObject.optString(Constants.OrderTypeDesc));
//                            salesOrderBean.setOrderTypeDesc(fetchJsonHeaderObject.optString(Constants.OrderTypeText));
                            salesOrderBean.setSalesArea(fetchJsonHeaderObject.optString(Constants.SalesArea));
                            salesOrderBean.setSalesAreaDesc(fetchJsonHeaderObject.optString(Constants.SalesAreaDesc));
                            salesOrderBean.setSoldTo(fetchJsonHeaderObject.optString(Constants.CustomerNo));
                            salesOrderBean.setPONo(fetchJsonHeaderObject.optString(Constants.CustomerPO));
                            if (!TextUtils.isEmpty(fetchJsonHeaderObject.optString(Constants.CustomerPODate))) {
                                salesOrderBean.setPODate(ConstantsUtils.convertDateIntoDDMMYYYY(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.CustomerPODate))));
                            }
                            salesOrderBean.setSoldToName(fetchJsonHeaderObject.optString(Constants.CustomerName));
                            salesOrderBean.setShipTo(fetchJsonHeaderObject.optString(Constants.ShipToParty));
                            salesOrderBean.setShipToName(fetchJsonHeaderObject.optString(Constants.ShipToPartyName));
                            salesOrderBean.setForwardingAgent(fetchJsonHeaderObject.optString(Constants.ZZForwarAgentCode));
                            salesOrderBean.setForwardingAgentName(fetchJsonHeaderObject.optString(Constants.ForwarAgentDesc));
                            salesOrderBean.setShippingTypeID(fetchJsonHeaderObject.optString(Constants.ShippingTypeID));
                            salesOrderBean.setShippingTypeDesc(fetchJsonHeaderObject.optString(Constants.ShippingTypeDesc));
                            salesOrderBean.setPlant(fetchJsonHeaderObject.optString(Constants.Plant));
                            salesOrderBean.setIncoTerm1(fetchJsonHeaderObject.optString(Constants.Incoterm1));
                            salesOrderBean.setIncoterm1Desc(fetchJsonHeaderObject.optString(Constants.Incoterm1Desc));
                            salesOrderBean.setIncoterm2(fetchJsonHeaderObject.optString(Constants.Incoterm2));
                            salesOrderBean.setPaymentTerm(fetchJsonHeaderObject.optString(Constants.Payterm));
                            salesOrderBean.setPaytermDesc(fetchJsonHeaderObject.optString(Constants.PaytermDesc));
                            salesOrderBean.setSalesDistrict(fetchJsonHeaderObject.optString(Constants.SalesDist));
                            salesOrderBean.setSalesDistrictDesc(fetchJsonHeaderObject.optString(Constants.SalesDistDesc));
                            salesOrderBean.setMeansOfTranstyp(fetchJsonHeaderObject.optString(Constants.MeansOfTranstyp));
                            salesOrderBean.setMeansOfTranstypDesc(fetchJsonHeaderObject.optString(Constants.MeansOfTranstypDesc));
                            salesOrderBean.setRoute(fetchJsonHeaderObject.optString(Constants.Route));
                            salesOrderBean.setRouteDesc(fetchJsonHeaderObject.optString(Constants.RouteDesc));
                            salesOrderBean.setMatFrgtGrp(fetchJsonHeaderObject.optString(Constants.MatFrgtGrp));
                            salesOrderBean.setStorLoc(fetchJsonHeaderObject.optString(Constants.StorLoc));
                            salesOrderBean.setSplProcessing(fetchJsonHeaderObject.optString(Constants.SplProcessing));
                            salesOrderBean.setSplProcessingDesc(fetchJsonHeaderObject.optString(Constants.SplProcessingDesc));
                            salesOrderBean.setRemarks(fetchJsonHeaderObject.optString(Constants.Text));
                            salesOrderBean.setSalesGroup(fetchJsonHeaderObject.optString(Constants.SalesGroup));
                            salesOrderBean.setSalesGrpDesc(fetchJsonHeaderObject.optString(Constants.SalesGrpDesc));
                            salesOrderBean.setSalesOffDesc(fetchJsonHeaderObject.optString(Constants.SalesOffDesc));
                            salesOrderBean.setSalesOffice(fetchJsonHeaderObject.optString(Constants.SalesOffice));
                            salesOrderBean.setTotalAmt(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                            salesOrderBean.setmStrTotalWeight(fetchJsonHeaderObject.optString(Constants.NetWeight));
                            salesOrderBean.setmStrWeightUOM(fetchJsonHeaderObject.optString(Constants.NetWeightUom));
                            salesOrderBean.setQAQty(fetchJsonHeaderObject.optString(Constants.TotalQuantity));
                            salesOrderBean.setmSteTotalQtyUOM(fetchJsonHeaderObject.optString(Constants.QuantityUom));
                            salesOrderBeanList.add(salesOrderBean);
                        }
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return salesOrderBeanList;

    }

    public static List<SalesOrderBean> getSoListPendingFromDataValt(Context context, String mStrCustomerNo) throws OfflineODataStoreException {
        SalesOrderBean salesOrderBean;
        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SalesOrderDataValt, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    if (store != null) {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)) {
                            salesOrderBean = new SalesOrderBean();
                            salesOrderBean.setDeviceNo(deviceNo);
//						salesOrderBean.setSSROGUID(fetchJsonHeaderObject.optString(Constants.SSSOGuid));
                            salesOrderBean.setOrderNo(fetchJsonHeaderObject.optString(Constants.SONo));
                            salesOrderBean.setOrderDate(ConstantsUtils.convertDateIntoDDMMYYYY(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.OrderDate))));
                            salesOrderBean.setDelvStatus("");
                            salesOrderBean.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
//                        salesOrderBean.setNetAmount("0.00");
                            salesOrderBean.setNetAmount(fetchJsonHeaderObject.optString(Constants.NetPrice));
                            salesOrderBean.setCurrency(fetchJsonHeaderObject.optString(Constants.Currency));
                            salesOrderBean.setOrderType(fetchJsonHeaderObject.optString(Constants.OrderType));
                            salesOrderBean.setOrderTypeDesc(fetchJsonHeaderObject.optString(Constants.OrderTypeDesc));
//                            salesOrderBean.setOrderTypeDesc(fetchJsonHeaderObject.optString(Constants.OrderTypeText));
                            salesOrderBean.setSalesArea(fetchJsonHeaderObject.optString(Constants.SalesArea));
                            salesOrderBean.setSalesAreaDesc(fetchJsonHeaderObject.optString(Constants.SalesAreaDesc));
                            salesOrderBean.setSoldTo(fetchJsonHeaderObject.optString(Constants.CustomerNo));
                            salesOrderBean.setPONo(fetchJsonHeaderObject.optString(Constants.CustomerPO));
                            if (!TextUtils.isEmpty(fetchJsonHeaderObject.optString(Constants.CustomerPODate))) {
                                salesOrderBean.setPODate(ConstantsUtils.convertDateIntoDDMMYYYY(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.optString(Constants.CustomerPODate))));
                            }
                            salesOrderBean.setSoldToName(fetchJsonHeaderObject.optString(Constants.CustomerName));
                            salesOrderBean.setShipTo(fetchJsonHeaderObject.optString(Constants.ShipToParty));
                            salesOrderBean.setShipToName(fetchJsonHeaderObject.optString(Constants.ShipToPartyName));
                            salesOrderBean.setForwardingAgent(fetchJsonHeaderObject.optString(Constants.ZZForwarAgentCode));
                            salesOrderBean.setForwardingAgentName(fetchJsonHeaderObject.optString(Constants.ForwarAgentDesc));
                            salesOrderBean.setShippingTypeID(fetchJsonHeaderObject.optString(Constants.ShippingTypeID));
                            salesOrderBean.setShippingTypeDesc(fetchJsonHeaderObject.optString(Constants.ShippingTypeDesc));
                            salesOrderBean.setPlant(fetchJsonHeaderObject.optString(Constants.Plant));
                            salesOrderBean.setIncoTerm1(fetchJsonHeaderObject.optString(Constants.Incoterm1));
                            salesOrderBean.setIncoterm1Desc(fetchJsonHeaderObject.optString(Constants.Incoterm1Desc));
                            salesOrderBean.setIncoterm2(fetchJsonHeaderObject.optString(Constants.Incoterm2));
                            salesOrderBean.setPaymentTerm(fetchJsonHeaderObject.optString(Constants.Payterm));
                            salesOrderBean.setPaytermDesc(fetchJsonHeaderObject.optString(Constants.PaytermDesc));
                            salesOrderBean.setSalesDistrict(fetchJsonHeaderObject.optString(Constants.SalesDist));
                            salesOrderBean.setSalesDistrictDesc(fetchJsonHeaderObject.optString(Constants.SalesDistDesc));
                            salesOrderBean.setMeansOfTranstyp(fetchJsonHeaderObject.optString(Constants.MeansOfTranstyp));
                            salesOrderBean.setMeansOfTranstypDesc(fetchJsonHeaderObject.optString(Constants.MeansOfTranstypDesc));
                            salesOrderBean.setRoute(fetchJsonHeaderObject.optString(Constants.Route));
                            salesOrderBean.setRouteDesc(fetchJsonHeaderObject.optString(Constants.RouteDesc));
                            salesOrderBean.setMatFrgtGrp(fetchJsonHeaderObject.optString(Constants.MatFrgtGrp));
                            salesOrderBean.setStorLoc(fetchJsonHeaderObject.optString(Constants.StorLoc));
                            salesOrderBean.setSplProcessing(fetchJsonHeaderObject.optString(Constants.SplProcessing));
                            salesOrderBean.setSplProcessingDesc(fetchJsonHeaderObject.optString(Constants.SplProcessingDesc));
                            salesOrderBean.setRemarks(fetchJsonHeaderObject.optString(Constants.Text));
                            salesOrderBean.setSalesGroup(fetchJsonHeaderObject.optString(Constants.SalesGroup));
                            salesOrderBean.setSalesGrpDesc(fetchJsonHeaderObject.optString(Constants.SalesGrpDesc));
                            salesOrderBean.setSalesOffDesc(fetchJsonHeaderObject.optString(Constants.SalesOffDesc));
                            salesOrderBean.setSalesOffice(fetchJsonHeaderObject.optString(Constants.SalesOffice));
                            salesOrderBean.setTotalAmt(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                            salesOrderBean.setmStrTotalWeight(fetchJsonHeaderObject.optString(Constants.NetWeight));
                            salesOrderBean.setmStrWeightUOM(fetchJsonHeaderObject.optString(Constants.NetWeightUom));
                            salesOrderBean.setQAQty(fetchJsonHeaderObject.optString(Constants.TotalQuantity));
                            salesOrderBean.setmSteTotalQtyUOM(fetchJsonHeaderObject.optString(Constants.QuantityUom));
                            salesOrderBeanList.add(salesOrderBean);
                        }
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return salesOrderBeanList;

    }

    public static List<SalesOrderBean> getSSSODetailsListFromDataValt(String mDeviceNo,Context context) throws OfflineODataStoreException {
        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        SalesOrderBean returnOrderBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,context);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.SalesOrderItems);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                returnOrderBean = new SalesOrderBean();

                returnOrderBean.setMaterialNo(singleRow.get(Constants.Material));
                returnOrderBean.setMaterialDesc(singleRow.get(Constants.MaterialText));
//				returnOrderBean.setOrderMaterialGroupID(singleRow.get(Constants.OrderMatGrp));
                returnOrderBean.setsItemNo(singleRow.get(Constants.ItemNo));
                returnOrderBean.setQAQty(singleRow.get(Constants.Quantity));
                returnOrderBean.setNetAmount(singleRow.get(Constants.NetAmount));
                returnOrderBean.setCurrency(singleRow.get(Constants.Currency));
                returnOrderBean.setUom(singleRow.get(Constants.UOM));
//				returnOrderBean.setOrderMaterialGroupDesc(singleRow.get(Constants.OrderMatGrpDesc));
//                returnOrderBean.setNetAmount(singleRow.get(Constants.GrossAmount));
                salesOrderBeanList.add(returnOrderBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return salesOrderBeanList;

    }

    public static boolean getSSSoListAvailabilityFromDataValt(Context context, String mStrCustomerNo) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.SalesOrderDataValt, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                            && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                        return true;
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return false;

    }


    public static List<SalesOrderBean> getSecondarySalesOrderDetailsList(String retailerStockQry) throws OfflineODataStoreException {

        List<SalesOrderBean> soDetailList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean soBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        soBean = new SalesOrderBean();


                        property = properties.get(Constants.Material);
                        soBean.setMaterialNo((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        soBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        soBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.MaterialGroup);
                        soBean.setOrderMaterialGroupID((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        soBean.setsItemNo((String) property.getValue());

                        property = properties.get(Constants.MatGroupDesc);
                        soBean.setOrderMaterialGroupDesc((String) property.getValue());

                        property = properties.get(Constants.ItemCategory);
                        soBean.setItemCat((String) property.getValue());
                        property = properties.get(Constants.ItemCatDesc);
                        soBean.setItemCatDesc((String) property.getValue());

                        property = properties.get(Constants.Quantity);

                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }

                        property = properties.get(Constants.UOM);
                        soBean.setUom((String) property.getValue());

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            soBean.setQAQty(qty);

                        property = properties.get(Constants.DelvQty);
                        String DelvQty = "0.000";
                        if (property != null) {
                            DelvQty = property.getValue().toString();
                        }

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setDelvQty(trimQtyDecimalPlace(DelvQty));
                        else
                            soBean.setDelvQty(DelvQty);

                        property = properties.get(Constants.OpenQty);
                        String OpenQty = "0.000";
                        if (property != null) {
                            OpenQty = property.getValue().toString();
                        }

                        if (checkNoUOMZero(soBean.getUom()))
                            soBean.setOpenQty(trimQtyDecimalPlace(OpenQty));
                        else
                            soBean.setOpenQty(OpenQty);

                        property = properties.get(Constants.DepotStock);
                        String DepotStock = "0.000";
                        if (property != null) {
                            DepotStock = property.getValue().toString();
                        }

                        soBean.setDepotStock(DepotStock);

                        property = properties.get(Constants.OwnStock);
                        String OwnStock = "0.000";
                        if (property != null) {
                            OwnStock = property.getValue().toString();
                        }

                        soBean.setOwnStock(OwnStock);

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        soBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.MRP);
                        BigDecimal mrpAmount = (BigDecimal) property.getValue();
                        soBean.setMRP(mrpAmount.doubleValue() + "");


                        property = properties.get(Constants.GrossAmount);
                        BigDecimal grossAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(grossAmount.doubleValue() + "");

                        property = properties.get(Constants.Tax);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        soBean.setTaxAmt(taxAmount.doubleValue() + "");

                        soBean.setTotalAmt(Double.parseDouble(netAmount.toString()) + Double.parseDouble(taxAmount.toString()) + "");

                        property = properties.get(Constants.Freight);
                        BigDecimal freightAmount = (BigDecimal) property.getValue();
                        soBean.setFreightAmt(freightAmount.doubleValue() + "");

                        property = properties.get(Constants.Discount);
                        BigDecimal discountAmount = (BigDecimal) property.getValue();
                        soBean.setDiscountAmt(discountAmount.doubleValue() + "");

                        property = properties.get(Constants.DiscountPer);
                        BigDecimal discountPer = (BigDecimal) property.getValue();
                        soBean.setDiscountPer(discountPer.doubleValue() + "");

                        property = properties.get(Constants.UnitPrice);
                        if (property != null)
                            soBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        String soNo = property.getValue().toString();
                        soBean.setOrderNo(soNo);
                        property = properties.get(Constants.Plant);
                        soBean.setPlant(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        soBean.setPlantDesc(property.getValue().toString());

                        property = properties.get(Constants.StatusID);
                        soBean.setStatusID(property.getValue().toString());
                        property = properties.get(Constants.StatusDesc);
                        soBean.setStatusDesc(property.getValue().toString());

                        property = properties.get(Constants.DelvStatusID);
                        soBean.setDelvStatus(property.getValue().toString());
                        property = properties.get(Constants.DelvStatusDesc);
                        soBean.setDelvStatusDesc(property.getValue().toString());

                        property = properties.get(Constants.StorLoc);
                        soBean.setStorLoc(property.getValue().toString());
                        property = properties.get(Constants.StorLocDesc);
                        soBean.setStorLocDesc(property.getValue().toString());

                        soDetailList.add(soBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soDetailList;

    }

    public static String getSosText(String query) throws OfflineODataStoreException {
        String temp = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Text);
                        temp = property.getValue().toString();


                    }
                }


            }
        }
        return temp;
    }

    /**
     * Returns List of today routes from offline db based on query
     *
     * @throws OfflineODataStoreException
     */
    public static ArrayList<CustomerBean> getTodayRoutes1(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> routeList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    //int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                            CustomerBean routeBean = new CustomerBean("");
                            property = properties.get(Constants.RoutSchScope);
                            routeBean.setRoutSchScope((String) property.getValue());
                            property = properties.get(Constants.RoutePlanKey);
                            routeBean.setRoutePlanKey((String) property.getValue());
                            String qryForTodaysBeat = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + RschGuid.guidAsString36().toUpperCase() + "'";
                            List<CustomerBean> listRouteNames = OfflineManager.getOtherBeatList(qryForTodaysBeat);
                            if (listRouteNames != null && listRouteNames.size() > 0) {

                                for (int i = 0; i < listRouteNames.size(); i++) {

                                    routeBean.setRouteID(listRouteNames.get(i).getRouteID());
                                    routeBean.setRouteDesc(listRouteNames.get(i).getRouteDesc());
                                    routeBean.setRschGuid(listRouteNames.get(i).getRschGuid());
                                    Constants.mSetTodayRouteSch.add(listRouteNames.get(i).getRschGuid());
                                    routeBean.setRschGuid32(listRouteNames.get(i).getRschGuid32());
                                }


                                routeList.add(routeBean);
                            }
                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }

    public static List<SOItemBean> getSOItemCheckList(String retListQry, List<SOItemBean> soItemBeanList) throws OfflineODataStoreException {
        if (offlineStore != null) {
            SOItemBean soItemBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                ODataResponseSingle response = readSingleOdataRequest(retListQry);
                if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        soItemBean = new SOItemBean();
//						property = properties.get(Constants.MatCode);
                        property = properties.get(Constants.MaterialNo);
                        soItemBean.setMatCode((String) property.getValue());
//						property = properties.get(Constants.MatDesc);
                        property = properties.get(Constants.MaterialDesc);
                        soItemBean.setMatDesc((String) property.getValue());
//						property = properties.get(Constants.Uom);
//						soItemBean.setUom((String) property.getValue());
                        soItemBeanList.add(soItemBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }

        }

        return soItemBeanList;
    }

    private static ODataResponseSingle readSingleOdataRequest(String retListQry) throws OfflineODataStoreException {
        //Define the resource path
        ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
        request.setMode(ODataRequestParamSingle.Mode.Read);
        request.setResourcePath(retListQry);
        //Send a request to read the ChannelPartners from the local database
        ODataResponseSingle response = null;
        try {
            response = (ODataResponseSingle) offlineStore.
                    executeRequest(request);
            //Check if the response is an error
            if (response.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        response.getPayload();
                throw new OfflineODataStoreException(error.getMessage());
                //Check if the response contains EntitySet
            }
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        return response;
    }

    public static String[][] getPartnerList(String query) throws OfflineODataStoreException {
        String[][] distList = null;
//		Set<String> stringSet = new HashSet<>();
//		if (offlineStore != null) {
//			ODataProperty property;
//			ODataPropMap properties;
//			List<CustomerListBean> customerListBeanList = new ArrayList<>();
//			ODataResponseSingle response = readSingleOdataRequest(query);
//			if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
//				ODataEntitySet feed = (ODataEntitySet) response.getPayload();
//				List<ODataEntity> entities = feed.getEntities();
//
//				if (entities != null && entities.size() > 0) {
//					for (ODataEntity entity : entities) {
//						properties = entity.getProperties();
//						property = properties.get(Constants.Customer);
//						String customer = (String) property.getValue();
//						if (!stringSet.contains(customer)) {
//							String parentQuery = Constants.Customers + "?$filter= CustomerNumber eq '" + customer + "'";
//							customerListBeanList = getCustomersList(parentQuery, customerListBeanList);
//
//							stringSet.add(customer);
//						}
//
//					}
//				}
//
//			}
//			if (customerListBeanList.size() > 0) {
//				distList = new String[3][customerListBeanList.size()];
//				int incVal = 0;
//				for (CustomerListBean customerListBean : customerListBeanList) {
//					distList[0][incVal] = customerListBean.getCustomerNo();
//					distList[1][incVal] = customerListBean.getCustomerName();
//					distList[2][incVal] = customerListBean.getCustomerNoName();
//					incVal++;
//				}
//			}
//
//		}
        return distList;
    }

    public static String[][] getCustomerPartnerDataFunction(String query) throws OfflineODataStoreException {
        String[][] configVal = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    int incVal = 0;
                    int entitiesSize = entities.size();


                    configVal = new String[2][entitiesSize];

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();


                        property = properties.get(Constants.PartnerCustomerNo);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.PartnerCustomerName);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;
    }

    public static String[][] getSalesAreaList(String query) throws OfflineODataStoreException {

        String[][] distList = null;
        List<String> tempList = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                int incVal = 1;
                int entitiesSize = entities.size();
                if (entitiesSize == 1) {
                    incVal = 0;
                    distList = new String[3][entitiesSize];
                } else {
                    distList = new String[3][entitiesSize + 1];
                    distList[0][0] = "";
                    distList[1][0] = Constants.None;
                    distList[2][0] = Constants.None;
                }

                if (entities != null && entities.size() > 0) {
//                    int incVal = 0;
//                    distList = new String[3][entities.size()];
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
                        property = properties.get(Constants.SalesArea);
                        String salesArea = (String) property.getValue();
                        if (!tempList.contains(salesArea)) {
                            distList[0][incVal] = (String) property.getValue();
                            property = properties.get(Constants.SalesAreaDesc);
                            distList[1][incVal] = (String) property.getValue();
                            distList[2][incVal] = (distList[1][incVal] + "-" + distList[0][incVal]).trim();
                            tempList.add(salesArea);
                            incVal++;
                        }

                    }
                }

            }
        }
        return distList;
    }

    public static String[][] getCustomerPartnerFunction(String query) throws OfflineODataStoreException {
        String[][] configVal = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if (entities.size() > 0) {
                        int incVal = 0;
                        configVal = new String[8][entities.size() + 1];
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();

                            property = properties.get(Constants.Address1);
                            configVal[0][incVal] = (String) property.getValue();
                            property = properties.get(Constants.Address2);
                            configVal[1][incVal] = (String) property.getValue();
                            property = properties.get(Constants.Address3);
                            configVal[2][incVal] = (String) property.getValue();
                            property = properties.get(Constants.Address4);
                            configVal[3][incVal] = (String) property.getValue();
                            property = properties.get(Constants.City);
                            configVal[4][incVal] = (String) property.getValue();
                            property = properties.get(Constants.RegionDesc);
                            configVal[5][incVal] = (String) property.getValue();
                            property = properties.get(Constants.CountryDesc);
                            configVal[6][incVal] = (String) property.getValue();
                            property = properties.get(Constants.PostalCode);
                            configVal[7][incVal] = (String) property.getValue();
                            incVal++;
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;
    }

    /**
     * get payment list
     *
     * @param query
     * @return
     * @throws OfflineODataStoreException
     */
    public static String[][] getPaymentList(String query) throws OfflineODataStoreException {

        String[][] distList = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        response.getPayload();
                throw new OfflineODataStoreException(error.getMessage());
                //Check if the response contains EntitySet
            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();
                int incVal = 1;
                int entitiesSize = entities.size();
                if (entitiesSize == 1) {
                    incVal = 0;
                    distList = new String[3][entitiesSize];
                } else {
                    distList = new String[3][entitiesSize + 1];
                    distList[0][0] = "";
                    distList[1][0] = Constants.None;
                    distList[2][0] = Constants.None;
                }
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
//						property = properties.get(Constants.Value);
                        property = properties.get(Constants.ID);
                        distList[0][incVal] = (String) property.getValue();
                        String value = (String) property.getValue();
                        property = properties.get(Constants.Description);
                        String desc = (String) property.getValue();
                        distList[1][incVal] = (String) property.getValue();
                        distList[2][incVal] = desc + " - " + value;
                        incVal++;
                    }
                }

            }
        }
        return distList;
    }

    public static SalesOrderConditionsBean getConditionItemDetail(ODataEntity entityCondition, ArrayList<SalesOrderConditionsBean> soConditionItemDetaiBeenList) {
        ODataProperty property;
        ODataPropMap properties;

        properties = entityCondition.getProperties();
        SalesOrderConditionsBean soConditionItemDetaiBean = null;
        soConditionItemDetaiBean = new SalesOrderConditionsBean();
        soConditionItemDetaiBean.setViewType("S");
        property = properties.get(Constants.ConditionAmount);
        if (property != null) {
            soConditionItemDetaiBean.setconditionAmount(property.getValue().toString());
        }
        property = properties.get(Constants.Name);
        if (property != null) {
            soConditionItemDetaiBean.setName(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionAmtPer);
        if (property != null) {
            soConditionItemDetaiBean.setConditionAmtPer(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionValue);
        if (property != null) {
            soConditionItemDetaiBean.setconditionValue(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionCounter);
        if (property != null) {
            soConditionItemDetaiBean.setconditionCounter(property.getValue().toString());
        }
        property = properties.get(Constants.Currency);
        if (property != null) {
            soConditionItemDetaiBean.setCurrency(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionTypeID);
        if (property != null) {
            soConditionItemDetaiBean.setconditionTypeID(property.getValue().toString());
        }
        property = properties.get(Constants.CondCurrency);
        if (property != null) {
            soConditionItemDetaiBean.setCondCurrency(property.getValue().toString());
        }

        return soConditionItemDetaiBean;
    }

    public static SalesOrderConditionsBean getConditionItemDetail(JSONObject jsonObject, ArrayList<SalesOrderConditionsBean> soConditionItemDetaiBeenList) {

        SalesOrderConditionsBean soConditionItemDetaiBean = null;

        soConditionItemDetaiBean = new SalesOrderConditionsBean();
        soConditionItemDetaiBean.setViewType("S");
        soConditionItemDetaiBean.setconditionAmount(jsonObject.optString(Constants.ConditionAmount));
        soConditionItemDetaiBean.setconditionCounter(jsonObject.optString(Constants.ConditionCounter));
        soConditionItemDetaiBean.setName(jsonObject.optString(Constants.Name));
        soConditionItemDetaiBean.setConditionAmtPer(jsonObject.optString(Constants.ConditionAmtPer));
        soConditionItemDetaiBean.setconditionValue(jsonObject.optString(Constants.ConditionValue));
        soConditionItemDetaiBean.setCurrency(jsonObject.optString(Constants.Currency));
        soConditionItemDetaiBean.setconditionTypeID(jsonObject.optString(Constants.ConditionTypeID));
        soConditionItemDetaiBean.setCondCurrency(jsonObject.optString(Constants.CondCurrency));


        return soConditionItemDetaiBean;
    }

    public static SOConditionItemDetaiBean getConditionItemDetails(JSONObject object, ArrayList<SOConditionItemDetaiBean> soConditionItemDetaiBeenList) {

        String itemNo = object.optString(Constants.ItemNo);
        SOConditionItemDetaiBean soConditionItemDetaiBean = null;
        if (!itemNo.equals("000000")) {
            soConditionItemDetaiBean = new SOConditionItemDetaiBean();
            soConditionItemDetaiBean.setViewType("S");
            if (object.optString(Constants.Amount) != null) {
//            totalNormalAmt=totalNormalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setAmount(object.optString(Constants.Amount));
            }
            soConditionItemDetaiBean.setItemNo(itemNo);
            if (object.optString(Constants.Name) != null) {
                soConditionItemDetaiBean.setName(object.optString(Constants.Name));
            }
            if (object.optString(Constants.ConditionAmtPer) != null) {
                soConditionItemDetaiBean.setConditionAmtPer(object.optString(Constants.ConditionAmtPer));
            }
            if (object.optString(Constants.ConditionValue) != null) {
//            subTotalAmt=subTotalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setConditionValue(object.optString(Constants.ConditionValue));
            }
            if (object.optString(Constants.ConditionCounter) != null) {
//            subTotalAmt=subTotalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setConditionCounter(object.optString(Constants.ConditionCounter));
            }
            if (object.optString(Constants.Currency) != null) {
                soConditionItemDetaiBean.setCurrency(object.optString(Constants.Currency));
            }
            if (object.optString(Constants.ConditionTypeID) != null) {
                soConditionItemDetaiBean.setConditionTypeID(object.optString(Constants.ConditionTypeID));
            }
            if (object.optString(Constants.CondCurrency) != null) {
                soConditionItemDetaiBean.setCondCurrency(object.optString(Constants.CondCurrency));
            }
//            soConditionItemDetaiBean = addConditionValues(soConditionItemDetaiBean, soConditionItemDetaiBeenList);
        }

        return soConditionItemDetaiBean;
    }

    public static SOConditionItemDetaiBean getConditionItemDetails(ODataEntity entityCondition, ArrayList<SOConditionItemDetaiBean> soConditionItemDetaiBeenList) {
        ODataProperty property;
        ODataPropMap properties;

        properties = entityCondition.getProperties();
        property = properties.get(Constants.ItemNo);
        String itemNo = property.getValue().toString();
        SOConditionItemDetaiBean soConditionItemDetaiBean = null;
        if (!itemNo.equals("000000")) {
            soConditionItemDetaiBean = new SOConditionItemDetaiBean();
            soConditionItemDetaiBean.setViewType("S");
            property = properties.get(Constants.Amount);
            if (property != null) {
//            totalNormalAmt=totalNormalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setAmount(property.getValue().toString());
            }
            soConditionItemDetaiBean.setItemNo(itemNo);
            property = properties.get(Constants.Name);
            if (property != null) {
                soConditionItemDetaiBean.setName(property.getValue().toString());
            }
            property = properties.get(Constants.ConditionAmtPer);
            if (property != null) {
                soConditionItemDetaiBean.setConditionAmtPer(property.getValue().toString());
            }
            property = properties.get(Constants.ConditionValue);
            if (property != null) {
//            subTotalAmt=subTotalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setConditionValue(property.getValue().toString());
            }
            property = properties.get(Constants.ConditionCounter);
            if (property != null) {
                soConditionItemDetaiBean.setConditionCounter(property.getValue().toString());
            }
            property = properties.get(Constants.Currency);
            if (property != null) {
                soConditionItemDetaiBean.setCurrency(property.getValue().toString());
            }
            property = properties.get(Constants.ConditionTypeID);
            if (property != null) {
                soConditionItemDetaiBean.setConditionTypeID(property.getValue().toString());
            }
            property = properties.get(Constants.CondCurrency);
            if (property != null) {
                soConditionItemDetaiBean.setCondCurrency(property.getValue().toString());
            }
//            soConditionItemDetaiBean = addConditionValues(soConditionItemDetaiBean, soConditionItemDetaiBeenList);
        }

        return soConditionItemDetaiBean;
    }

    public static SOConditionItemDetaiBean addConditionValues(SOConditionItemDetaiBean soConditionItemDetaiBean, ArrayList<SOConditionItemDetaiBean> soConditionItemDetaiBeenList) {
        try {
            for (SOConditionItemDetaiBean conditionItem : soConditionItemDetaiBeenList) {
//                if (conditionItem.getConditionTypeID().equalsIgnoreCase(soConditionItemDetaiBean.getConditionTypeID())) {
                if (conditionItem.getConditionCounter().equalsIgnoreCase(soConditionItemDetaiBean.getConditionCounter())) {
                    BigDecimal totalNormalAmt = new BigDecimal(conditionItem.getAmount());
                    BigDecimal subTotalAmt = new BigDecimal(conditionItem.getConditionValue());
                    conditionItem.setAmount(String.valueOf(totalNormalAmt.add(new BigDecimal(soConditionItemDetaiBean.getAmount()))));
                    conditionItem.setConditionValue(String.valueOf(subTotalAmt.add(new BigDecimal(soConditionItemDetaiBean.getConditionValue()))));
                    soConditionItemDetaiBean = null;
                    break;
                }
            }

            return soConditionItemDetaiBean;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void createExpensesingItem(HashMap<String, String> tableItem, HashMap<String, String> tableHdr, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataRequestParamSingle oDataRequestParamSingle = createExpenseImageItemEntity(tableItem, tableHdr);

            //Send the request to create the new visit in the local database

            offlineStore.scheduleRequest(oDataRequestParamSingle, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.ExpenseDocuments));


        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*create expense*/
    private static ODataRequestParamSingle createExpenseImageItemEntity(HashMap<String, String> masterItem, HashMap<String, String> hashTblItm) throws ODataParserException {
        ODataRequestParamSingle oDataRequestParamSingle = null;
        try {
            if (hashTblItm != null) {

                ODataPayload imagePayload = new ODataUploadMediaDefaultImpl(hashTblItm.get(Constants.DocumentLink), hashTblItm.get(Constants.DocumentMimeType));
                oDataRequestParamSingle = new ODataRequestParamSingleDefaultImpl();
                oDataRequestParamSingle.setPayload(imagePayload);
                oDataRequestParamSingle.setMode(Mode.Create);
                oDataRequestParamSingle.setResourcePath(Constants.ExpenseDocuments);
                oDataRequestParamSingle.setCustomTag(Constants.ExpenseItemDetails + "(guid'" + hashTblItm.get(Constants.ExpenseItemGUID) + "')/" + Constants.ExpenseDocuments + "");

                // Add headers

                Map<String, String> createHeaders = new HashMap<String, String>();

                createHeaders.put("Content-Type", hashTblItm.get(Constants.DocumentMimeType));
                createHeaders.put("SLUG", Constants.ExpenseDocumentID + ":" + hashTblItm.get(Constants.ExpenseDocumentID).replace("-", "").toUpperCase() + ","
                        + Constants.ExpenseItemGUID + ":" + hashTblItm.get(Constants.ExpenseItemGUID).replace("-", "").toUpperCase() + ","
                        + Constants.FileName + ":" + hashTblItm.get(Constants.FileName) + ","
                        + Constants.Remarks + ":" + hashTblItm.get(Constants.Remarks) + ","
                        + Constants.DocumentStore + ": A");

                oDataRequestParamSingle.getCustomHeaders().putAll(createHeaders);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataRequestParamSingle;

    }

    public static String[][] getConfigExpenseAllwance(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ConveyanceAmt);
                        BigDecimal conveyanceAmt = (BigDecimal) property.getValue();

                        if (conveyanceAmt != null) {
                            configVal[0][incVal] = conveyanceAmt.toString();
                        } else {
                            configVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.Currency);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /*expense*/
    public static String[][] getConfigExpense(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[20][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = "";
                    configVal[3][0] = Constants.None;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseType);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ExpenseTypeDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemType);
                        configVal[2][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemTypeDesc);
                        configVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseFreq);
                        configVal[4][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseFreqDesc);
                        configVal[5][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemCat);
                        configVal[6][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ExpenseItemCatDesc);
                        configVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DefaultItemCat);
                        configVal[8][incVal] = (String) property.getValue();

                        property = properties.get(Constants.DefaultItemCatDesc);
                        configVal[9][incVal] = (String) property.getValue();

                        property = properties.get(Constants.AmountCategory);
                        configVal[10][incVal] = (String) property.getValue();

                        property = properties.get(Constants.AmountCategoryDesc);
                        configVal[11][incVal] = (String) property.getValue();

                        property = properties.get(Constants.MaxAllowancePer);
                        BigDecimal maxAllowance = (BigDecimal) property.getValue();

                        if (maxAllowance != null) {
                            configVal[12][incVal] = maxAllowance.toString();
                        } else {
                            configVal[12][incVal] = "";
                        }
                        property = properties.get(Constants.ExpenseQuantityUom);
                        configVal[13][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ItemFieldSet);
                        configVal[14][incVal] = (String) property.getValue();

                        property = properties.get(Constants.ItemFieldSetDesc);
                        configVal[15][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Allowance);
                        BigDecimal allowance = (BigDecimal) property.getValue();

                        if (allowance != null) {
                            configVal[16][incVal] = allowance.toString();
                        } else {
                            configVal[16][incVal] = "";
                        }

                        property = properties.get(Constants.IsSupportDocReq);
                        configVal[17][incVal] = (String) property.getValue();

                        property = properties.get(Constants.Currency);
                        configVal[18][incVal] = (String) property.getValue();

                        property = properties.get(Constants.IsRemarksReq);
                        configVal[19][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /*expense type */
    public static String[][] getConfigExpenseType(String qry, String typeSetVal) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        String[] temp[] = null;
        HashSet<String> contentId = new HashSet<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "";
                    configVal[1][0] = Constants.None;
                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseType);
                        String expenseType = (String) property.getValue();
                        if (!contentId.contains(expenseType)) {
                            configVal[0][incVal] = expenseType;
                            property = properties.get(Constants.ExpenseTypeDesc);
                            configVal[1][incVal] = (String) property.getValue();
                            contentId.add(expenseType);
                            incVal++;
                        }
                    }
                    temp = new String[2][contentId.size() + 1];
                    temp[0][0] = "";
                    temp[1][0] = Constants.None;
                    int tempI = 1;
                    for (String stringValue : contentId) {
                        temp[0][tempI] = configVal[0][tempI];
                        temp[1][tempI] = configVal[1][tempI];
                        tempI++;
                    }
//                    if(configVal[0].c)

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return temp;

    }

    /*Returns values for helpline from offline store based on query*/
    public static String getConfigValue(String heplLineQry) throws OfflineODataStoreException {
        String mStrHelpLineNo = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(heplLineQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.TypeValue);

                        mStrHelpLineNo = (String) property.getValue();
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mStrHelpLineNo;

    }

    /*expense check data from datavalt*/
    public static boolean checkDatavaltDataisPresent(Context context, String date, String expenseTypeId) {

        boolean isDataPresent = false;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseDate).equalsIgnoreCase(date) &&
                                fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId)) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return isDataPresent;
    }

    /*expense monthly check data from datavalt*/
    public static boolean checkDatavaltMonthCompare(Context context, String date, String expenseTypeId) throws ParseException {

        boolean isDataPresent = false;
        Calendar calendar1 = Calendar.getInstance();
        Calendar calendar2 = Calendar.getInstance();

        Date date1 = Constants.convertStringToDate(date);
        calendar1.setTime(date1);
        Date date2;

        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.Expenses, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        ArrayList<HashMap<String, String>> arrtable;
                        date2 = Constants.convertStringToDate(fetchJsonHeaderObject.getString(Constants.ExpenseDate));
                        calendar2.setTime(date2);
                        int month2 = calendar2.get(Calendar.MONTH) + 1;
                        int year2 = calendar2.get(Calendar.YEAR);
                        int month1 = calendar1.get(Calendar.MONTH);
                        int year1 = calendar1.get(Calendar.YEAR);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                                && fetchJsonHeaderObject.getString(Constants.ExpenseType).equalsIgnoreCase(expenseTypeId) && month2 > month1 && year2 == year1) {
                            return true;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return isDataPresent;
    }

    /*get route for expense*/
    public static String[][] getBeatsArray(String routeSchdleQry) throws OfflineODataStoreException {
        String[] beatVal[] = null;
        //Check if the offline oData store is initialized
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, routeSchdleQry);
        if (entities != null && entities.size() > 0) {
            beatVal = new String[3][entities.size() + 1];
            beatVal[0][0] = "";
            beatVal[1][0] = Constants.None;
            beatVal[2][0] = "";
            int incVal = 1;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RoutId);
                beatVal[0][incVal] = (String) property.getValue();
                property = properties.get(Constants.Description);
                beatVal[1][incVal] = (String) property.getValue();
                property = properties.get(Constants.RouteSchGUID);
                try {
                    ODataGuid mCpGuid = (ODataGuid) property.getValue();
                    beatVal[2][incVal] = mCpGuid.guidAsString36().toUpperCase();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                incVal++;
            }
        }

        return beatVal;
    }

    /*get credit limit values*/
    public static String[] getCrediLimitValues(String creditLimitQry) throws OfflineODataStoreException {
        String[] creditLimitValues = null;
        //Check if the offline oData store is initialized
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, creditLimitQry);
        if (entities != null && entities.size() > 0) {
            creditLimitValues = new String[]{"0", "0", "0", "0", "0", "", "", ""};
            ODataEntity entity = entities.get(0);
            properties = entity.getProperties();
            property = properties.get(Constants.CreditLimit);
            creditLimitValues[0] = String.valueOf(property.getValue());
            property = properties.get(Constants.CreditExposure);
            creditLimitValues[1] = String.valueOf(property.getValue());
            property = properties.get(Constants.BalanceAmount);
            creditLimitValues[2] = String.valueOf(property.getValue());
            property = properties.get(Constants.Recievables);
            creditLimitValues[3] = String.valueOf(property.getValue());
            property = properties.get(Constants.SpecialLiabilities);
            creditLimitValues[4] = String.valueOf(property.getValue());
            property = properties.get(Constants.Currency);
            creditLimitValues[5] = String.valueOf(property.getValue());
            property = properties.get(Constants.CreditLimitUsedPerc);
            if (property != null)
                creditLimitValues[6] = (property.getValue().toString());
            else
                creditLimitValues[6] = "0";
        }

        return creditLimitValues;
    }


    /*get credit limit values*/
    public static String[][] getCreditControlValues(String creditControlQry) throws OfflineODataStoreException {
        String[][] distList = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(creditControlQry);
            if (response.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        response.getPayload();
                throw new OfflineODataStoreException(error.getMessage());
                //Check if the response contains EntitySet
            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                int entitiesSize = entities.size();
                int incVal = 0;
                distList = new String[2][entitiesSize];
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
//						property = properties.get(Constants.Value);
                        property = properties.get(Constants.CreditControlAreaID);
                        distList[0][incVal] = (String) property.getValue();
                        String value = (String) property.getValue();
                        property = properties.get(Constants.CreditControlDesc);
                        String desc = (String) property.getValue();
                      //  distList[1][incVal] = (String) property.getValue();
                        distList[1][incVal] ="Total Balance";
                        incVal++;
                    }
                } else {
                    distList = new String[2][1];
                    distList[0][0] = "0";
                    distList[1][0] = "0";
                }
            }
        }

        return distList;
    }

    public static ArrayList<ExpenseBeanJK> getExpenseListJK(String distributorStockItemsQry) throws OfflineODataStoreException {

        ArrayList<ExpenseBeanJK> expenseBeanArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ExpenseBeanJK expenseBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(distributorStockItemsQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        expenseBean = new ExpenseBeanJK();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseGUID);
                        String expenseGuid = "";
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            expenseGuid = mCpGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        expenseBean.setExpenseGuid(expenseGuid);

                        property = properties.get(Constants.ExpenseNo);
                        expenseBean.setClaimNo((String) property.getValue());

                        property = properties.get(Constants.ExpenseType);
                        expenseBean.setExpanseType((String) property.getValue());

                        property = properties.get(Constants.ExpenseTypeDesc);
                        expenseBean.setExpanseTypeDesc((String) property.getValue());

                        property = properties.get(Constants.ExpenseDate);
                        expenseBean.setRaisedDate(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.Status);
                        expenseBean.setStatus((String) property.getValue());

                        property = properties.get(Constants.StatusDesc);
                        expenseBean.setStatusDesc((String) property.getValue());

                        property = properties.get(Constants.Amount);
                        BigDecimal distItemStockVal = (BigDecimal) property.getValue();
                        expenseBean.setAmount(String.valueOf(distItemStockVal.doubleValue()));

                        property = properties.get(Constants.Currency);
                        expenseBean.setCurrency((String) property.getValue());

                        expenseBeanArrayList.add(expenseBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return expenseBeanArrayList;
    }


    public static ArrayList<ExpenseBeanJK> getExpenseListDevice(Context context) throws OfflineODataStoreException {
        ExpenseBeanJK collectionHistoryBean;
        ArrayList<ExpenseBeanJK> alCollHistory = new ArrayList<ExpenseBeanJK>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(Constants.Expenses, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.Expenses)
                            ) {
                        collectionHistoryBean = new ExpenseBeanJK();
                        collectionHistoryBean.setExpenseGuid(fetchJsonHeaderObject.getString(Constants.ExpenseGUID));
                        collectionHistoryBean.setClaimNo(fetchJsonHeaderObject.getString(Constants.ExpenseNo));
                        collectionHistoryBean.setExpanseType(fetchJsonHeaderObject.getString(Constants.ExpenseType));
                        collectionHistoryBean.setExpanseTypeDesc(fetchJsonHeaderObject.getString(Constants.ExpenseTypeDesc));
                        collectionHistoryBean.setRaisedDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.ExpenseDate)));
                        collectionHistoryBean.setStatus(fetchJsonHeaderObject.getString(Constants.Status));
                        collectionHistoryBean.setStatusDesc(fetchJsonHeaderObject.getString(Constants.StatusDesc));
                        collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                        collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));
                        // collectionHistoryBean.(fetchJsonHeaderObject.getString(Constants.ConvenyanceMode));
                        alCollHistory.add(collectionHistoryBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return alCollHistory;

    }


    public static ArrayList<DepotStockBean> getDepotStock(String distributorStockItemsQry) throws OfflineODataStoreException {

        ArrayList<DepotStockBean> expenseBeanArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            DepotStockBean depotBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(distributorStockItemsQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        depotBean = new DepotStockBean();
                        properties = entity.getProperties();
//                        property = properties.get(Constants.ExpenseGUID);
//                        String expenseGuid = "";
//                        try {
//                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
//                            expenseGuid = mCpGuid.guidAsString36().toUpperCase();
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//                        expenseBean.setExpenseGuid(expenseGuid);

                        property = properties.get(Constants.Material_No);
                        depotBean.setMatNo((String) property.getValue());

                        property = properties.get(Constants.MaterialDesc);
                        depotBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.Unrestricted);
                        BigDecimal disVal = (BigDecimal) property.getValue();
                        depotBean.setQty(String.valueOf(disVal.doubleValue()));


                        property = properties.get("StorageLocation1");
                        BigDecimal storage1Val = (BigDecimal) property.getValue();
                        depotBean.setStorage1(String.valueOf(storage1Val.doubleValue()));

                        property = properties.get("StorageLocation1ID");
                        depotBean.setStorage1Id((String) property.getValue());

                        property = properties.get("StorageLocation1Desc");
                        depotBean.setStorage1Desc((String) property.getValue());

                        property = properties.get("StorageLocation2");
                        BigDecimal storage2Val = (BigDecimal) property.getValue();
                        depotBean.setStorage2(String.valueOf(storage2Val.doubleValue()));

                        property = properties.get("StorageLocation2ID");
                        depotBean.setStorage2Id((String) property.getValue());

                        property = properties.get("StorageLocation2Desc");
                        depotBean.setStorage2Desc((String) property.getValue());

                        property = properties.get("StorageLocation3");
                        BigDecimal storage3Val = (BigDecimal) property.getValue();
                        depotBean.setStorage3(String.valueOf(storage3Val.doubleValue()));

                        property = properties.get("StorageLocation3ID");
                        depotBean.setStorage3Id((String) property.getValue());

                        property = properties.get("StorageLocation3Desc");
                        depotBean.setStorage3Desc((String) property.getValue());

                        property = properties.get("StorageLocation4");
                        BigDecimal storage4Val = (BigDecimal) property.getValue();
                        depotBean.setStorage4(String.valueOf(storage4Val.doubleValue()));

                        property = properties.get("StorageLocation4ID");
                        depotBean.setStorage4Id((String) property.getValue());

                        property = properties.get("StorageLocation4Desc");
                        depotBean.setStorage4Desc((String) property.getValue());


                        property = properties.get("StorageLocation5");
                        BigDecimal storage5Val = (BigDecimal) property.getValue();
                        depotBean.setStorage5(String.valueOf(storage5Val.doubleValue()));

                        property = properties.get("StorageLocation5ID");
                        depotBean.setStorage5Id((String) property.getValue());

                        property = properties.get("StorageLocation5Desc");
                        depotBean.setStorage5Desc((String) property.getValue());

//                        property = properties.get(Constants.ExpenseDate);
//                        depotBean.setRaisedDate(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));

                        property = properties.get(Constants.UOM);
                        depotBean.setUOM((String) property.getValue());


                        expenseBeanArrayList.add(depotBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return expenseBeanArrayList;
    }


    public static ArrayList<ExpenseBeanJK>
    getExpenseDetails(String distributorStockItemsQry) throws OfflineODataStoreException {

        ArrayList<ExpenseBeanJK> expenseBeanArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ExpenseBeanJK expenseBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(distributorStockItemsQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        expenseBean = new ExpenseBeanJK();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ExpenseItemGUID);
                        String expenseGuid = "";
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            expenseGuid = mCpGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        expenseBean.setExpenseItemGuid(expenseGuid);

                        property = properties.get(Constants.ExpeseItemNo);
                        expenseBean.setClaimNo((String) property.getValue());

                        property = properties.get(Constants.ExpenseItemType);
                        expenseBean.setExpanseType((String) property.getValue());

                        property = properties.get(Constants.ExpenseItemTypeDesc);
                        expenseBean.setExpanseTypeDesc((String) property.getValue());

                        property = properties.get(Constants.BeatGUID);
                        String beatGuid = "";
                        try {
                            ODataGuid mCpGuid = (ODataGuid) property.getValue();
                            beatGuid = mCpGuid.guidAsString36().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!beatGuid.equals("")) {

                            String query = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + beatGuid.toUpperCase() + "'";
                            expenseBean.setBeat(getBeatUsingRouteScheduleGuid(query));
                        }

                        property = properties.get(Constants.Location);
                        expenseBean.setLocation((String) property.getValue());

                        property = properties.get(Constants.ConvenyanceModeDs);
                        expenseBean.setModeOfTransportation((String) property.getValue());

                        property = properties.get(Constants.BeatDistance);
                        BigDecimal disVal = (BigDecimal) property.getValue();
                        expenseBean.setDistance(String.valueOf(disVal.doubleValue()));

                        property = properties.get(Constants.Amount);
                        BigDecimal distItemStockVal = (BigDecimal) property.getValue();
                        expenseBean.setAmount(String.valueOf(distItemStockVal.doubleValue()));

                        property = properties.get(Constants.Currency);
                        expenseBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.Remarks);
                        expenseBean.setRemarks((String) property.getValue());

                        property = properties.get(Constants.UOM);
                        expenseBean.setUOM((String) property.getValue());

                        expenseBeanArrayList.add(expenseBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return expenseBeanArrayList;
    }


    public static ArrayList<MediaLink> getExpenseDocumentMedialink(String distributorStockItemsQry, String expItemguid, String getType) throws OfflineODataStoreException {

        ArrayList<MediaLink> url_medialink = new ArrayList<MediaLink>();
        //Check if the offline oData store is initialized
        //="";
        if (offlineStore != null) {
            //  ExpenseBeanJK expenseBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(distributorStockItemsQry);
                //Send a request to read the FocusedProducts from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        MediaLink url_media = new MediaLink();
                        URL url = entity.getMediaLink();
                        url_media.setLink(url.toString());

                        property = properties.get(Constants.FileName);
                        url_media.setFilename((String) property.getValue());

                        url_media.setLink(entity.getMediaLink().toString());
                        url_medialink.add(url_media);
                     /*   if (getType.equalsIgnoreCase("ExpenseDeviceList")) {
                            url_media.setLink(Constants.getValueFromDataVault(expItemguid.toUpperCase()));
                        }*/

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return url_medialink;
    }


    public static ArrayList<ExpenseBeanJK> getExpenseDetailsDevice(Context context, String entityType, String expno) throws OfflineODataStoreException {
        ExpenseBeanJK collectionHistoryBean;
        ArrayList<ExpenseBeanJK> alCollHistory = new ArrayList<ExpenseBeanJK>();
        //Check if the offline oData store is initialized
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        set = sharedPreferences.getStringSet(entityType, null);
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(entityType)
                            ) {


                        collectionHistoryBean = new ExpenseBeanJK();
                        collectionHistoryBean.setExpenseGuid(fetchJsonHeaderObject.getString(Constants.ExpenseGUID));
                        collectionHistoryBean.setClaimNo(fetchJsonHeaderObject.getString(Constants.ExpenseNo));
                        collectionHistoryBean.setExpanseType(fetchJsonHeaderObject.getString(Constants.ExpenseType));
                        collectionHistoryBean.setExpanseTypeDesc(fetchJsonHeaderObject.getString(Constants.ExpenseTypeDesc));
                        collectionHistoryBean.setRaisedDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.ExpenseDate)));
                        collectionHistoryBean.setStatus(fetchJsonHeaderObject.getString(Constants.Status));
                        collectionHistoryBean.setStatusDesc(fetchJsonHeaderObject.getString(Constants.StatusDesc));
                        collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                        collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));


                        JSONArray fetchJsonItemarray = new JSONArray(fetchJsonHeaderObject.getString("ITEMS"));

                        for (int i = 0; i < fetchJsonItemarray.length(); i++) {

                            JSONObject obj = fetchJsonItemarray.getJSONObject(i);

                            collectionHistoryBean.setDistance(obj.getString("BeatDistance"));
                            collectionHistoryBean.setLocation(obj.getString("Location"));
                            collectionHistoryBean.setModeOfTransportation(obj.getString("ConvenyanceModeDs"));
                            collectionHistoryBean.setRemarks(obj.getString("Remarks"));

                            JSONArray mediaArray = new JSONArray(obj.getString("item_no0"));
                            ArrayList<MediaLink> medialinks = new ArrayList<MediaLink>();
                            for (int j = 0; j < mediaArray.length(); j++) {
                                // ArrayList<MediaLink> url_medialink = new ArrayList<MediaLink>();
                                // MediaLink url_media=new MediaLink();
                                JSONObject obj1 = mediaArray.getJSONObject(j);
                                collectionHistoryBean.setExpenseItemGuid(obj1.getString("ExpenseItemGUID"));
                                MediaLink link = new MediaLink();
                                link.setLink(Constants.getValueFromDataVault(obj1.getString("ExpenseItemGUID"),context));
                                medialinks.add(link);


                                // url_medialink.add(url_media);
                            }
                            collectionHistoryBean.setMedialink(medialinks);
                            if (collectionHistoryBean.getClaimNo().equalsIgnoreCase(expno)) {
                                alCollHistory.add(collectionHistoryBean);
                            }
                        }

                    /*

                        collectionHistoryBean.setExpenseGuid(fetchJsonHeaderObject.getString(Constants.ExpenseItemGUID));
                        collectionHistoryBean.setClaimNo(fetchJsonHeaderObject.getString(Constants.ExpeseItemNo));
                        collectionHistoryBean.setExpanseType(fetchJsonHeaderObject.getString(Constants.ExpenseItemType));
                        collectionHistoryBean.setExpanseTypeDesc(fetchJsonHeaderObject.getString(Constants.ExpenseItemTypeDesc));
                        collectionHistoryBean.setRaisedDate(UtilConstants.getConvetDDMMYYYYY(fetchJsonHeaderObject.getString(Constants.ExpenseDate)));

                        String beatGuid = "";
                        beatGuid=fetchJsonHeaderObject.getString(Constants.BeatGUID);
                        String query = Constants.RouteSchedules + "?$filter=" + Constants.RouteSchGUID + " eq guid'" + beatGuid.toUpperCase() + "'";
                        if (!beatGuid.equals("")) {
                            collectionHistoryBean.setBeat(getBeatUsingRouteScheduleGuid(query));
                        }
                        collectionHistoryBean.setLocation(fetchJsonHeaderObject.getString(Constants.Location));
                        collectionHistoryBean.setModeOfTransportation(fetchJsonHeaderObject.getString(Constants.ConvenyanceModeDs));
                        collectionHistoryBean.setDistance(fetchJsonHeaderObject.getString(Constants.BeatDistance));
                        collectionHistoryBean.setCurrency(fetchJsonHeaderObject.getString(Constants.Currency));

                        collectionHistoryBean.setAmount(fetchJsonHeaderObject.getString(Constants.Amount));
                        collectionHistoryBean.setRemarks(fetchJsonHeaderObject.getString(Constants.REMARKS));
                         collectionHistoryBean.setUOM(fetchJsonHeaderObject.getString(Constants.UOM));*/


                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
        return alCollHistory;

    }


    public static ArrayList<ConfigTypesetTypesBean> getConfigTypesetTypes(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        configTypesetTypesBean = new ConfigTypesetTypesBean();
        configTypesetTypesBean.setTypes("");
        configTypesetTypesBean.setTypesName(Constants.All);
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<ConfigTypesetTypesBean> getConfigTypesetTypes(String query, String defaultValue) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        if (!TextUtils.isEmpty(defaultValue)) {
            configTypesetTypesBean = new ConfigTypesetTypesBean();
            configTypesetTypesBean.setTypes("");
            configTypesetTypesBean.setTypesName(defaultValue);
            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        }
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    /**
     * returns Configurations from value help(Drop down values/statusType values)
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getConfigTysetTypesValues(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.TypesName);
                        configVal[1][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }


    public static void CancelSO(String HeaderQry, String ItemQry, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = getHeaderEntity(HeaderQry);
            newEntity.setResourcePath(newEntity.getResourcePath(), newEntity.getResourcePath());
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.SOs), null);

            //Items
            List<ODataEntity> itemEntities = getItemEntities(ItemQry);
            for (ODataEntity itemEntity : itemEntities) {
                itemEntity.setResourcePath(itemEntity.getResourcePath(), itemEntity.getResourcePath());
                itemEntity.getProperties().put(Constants.RejReason,
                        new ODataPropertyDefaultImpl(Constants.RejReason, "02"));
                itemEntity.getProperties().put(Constants.RejReasonDesc,
                        new ODataPropertyDefaultImpl(Constants.RejReasonDesc, "Poor quality"));
                offlineStore.scheduleUpdateEntity(itemEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.SOItemDetails), null);
            }

        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }


    public static ODataEntity getHeaderEntity(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ODataEntity soHeaderEntity = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    soHeaderEntity = entities.get(0);

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soHeaderEntity;
    }

    public static List<ODataEntity> getItemEntities(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        List<ODataEntity> soItemEntities = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    soItemEntities = entities;

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soItemEntities;
    }

    /**
     * returns Visit status for retailer from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static int getCount(String strQry) throws OfflineODataStoreException {

        int count = 0;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            try {
                //Define the resource path
                String resourcePath = strQry;
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the Retailer details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineGeo.
                        executeRequest(request);

                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    count = entities.size();
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return count;

    }

    /**
     * get secondary sales order list
     *
     * @param retailerStockQry
     * @return
     * @throws OfflineODataStoreException
     */
    public static SalesOrderBean getSalesOrder(String retailerStockQry) throws OfflineODataStoreException {

        SalesOrderBean soBean = new SalesOrderBean();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        soBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        soBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.LoginID);
                        soBean.setLoginID((String) property.getValue());

//                        property = properties.get(Constants.DelvStatus);
//                        soBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        soBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        soBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(totalAmount.doubleValue() + "");

                        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        soBean.setTotalAmt(taxAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        soBean.setOrderDate(convertDateFormat);

                        property = properties.get(Constants.CustomerPODate);
                        if (property != null) {
                            try {
                                String PODate = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                                soBean.setPODate(PODate);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        property = properties.get(Constants.ShippingTypeDesc);
                        soBean.setShippingTypeDesc((String) property.getValue());
                        property = properties.get(Constants.ShippingTypeID);
                        soBean.setShippingPoint((String) property.getValue());
                        property = properties.get(Constants.ShipToParty);
                        soBean.setShipTo((String) property.getValue());
                        property = properties.get(Constants.ShipToPartyName);
                        soBean.setShipToName((String) property.getValue());
                        property = properties.get(Constants.Payterm);
                        soBean.setPaymentTerm((String) property.getValue());
                        property = properties.get(Constants.PaytermDesc);
                        soBean.setPaymentTermDesc((String) property.getValue());
                        property = properties.get(Constants.Incoterm2);
                        soBean.setIncoterm2((String) property.getValue());
                        property = properties.get(Constants.Incoterm1);
                        soBean.setIncoTerm1((String) property.getValue());
                        property = properties.get(Constants.Incoterm1Desc);
                        soBean.setIncoterm1Desc((String) property.getValue());
                        property = properties.get(Constants.Incoterm2);
                        soBean.setIncoterm2((String) property.getValue());
                        property = properties.get(Constants.Plant);
                        soBean.setPlant((String) property.getValue());
                        property = properties.get(Constants.PlantDesc);
                        soBean.setPlantDesc((String) property.getValue());
                        property = properties.get(Constants.CustomerNo);
                        soBean.setSoldTo((String) property.getValue());
                        property = properties.get(Constants.CustomerName);
                        soBean.setSoldToName((String) property.getValue());
                        property = properties.get(Constants.SalesAreaDesc);
                        if (property != null) {
                            soBean.setSalesAreaDesc((String) property.getValue());
                        }
                        property = properties.get(Constants.SalesArea);
                        if (property != null) {
                            soBean.setSalesArea((String) property.getValue());
                        }
                        property = properties.get(Constants.CustomerPO);
                        soBean.setPONo((String) property.getValue());
                        property = properties.get(Constants.SalesOffice);
                        soBean.setSalesOfficeId(property.getValue().toString());
                        property = properties.get(Constants.SaleOffDesc);
                        soBean.setSaleOffDesc(property.getValue().toString());

                        property = properties.get(Constants.OrderType);
                        soBean.setOrderType((String) property.getValue());
                        property = properties.get(Constants.OrderTypeDesc);
                        soBean.setOrderTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Status);
                        soBean.setStatusID((String) property.getValue());
                        property = properties.get(Constants.StatusDesc);
                        soBean.setStatusDesc((String) property.getValue());
                        property = properties.get(Constants.DelvStatus);
                        soBean.setDelvStatus((String) property.getValue());
                        property = properties.get(Constants.DelvStatusDesc);
                        soBean.setDelvStatusDesc((String) property.getValue());

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + soBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        soBean.setRemarks(soTxt != null ? soTxt : "");
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return soBean;

    }

    public static boolean checkNoUOMZero(String UOM) throws OfflineODataStoreException {
        boolean isNoUOMZero = false;
        String qry = Constants.ConfigTypesetTypes + "?$filter=" + Constants.Typeset + " eq '" + Constants.UOMNO0 + "' and " +
                Constants.Types + " eq '" + UOM + "'";

        if (UOM != null && !UOM.equalsIgnoreCase("")) {
            if (offlineStore != null) {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null && entities.size() > 0) {
                    isNoUOMZero = true;
                }

            }
        }
        return isNoUOMZero;
    }


    public static String trimQtyDecimalPlace(String qty) {
        try {
            if (qty.contains("."))
                return qty.substring(0, qty.indexOf("."));
            else
                return qty;
        } catch (Exception e) {
            e.printStackTrace();
            return qty;
        }
    }


    public static ArrayList<CustomerBean> getBehavoiurList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());

                        property = properties.get(Constants.CPName);
                        retBean.setRetailerName((String) property.getValue());

                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.TownDesc);
                        retBean.setTownDesc((String) property.getValue());
                        property = properties.get(Constants.CPMobileNo);
                        retBean.setMobileNumber((String) property.getValue());

                        property = properties.get(Constants.PurchaseAmount);
                        if (property != null) {
                            BigDecimal mStrQty = (BigDecimal) property.getValue();
                            retBean.setPurchaseAmount(mStrQty.toString());
                        }

                        property = properties.get(Constants.UOM);
                        retBean.setUOM(property.getValue().toString());


                        property = properties.get(Constants.SequenceNo);
                        if (property != null)
                            retBean.setSequenceNo(property.getValue().toString());

                        property = properties.get(Constants.Currency);
                        if (property != null)
                            retBean.setCurrency(property.getValue().toString());

                        property = properties.get(Constants.DistrictID);
                        if (property != null)
                            retBean.setDistrict(property.getValue().toString());

                        property = properties.get(Constants.PostalCode);
                        if (property != null)
                            retBean.setPostalCode(property.getValue().toString());

                        retBean.setNameNumber(retBean.getCustomerId() + retBean.getRetailerName());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
       /* Collections.sort(retailerList, new Comparator<CustomerBean>() {
            public int compare(CustomerBean one, CustomerBean other) {
                return one.getSequenceNo().compareTo(other.getSequenceNo());
            }
        });*/
        return retailerList;

    }

    /*Returns list of feedback from offline store*/
    @SuppressLint("NewApi")
    public static ArrayList<FeedbackBean> getDeviceFeedBackList(Context context, String mStrCPGUID) throws OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            try {
                Set<String> set = new HashSet<>();
                SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
                set = sharedPreferences.getStringSet(Constants.FeedbackList, null);
                if (set != null && !set.isEmpty()) {
                    Iterator itr = set.iterator();
                    while (itr.hasNext()) {
                        String store = null, deviceNo = "";
                        try {
                            deviceNo = itr.next().toString();
                            store = ConstantsUtils.getFromDataVault(deviceNo,context);
                        } catch (Throwable e) {
                            e.printStackTrace();
                        }
                        try {
                            JSONObject fetchJsonHeaderObject = new JSONObject(store);
                            if (fetchJsonHeaderObject.getString(Constants.entityType).equalsIgnoreCase(Constants.Feedback)
                                    && fetchJsonHeaderObject.getString(Constants.CPGUID).equalsIgnoreCase(mStrCPGUID)) {
                                feedBackBean = new FeedbackBean();
                                feedBackBean.setDeviceStatus("X");
                                feedBackBean.setDeviceNo(deviceNo);
                                feedBackBean.setFeedbackNo(fetchJsonHeaderObject.getString(Constants.FeedbackNo) != null
                                        ? fetchJsonHeaderObject.getString(Constants.FeedbackNo) : "");

                                feedBackBean.setFeedbackType(fetchJsonHeaderObject.getString(Constants.FeedbackType));
                                feedBackBean.setFeedbackTypeDesc(fetchJsonHeaderObject.getString(Constants.FeedbackTypeDesc));
                                feedBackBean.setBTSID(fetchJsonHeaderObject.getString(Constants.BTSID));
                                feedBackBean.setLocation1(fetchJsonHeaderObject.getString(Constants.Location1));
                                feedBackBean.setFeebackGUID(fetchJsonHeaderObject.getString(Constants.FeebackGUID));
                                feedBackBean.setRemarks(fetchJsonHeaderObject.getString(Constants.Remarks));
                                alFeedback.add(feedBackBean);
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }

            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    /*Returns list of feedback from offline store*/
    @SuppressLint("NewApi")
    public static ArrayList<FeedbackBean> getFeedBackList(String feedbackListQry) throws OfflineODataStoreException {

        ArrayList<FeedbackBean> alFeedback = new ArrayList<FeedbackBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            FeedbackBean feedBackBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(feedbackListQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        feedBackBean = new FeedbackBean();
                        property = properties.get(Constants.FeebackGUID);
                        try {
                            ODataGuid mFeedbackGuid = (ODataGuid) property.getValue();
                            feedBackBean.setFeebackGUID(mFeedbackGuid.guidAsString36());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.FeedbackNo);
                        feedBackBean.setFeedbackNo((String) property.getValue());

                        property = properties.get(Constants.FeedbackType);
                        feedBackBean.setFeedbackType((String) property.getValue());

                        property = properties.get(Constants.FeedbackTypeDesc);
                        feedBackBean.setFeedbackTypeDesc((String) property.getValue());

                        property = properties.get(Constants.Remarks);
                        feedBackBean.setRemarks((String) property.getValue());

//						property = properties.get(Constants.Material_Desc);
//						retailerStockBean.setMaterialDesc((String) property.getValue());
//						property = properties.get(Constants.UnrestrictedQty);
//						if(property!=null){
//							BigDecimal mStrQty = (BigDecimal) property.getValue();
//							retailerStockBean.setQAQty(mStrQty.toString());
//						}
//						property = properties.get(Constants.StockValue);
//						if(property!=null){
//							BigDecimal mStrAmount = (BigDecimal) property.getValue();
//							retailerStockBean.setStockValue(mStrAmount.toString());
//						}
//
//						property = properties.get(Constants.Currency);
//						retailerStockBean.setCurrency((String) property.getValue());
//						property = properties.get(Constants.UOM);
//						retailerStockBean.setUom((String) property.getValue());
//
//						retailerStockList.add(retailerStockBean);
//						feedBackBean.setFeedbackType(fetchJsonHeaderObject.getString(Constants.FeedbackType));
//						feedBackBean.setFeedbackTypeDesc(fetchJsonHeaderObject.getString(Constants.FeedbackTypeDesc));
//						feedBackBean.setBTSID(fetchJsonHeaderObject.getString(Constants.BTSID));
//						feedBackBean.setLocation1(fetchJsonHeaderObject.getString(Constants.Location1));
//						feedBackBean.setFeebackGUID(fetchJsonHeaderObject.getString(Constants.FeebackGUID));
//						feedBackBean.setRemarks(fetchJsonHeaderObject.getString(Constants.Remarks));
                        alFeedback.add(feedBackBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected
                            + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return alFeedback;

    }

    public static String[][] getStockOwnerGroups(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    configVal = new String[2][entities.size() + 1];
                    configVal[0][0] = "None";
                    configVal[1][0] = "None";

                    int incVal = 1;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.MaterialNo);
                        configVal[0][incVal] = (String) property.getValue();
                        property = properties.get(Constants.MaterialDesc);
                        configVal[1][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configVal;

    }

    /**
     * CreateOperation a new entity in the local database
     *
     * @param uiListener the activity that will receive the response to notify the user
     * @throws OfflineODataStoreException
     */
    public static void createCustomerComplaints(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createComplaintsEntity(table);
            //Send the request to create the new attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Complaints,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Complaints),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END

    }

    /*create complaints entity*/
    private static ODataEntity createComplaintsEntity(Hashtable<String, String> hashTable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashTable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + "" + Constants.ComplaintEntity);

//                newEntity.getProperties().put(Constants.ComplaintGUID,
//                        new ODataPropertyDefaultImpl(Constants.ComplaintGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.ComplaintGUID))));

                newEntity.getProperties().put(Constants.ComplaintNo,
                        new ODataPropertyDefaultImpl(Constants.ComplaintNo, hashTable.get(Constants.ComplaintNo)));

                newEntity.getProperties().put(Constants.ComplaintCategoryID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintCategoryID, hashTable.get(Constants.ComplaintCategoryID)));

                newEntity.getProperties().put(Constants.ComplainCategoryDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplainCategoryDesc, hashTable.get(Constants.ComplainCategoryDesc)));

                newEntity.getProperties().put(Constants.ComplaintTypeID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeID, hashTable.get(Constants.ComplaintTypeID)));

                newEntity.getProperties().put(Constants.ComplaintTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintTypeDesc, hashTable.get(Constants.ComplaintTypeDesc)));

                newEntity.getProperties().put(Constants.ComplaintPriorityID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityID, hashTable.get(Constants.ComplaintPriorityID)));

                newEntity.getProperties().put(Constants.ComplaintPriorityDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintPriorityDesc, hashTable.get(Constants.ComplaintPriorityDesc)));
                if (hashTable.get(Constants.SPGUID) != null && !TextUtils.isEmpty(hashTable.get(Constants.SPGUID))) {
                    newEntity.getProperties().put(Constants.SPGUID,
                            new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashTable.get(Constants.SPGUID))));
                }
                newEntity.getProperties().put(Constants.SPNo,
                        new ODataPropertyDefaultImpl(Constants.SPNo, hashTable.get(Constants.SPNo)));

                newEntity.getProperties().put(Constants.SPName,
                        new ODataPropertyDefaultImpl(Constants.SPName, hashTable.get(Constants.SPName)));

                newEntity.getProperties().put(Constants.CPTypeID,
                        new ODataPropertyDefaultImpl(Constants.CPTypeID, hashTable.get(Constants.CPTypeID)));

                newEntity.getProperties().put(Constants.CPTypeDesc,
                        new ODataPropertyDefaultImpl(Constants.CPTypeDesc, hashTable.get(Constants.CPTypeDesc)));

                newEntity.getProperties().put(Constants.CPGUID,
                        new ODataPropertyDefaultImpl(Constants.CPGUID, hashTable.get(Constants.CPGUID)));

                newEntity.getProperties().put(Constants.CPNo,
                        new ODataPropertyDefaultImpl(Constants.CPNo, hashTable.get(Constants.CPNo)));

                newEntity.getProperties().put(Constants.CPName,
                        new ODataPropertyDefaultImpl(Constants.CPName, hashTable.get(Constants.CPName)));

                newEntity.getProperties().put(Constants.Batch,
                        new ODataPropertyDefaultImpl(Constants.Batch, hashTable.get(Constants.Batch)));

                if (!hashTable.get(Constants.MFD).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.MFD,
                            new ODataPropertyDefaultImpl(Constants.MFD, UtilConstants.convertDateFormat(hashTable.get(Constants.MFD))));
                }

                newEntity.getProperties().put(Constants.OrderMaterialGroupID,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupID, hashTable.get(Constants.OrderMaterialGroupID)));

                newEntity.getProperties().put(Constants.OrderMaterialGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.OrderMaterialGroupDesc, hashTable.get(Constants.OrderMaterialGroupDesc)));

                newEntity.getProperties().put(Constants.MaterialGrp,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrp, hashTable.get(Constants.MaterialGrp)));

                newEntity.getProperties().put(Constants.MaterialGrpDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialGrpDesc, hashTable.get(Constants.MaterialGrpDesc)));

                newEntity.getProperties().put(Constants.Material,
                        new ODataPropertyDefaultImpl(Constants.Material, hashTable.get(Constants.Material)));

                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashTable.get(Constants.MaterialDesc)));

                newEntity.getProperties().put(Constants.ComplaintDate,
                        new ODataPropertyDefaultImpl(Constants.ComplaintDate, UtilConstants.convertDateFormat(hashTable.get(Constants.ComplaintDate))));

                newEntity.getProperties().put(Constants.ComplaintStatusID,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusID, hashTable.get(Constants.ComplaintStatusID)));

                newEntity.getProperties().put(Constants.ComplaintStatusDesc,
                        new ODataPropertyDefaultImpl(Constants.ComplaintStatusDesc, hashTable.get(Constants.ComplaintStatusDesc)));
                if (!hashTable.get(Constants.Quantity).equalsIgnoreCase("")) {
                    newEntity.getProperties().put(Constants.Quantity,
                            new ODataPropertyDefaultImpl(Constants.Quantity, BigDecimal.valueOf(Double.parseDouble(hashTable.get(Constants.Quantity)))));
                }
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashTable.get(Constants.UOM)));

                newEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashTable.get(Constants.Remarks)));

                newEntity.getProperties().put(Constants.CreatedBy,
                        new ODataPropertyDefaultImpl(Constants.CreatedBy, hashTable.get(Constants.CreatedBy)));

                newEntity.setResourcePath(hashTable.get(Constants.SetResourcePath), hashTable.get(Constants.SetResourcePath));

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /**
     * returns List of CPDMSDivision from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getSPValuesByCPGUIDAndDMSDivision(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[12][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        try {
                            property = properties.get(Constants.CPTypeDesc);
                            distVal[0][incVal] = (String) property.getValue();
                        } catch (Exception e) {
                            distVal[0][incVal] = "";
                        }
                        property = properties.get(Constants.ParentID);
                        distVal[1][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentName);
                        distVal[2][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypeID);
                        distVal[3][incVal] = (String) property.getValue();

                        property = properties.get(Constants.PartnerMgrGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            distVal[4][incVal] = mInvoiceGUID.guidAsString36().toUpperCase();
                            distVal[5][incVal] = mInvoiceGUID.guidAsString32().toUpperCase();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        property = properties.get(Constants.PartnerMgrNo);
                        distVal[6][incVal] = (String) property.getValue();
                        property = properties.get(Constants.PartnerMgrName);
                        distVal[7][incVal] = (String) property.getValue();

                        property = properties.get(Constants.CPTypeID);
                        distVal[9][incVal] = (String) property.getValue();
                        property = properties.get(Constants.Currency);
                        distVal[10][incVal] = (String) property.getValue();
                        property = properties.get(Constants.ParentTypDesc);
                        distVal[11][incVal] = (String) property.getValue();

                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    /*Complaint list*/
    public static ArrayList<ComplaintBean> getComplaintList(String qry) throws OfflineODataStoreException {
        //Check if the offline oData store is initialized
        ArrayList<ComplaintBean> complaintBeanArrayList = new ArrayList<>();
        ComplaintBean complaintBean;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        complaintBean = new ComplaintBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ComplaintNo);
                        complaintBean.setComplaintId(property.getValue().toString());
                        property = properties.get(Constants.ComplainCategoryDesc);
                        complaintBean.setComplaintCategory(property.getValue().toString());
                        property = properties.get(Constants.ComplaintTypeDesc);
                        complaintBean.setComplaint(property.getValue().toString());
                        property = properties.get(Constants.Batch);
                        complaintBean.setBatchNo(property.getValue().toString());
                        property = properties.get(Constants.MFD);
                        if (property != null) {
                            complaintBean.setMdf(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                        }
                        property = properties.get(Constants.MaterialDesc);
                        complaintBean.setMatDescription(property.getValue().toString());
                        property = properties.get(Constants.Quantity);
                        if (property != null) {
                            try {
                                complaintBean.setQuantity(property.getValue().toString());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        property = properties.get(Constants.UOM);
                        complaintBean.setUom(property.getValue().toString());
                        property = properties.get(Constants.Remarks);
                        complaintBean.setRemarks(property.getValue().toString());

                        complaintBeanArrayList.add(complaintBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return complaintBeanArrayList;

    }


    public static List<ForwardingAgentBean> getForwardAgents(String query, List<ForwardingAgentBean> forwardListBeanList) throws OfflineODataStoreException {


        ForwardingAgentBean tempstoList;

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new ForwardingAgentBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ForwarAgentCode);
                        tempstoList.setForAgentCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.ForwarAgentDesc);
                        tempstoList.setForAgentDesc(property.getValue().toString());

                        forwardListBeanList.add(tempstoList);


                    }
                }


            }
        }
        return forwardListBeanList;
    }


    /**
     * get ship points
     *
     * @param query
     * @return
     * @throws OfflineODataStoreException
     */
    public static String[][] getShipPointList(String query) throws OfflineODataStoreException {

        String[][] distList = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                int incVal = 1;
                int entitiesSize = entities.size();
                if (entitiesSize == 1) {
                    incVal = 0;
                    distList = new String[3][entitiesSize];
                } else {
                    distList = new String[3][entitiesSize + 1];
                    distList[0][0] = "";
                    distList[1][0] = Constants.None;
                    distList[2][0] = Constants.None;
                }

                if (entities != null && entities.size() > 0) {
//                    int incVal = 0;
//                    distList = new String[3][entities.size()];
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        distList[0][incVal] = (String) property.getValue();
                        String shipPoints = (String) property.getValue();
                        property = properties.get(Constants.Description);
                        String shipPointDesc = (String) property.getValue();
                        distList[1][incVal] = (String) property.getValue();
                        distList[2][incVal] = shipPointDesc + " - " + shipPoints;
                        incVal++;
                    }
                }

            }
        }
        return distList;
    }

    public static String[][] getDefaultSalesDistrictList(String query) throws OfflineODataStoreException {

        String[][] distList = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;
                    distList = new String[3][entities.size()];
                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
                        property = properties.get(Constants.SalesDistrictCode);
                        distList[0][incVal] = (String) property.getValue();
                        String inco1 = (String) property.getValue();
                        property = properties.get(Constants.SalesDistrictDesc);
                        String inco2 = (String) property.getValue();
                        distList[1][incVal] = (String) property.getValue();
                        distList[2][incVal] = inco2 + " - " + inco1;
                        incVal++;
                    }
                }

            }
        }
        return distList;
    }


    public static ArrayList<ProcessingField> getProcessingFieldList(String query) throws OfflineODataStoreException {


        ProcessingField tempstoList;
        ArrayList<ProcessingField> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new ProcessingField();
                        properties = entity.getProperties();
                        property = properties.get(Constants.processFieldId);
                        tempstoList.setProcessingFieldCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.processFieldDesc);
                        tempstoList.setProcessingFieldDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static ArrayList<SaleDistrictBean> getSalesDistList(String query) throws OfflineODataStoreException {


        SaleDistrictBean tempstoList;
        ArrayList<SaleDistrictBean> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new SaleDistrictBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setSaleDistCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setSalesDistDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static ArrayList<RouteBean> getRouteSearchList(String query) throws OfflineODataStoreException {


        RouteBean tempstoList;
        ArrayList<RouteBean> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new RouteBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setRouteId(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setRouteDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static ArrayList<StorageLocBean> getPlantBasedStorageLocList(String query) throws OfflineODataStoreException {


        StorageLocBean tempstoList;
        ArrayList<StorageLocBean> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new StorageLocBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setStoLocCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setStoLocDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static ArrayList<MaterialFright> getMatFright(String query) throws OfflineODataStoreException {


        MaterialFright tempstoList;
        ArrayList<MaterialFright> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new MaterialFright();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setMatFrightCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setMatFrightDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static ArrayList<MeansOfTransport> getMeansOftrans(String query) throws OfflineODataStoreException {


        MeansOfTransport tempstoList;
        ArrayList<MeansOfTransport> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new MeansOfTransport();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        tempstoList.setTransportId(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.Description);
                        tempstoList.setTransportDesc(property.getValue().toString());

                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }


    public static HashMap<String, OutstandingAgeBean> getOutstandingInvoiceList(String query) throws OfflineODataStoreException {


        OutstandingAgeBean tempstoList;
        OutstandingAgeBean tempstoList2;
        OutstandingAgeBean tempstoList3;
        Double sum31_60 = 0.00, sumPast = 0.00, sumCurrent = 0.00, sum61_90 = 0.00, sum91_120 = 0.00, sum120 = 0.00;
        ArrayList<OutstandingAgeBean> temp = new ArrayList<>();
        HashMap<String, OutstandingAgeBean> mapOutBean = new HashMap<>();

        BigDecimal bucket1 = new BigDecimal(0);
        BigDecimal bucket2 = new BigDecimal(0);
        BigDecimal bucket3 = new BigDecimal(0);
        BigDecimal bucket4 = new BigDecimal(0);
        BigDecimal bucket5 = new BigDecimal(0);
        BigDecimal bucket6 = new BigDecimal(0);
        BigDecimal bucket7 = new BigDecimal(0);
        BigDecimal bucket8 = new BigDecimal(0);
        BigDecimal bucket9 = new BigDecimal(0);
        BigDecimal bucket10 = new BigDecimal(0);


        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {

                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        String custNo = property.getValue().toString();
                        if (mapOutBean.containsKey(custNo)) {
                            tempstoList = mapOutBean.get(custNo);
                        } else {
                            tempstoList = new OutstandingAgeBean();
                            tempstoList.setCustomerNo(property.getValue().toString());
                        }


                        property = properties.get(Constants.Bucket1);
                        bucket1 = (BigDecimal) property.getValue();


                        property = properties.get(Constants.Bucket2);
                        bucket2 = (BigDecimal) property.getValue();


                        property = properties.get(Constants.Bucket3);
                        bucket3 = (BigDecimal) property.getValue();


                        property = properties.get(Constants.Bucket4);
                        bucket4 = (BigDecimal) property.getValue();

                        property = properties.get(Constants.Bucket5);
                        bucket5 = (BigDecimal) property.getValue();


                        property = properties.get(Constants.Bucket6);
                        bucket6 = (BigDecimal) property.getValue();

                        property = properties.get(Constants.Bucket7);
                        bucket7 = (BigDecimal) property.getValue();

                        property = properties.get(Constants.Bucket8);
                        bucket8 = (BigDecimal) property.getValue();

                        property = properties.get(Constants.Bucket9);
                        bucket9 = (BigDecimal) property.getValue();

                        property = properties.get(Constants.Bucket10);
                        bucket10 = (BigDecimal) property.getValue();

                        if (mapOutBean.containsKey(custNo)) {

                            BigDecimal Bucket1 = new BigDecimal(tempstoList.getBucket1()).add(bucket1);
                            BigDecimal Bucket2 = new BigDecimal(tempstoList.getBucket2()).add(bucket2);
                            BigDecimal Bucket3 = new BigDecimal(tempstoList.getBucket3()).add(bucket3);
                            BigDecimal Bucket4 = new BigDecimal(tempstoList.getBucket4()).add(bucket4);
                            BigDecimal Bucket5 = new BigDecimal(tempstoList.getBucket5()).add(bucket5);
                            BigDecimal Bucket6 = new BigDecimal(tempstoList.getBucket6()).add(bucket6);
                            BigDecimal Bucket7 = new BigDecimal(tempstoList.getBucket7()).add(bucket7);
                            BigDecimal Bucket8 = new BigDecimal(tempstoList.getBucket8()).add(bucket8);
                            BigDecimal Bucket9 = new BigDecimal(tempstoList.getBucket9()).add(bucket9);
                            BigDecimal Bucket10 = new BigDecimal(tempstoList.getBucket10()).add(bucket10);


                            tempstoList.setBucket1(String.valueOf(Bucket1));
                            tempstoList.setBucket2(String.valueOf(Bucket2));
                            tempstoList.setBucket3(String.valueOf(Bucket3));
                            tempstoList.setBucket4(String.valueOf(Bucket4));
                            tempstoList.setBucket5(String.valueOf(Bucket5));
                            tempstoList.setBucket6(String.valueOf(Bucket6));
                            tempstoList.setBucket7(String.valueOf(Bucket7));
                            tempstoList.setBucket8(String.valueOf(Bucket8));
                            tempstoList.setBucket9(String.valueOf(Bucket9));
                            tempstoList.setBucket10(String.valueOf(Bucket10));


                            mapOutBean.put(custNo, tempstoList);


                        } else {

                            property = properties.get(Constants.CustomerName);
                            tempstoList.setCustomerName(property.getValue().toString());

                            String city = getCity(Constants.Customers + "?$filter=" + Constants.CustomerNo + " eq '" +
                                    custNo + "'");
                            tempstoList.setCityName(city);


                            ArrayList<OutstandingAgeBean> temp3 = new ArrayList<>();
                            temp3 = getOutstandingInvoiceValues(Constants.CustomerCreditLimits + "?$filter=" + Constants.Customer + " eq '" +
                                    custNo + "'");


                            if (!temp3.isEmpty()) {
                                tempstoList3 = temp3.get(0);

                                tempstoList.setSecurityDeposit(tempstoList3.getSecurityDeposit());
                                tempstoList.setCreditLimit(tempstoList3.getCreditLimit());
                                tempstoList.setTotalDebitBal(tempstoList3.getTotalDebitBal());
                                tempstoList.setDistChannel(tempstoList3.getDistChannel());
                            }


                            tempstoList.setBucket1(bucket1.toString());
                            tempstoList.setBucket2(bucket2.toString());
                            tempstoList.setBucket3(bucket3.toString());
                            tempstoList.setBucket4(bucket4.toString());
                            tempstoList.setBucket5(bucket5.toString());
                            tempstoList.setBucket6(bucket6.toString());
                            tempstoList.setBucket7(bucket7.toString());
                            tempstoList.setBucket8(bucket8.toString());
                            tempstoList.setBucket9(bucket9.toString());
                            tempstoList.setBucket10(bucket10.toString());

                            mapOutBean.put(custNo, tempstoList);

                        }


                    }
                }


            }
        }
        return mapOutBean;
    }

//    public static ArrayList<OutstandingAgeBean> getSumOutstandingInvoiceList(String query) throws OfflineODataStoreException {
//
//
//
//        OutstandingAgeBean tempstoList ;
//        ArrayList<OutstandingAgeBean> temp = new ArrayList<>();
//        if (offlineStore != null) {
//            ODataProperty property;
//            ODataPropMap properties;
//
//            ODataResponseSingle response = readSingleOdataRequest(query);
//            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
//                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
//                List<ODataEntity> entities = feed.getEntities();
//
//                if (entities != null && entities.size() > 0) {
//                    int incVal = 0;
//
//                    for (ODataEntity entity : entities) {
//                        tempstoList = new OutstandingAgeBean();
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.AmtPastDue);
//                        tempstoList.setOAPast(String.valueOf((BigDecimal) property.getValue()));
//
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.AmtCurrentDue);
//                        tempstoList.setOACurrent(String.valueOf((BigDecimal) property.getValue()));
//
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.Amt31To60);
//                        tempstoList.setOA31_60Days(String.valueOf((BigDecimal) property.getValue()));
//
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.Amt61To90);
//                        tempstoList.setOA61_90Days(String.valueOf((BigDecimal) property.getValue()));
//
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.Amt91To120);
//                        tempstoList.setOA91_120Days(String.valueOf((BigDecimal) property.getValue()));
//
//                        properties = entity.getProperties();
//                        property = properties.get(Constants.AmtOver120);
//                        tempstoList.setOA120Days(String.valueOf((BigDecimal) property.getValue()));
//
//                        temp.add(tempstoList);
//
//
//                    }
//                }
//
//
//            }
//        }
//        return temp;
//    }


    public static ArrayList<OutstandingAgeBean> getOutstandingInvoiceValues(String query) throws OfflineODataStoreException {


        OutstandingAgeBean tempstoList;
        ArrayList<OutstandingAgeBean> temp = new ArrayList<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new OutstandingAgeBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.CreditLimit);
                        tempstoList.setCreditLimit(String.valueOf((BigDecimal) property.getValue()));

                        properties = entity.getProperties();
                        property = properties.get(Constants.Recievables);
                        tempstoList.setTotalDebitBal(String.valueOf((BigDecimal) property.getValue()));

                        properties = entity.getProperties();
                        property = properties.get(Constants.SpecialLiabilities);
                        tempstoList.setSecurityDeposit(String.valueOf((BigDecimal) property.getValue()));

                        properties = entity.getProperties();
                        property = properties.get(Constants.DistChannel);
                        tempstoList.setDistChannel(property.getValue().toString());


                        temp.add(tempstoList);


                    }
                }


            }
        }
        return temp;
    }

    public static String getCity(String query) throws OfflineODataStoreException {


        String temp = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.City);
                        temp = property.getValue().toString();


                    }
                }


            }
        }
        return temp;
    }


    /**
     * returns List of distributors from offline store based on query
     *
     * @throws OfflineODataStoreException
     */
    public static String[][] getCustomerDetails(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String[] distVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    distVal = new String[1][entities.size()];
                    int incVal = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.Currency);
                        distVal[0][incVal] = (String) property.getValue();
                        incVal++;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return distVal;

    }

    public static String[][] getBeatPlanArray(String routeSchdleQry) throws OfflineODataStoreException {
        String[] beatVal[] = null;
        //Check if the offline oData store is initialized
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, routeSchdleQry);
        if (entities != null && entities.size() > 0) {
            beatVal = new String[3][entities.size() + 1];
            beatVal[0][0] = Constants.All;
            beatVal[1][0] = Constants.All;
            beatVal[2][0] = "";
            int incVal = 1;
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.RoutId);
                beatVal[0][incVal] = (String) property.getValue();
                property = properties.get(Constants.Description);
                beatVal[1][incVal] = (String) property.getValue();
                property = properties.get(Constants.RouteSchGUID);
                try {
                    ODataGuid mCpGuid = (ODataGuid) property.getValue();
                    beatVal[2][incVal] = mCpGuid.guidAsString36().toUpperCase();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                incVal++;
            }
        }

        return beatVal;
    }

    public static List<ShipToPartyListBean> getShipToParty(String query, List<ShipToPartyListBean> forwardListBeanList) throws OfflineODataStoreException {


        ShipToPartyListBean tempstoList;

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new ShipToPartyListBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.PartnerCustomerNo);
                        tempstoList.setShipToPartyCode(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.PartnerCustomerName);
                        tempstoList.setShipToPartyDesc(property.getValue().toString());

                        forwardListBeanList.add(tempstoList);


                    }
                }


            }
        }
        return forwardListBeanList;
    }

    public static ArrayList<CustomerBean> getRetListByRouteSchudule(String invQry) throws OfflineODataStoreException {

        String custListQry = "";
        ArrayList<CustomerBean> custArrayList = new ArrayList<>();
        ArrayList<CustomerBean> alRetailerList = null;
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean customerBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, invQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    customerBean = new CustomerBean("");
                    properties = entity.getProperties();
                    property = properties.get(Constants.VisitCPGUID);
                    customerBean.setCPGUID(UtilConstants.removeLeadingZeros((String) property.getValue()));
                    custArrayList.add(customerBean);

                }
            }
        }


        if (custArrayList != null && custArrayList.size() > 0) {
            for (int i = 0; i < custArrayList.size(); i++) {
                if (i == 0 && i == custArrayList.size() - 1) {
                    custListQry = custListQry
                            + "(" + Constants.CustomerNo + "%20eq%20'"
                            + custArrayList.get(i).getCPGUID() + "')";

                } else if (i == 0) {
                    custListQry = custListQry
                            + "(" + Constants.CustomerNo + "%20eq%20'"
                            + custArrayList.get(i).getCPGUID() + "'";

                } else if (i == custArrayList.size() - 1) {
                    custListQry = custListQry
                            + "%20or%20" + Constants.CustomerNo + "%20eq%20'"
                            + custArrayList.get(i).getCPGUID() + "')";
                } else {
                    custListQry = custListQry
                            + "%20or%20" + Constants.CustomerNo + "%20eq%20'"
                            + custArrayList.get(i).getCPGUID() + "'";
                }
            }
        } else {
            custListQry = "";
        }


        try {
            if (!custListQry.equalsIgnoreCase("")) {
//                alRetailerList = OfflineManager.getRetailerList(Constants.ChannelPartners + "?$filter= "+custListQry+" " +
//                        " and " + Constants.StatusID + " eq '01' and " + Constants.ApprvlStatusID + " eq '03'" +
//                        " &$orderby=" + Constants.RetailerName + "%20asc");

                alRetailerList = OfflineManager.getCustomerList(Constants.Customers + "?$filter= " + custListQry + " " +
                        " ");
            }

        } catch (OfflineODataStoreException e) {
            LogManager.writeLogError(Constants.error_txt + e.getMessage());
        }

        return alRetailerList;
    }


    public static void createMaterail(Hashtable<String, String> hashtable, UIListener uiListener) throws OfflineODataStoreException {
        if (offlineStore == null) return;
        try {
            // creates the entity payload
            ODataEntity oDataEntity = createMaterialEntity(hashtable);
            // send a request to create new Attendance entity in LOCAL DATABASE
            offlineStore.scheduleCreateEntity(oDataEntity, Constants.Stocks,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Stocks),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
    }

    private static ODataEntity createMaterialEntity(Hashtable<String, String> materialHashtable) {
        ODataEntity oDataEntity = null;
        try {
            oDataEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.STOCK_ENTITY);
            oDataEntity.getProperties().put(Constants.StockGuid,
                    new ODataPropertyDefaultImpl(Constants.StockGuid, ODataGuidDefaultImpl.initWithString32(materialHashtable.get(Constants.StockGuid))));

            oDataEntity.getProperties().put(Constants.CustomerName,
                    new ODataPropertyDefaultImpl(Constants.CustomerName, materialHashtable.get(Constants.CustomerName)));
            oDataEntity.getProperties().put(Constants.Customer,
                    new ODataPropertyDefaultImpl(Constants.Customer, materialHashtable.get(Constants.Customer)));
            oDataEntity.getProperties().put(Constants.MaterialDesc,
                    new ODataPropertyDefaultImpl(Constants.MaterialDesc, materialHashtable.get(Constants.MaterialDesc)));
            oDataEntity.getProperties().put(Constants.Material,
                    new ODataPropertyDefaultImpl(Constants.Material, materialHashtable.get(Constants.Material)));
            oDataEntity.getProperties().put(Constants.UOM,
                    new ODataPropertyDefaultImpl(Constants.UOM, materialHashtable.get(Constants.UOM)));
            oDataEntity.getProperties().put(Constants.Unrestricted,
                    new ODataPropertyDefaultImpl(Constants.Unrestricted, new BigDecimal(materialHashtable.get(Constants.Unrestricted))));

        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataEntity;
    }

    public static void updateStock(Hashtable<String, String> hashtable, UIListener uiListener) throws OfflineODataStoreException {
        // check if store is null
        if (offlineStore == null) return;
        try {
            // create a payload using ODataEntity
            ODataEntity oDataEntity = updateAStockEntity(hashtable);
            // send a request to DB for updating the data
            offlineStore.scheduleUpdateEntity(oDataEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.Stocks), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }

    }

    private static ODataEntity updateAStockEntity(Hashtable<String, String> hashtable) {
        ODataEntity oDataEntity = null;
        oDataEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.STOCK_ENTITY);
        try {
            offlineStore.allocateProperties(oDataEntity, ODataStore.PropMode.Keys);
        } catch (ODataException e) {
            e.printStackTrace();
        }
        try {

            oDataEntity.getProperties().put(Constants.StockGuid,
                    new ODataPropertyDefaultImpl(Constants.StockGuid, hashtable.get(Constants.StockGuid)));

            oDataEntity.getProperties().put(Constants.Customer,
                    new ODataPropertyDefaultImpl(Constants.Customer, hashtable.get(Constants.Customer)));

            oDataEntity.getProperties().put(Constants.CustomerName,
                    new ODataPropertyDefaultImpl(Constants.CustomerName, hashtable.get(Constants.CustomerName)));

            oDataEntity.getProperties().put(Constants.Material,
                    new ODataPropertyDefaultImpl(Constants.Material, hashtable.get(Constants.Material)));
            oDataEntity.getProperties().put(Constants.MaterialDesc,
                    new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));
            oDataEntity.getProperties().put(Constants.Unrestricted,
                    new ODataPropertyDefaultImpl(Constants.Unrestricted, new BigDecimal(hashtable.get(Constants.Unrestricted))));

            oDataEntity.getProperties().put(Constants.ETAG,
                    new ODataPropertyDefaultImpl(Constants.ETAG, hashtable.get(Constants.ETAG)));

            oDataEntity.setResourcePath(
                    Constants.Stocks + "(guid'" + hashtable.get(Constants.StockGuid) + "')",
                    Constants.Stocks + "(guid'" + hashtable.get(Constants.StockGuid) + "')");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return oDataEntity;
    }


    public static InvoiceHistoryBean getInvoiceDetails(String invQry) throws OfflineODataStoreException {

        InvoiceHistoryBean invoiceHisBean = new InvoiceHistoryBean();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(invQry);
                //Send a request to read the Invoice Details from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();


                        property = properties.get(Constants.UOM);
                        invoiceHisBean.setUom((String) property.getValue());

                        property = properties.get(Constants.InvoiceHisMatNo);
                        invoiceHisBean.setMatCode((String) property.getValue());
                        property = properties.get(Constants.InvoiceHisMatDesc);
                        invoiceHisBean.setMatDesc((String) property.getValue());

                        property = properties.get(Constants.ItemNo);
                        invoiceHisBean.setItemNo((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());

//						property = properties.get(Constants.NetAmount);
                        property = properties.get(Constants.GrossAmount);

                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            invoiceHisBean.setInvoiceAmount(mStrAmount.toString());
                        }
                        property = properties.get(Constants.ActualInvQty);
                        String mStrQty = "0.000";
                        if (property != null) {
                            mStrQty = String.valueOf((BigDecimal) property.getValue());
                        }
                        if (checkNoUOMZero(invoiceHisBean.getUom()))
                            invoiceHisBean.setInvQty(trimQtyDecimalPlace(mStrQty));
                        else
                            invoiceHisBean.setInvQty(mStrQty);

                        invoiceHisBean.setIsDetailEnabled(false);

                        // alInvoiceHisDetails.add(invoiceHisBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException
                        (e)
                        ;
            }
        }

      /*  if (alInvoiceHisDetails != null && alInvoiceHisDetails.size() > 0) {
            Collections.sort(alInvoiceHisDetails, new Comparator<InvoiceHistoryBean>() {
                public int compare(InvoiceHistoryBean one, InvoiceHistoryBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getItemNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i1.compareTo(i2);
                    } else {
                        return one.getItemNo().compareTo(other.getItemNo());
                    }
                }
            });
        }*/
        return invoiceHisBean;
    }


    public static ArrayList<CustomerBean> getProspectiveCustomerList(String retListQry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CPNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());
                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.DistrictDesc);
                        retBean.setDistrict((String) property.getValue());


                        property = properties.get(Constants.CityDesc);
                        retBean.setCity((String) property.getValue());

                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());

                        try {
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();

                        }

                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());


                        // Currency


                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    public static ArrayList<ConfigTypeValues> checkMaterialCodeDisplay() {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        String mStrConfigQry = Constants.ConfigTypsetTypeValues + "?$filter=" + Constants.Typeset + " eq '" + Constants.SF + "' and Types eq '" + Constants.DSPMATNO + "'";
        try {
            configTypesetTypesBeanArrayList.addAll(OfflineManager.getConfigTypeValues(mStrConfigQry));
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<ConfigTypeValues> checkMaterialPriceZeroDisplay() {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        String mStrConfigQry = Constants.ConfigTypsetTypeValues + "?$filter=" + Constants.Typeset + " eq '" + Constants.SF + "' and Types eq '" + Constants.DSPPRCNO0 + "'";
        try {
            configTypesetTypesBeanArrayList.addAll(OfflineManager.getConfigTypeValues(mStrConfigQry));
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return configTypesetTypesBeanArrayList;
    }

    /*async method*/
    public static void requestQueryOffline(final OnlineODataInterface onlineODataInterface, final Bundle bundle, final Context mContext) {
        String resourcePath = "";
        String sessionId = "";
        boolean isSessionRequired = false;
        int sessionType = 0;
        try {
            if (bundle == null) {
//            throw new IllegalArgumentException("bundle is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "bundle is null", bundle);
            } else {
                resourcePath = bundle.getString(Constants.BUNDLE_RESOURCE_PATH, "");
                sessionId = bundle.getString(Constants.BUNDLE_SESSION_ID, "");
                isSessionRequired = bundle.getBoolean(Constants.BUNDLE_SESSION_REQUIRED, false);
                sessionType = bundle.getInt(Constants.BUNDLE_SESSION_TYPE, 0);
            }
            if (TextUtils.isEmpty(resourcePath)) {
//            throw new IllegalArgumentException("resource path is null");
                if (onlineODataInterface != null)
                    onlineODataInterface.responseFailed(null, "resource path is null", bundle);
            } else {
                final Map<String, String> createHeaders = new HashMap<String, String>();
                requestScheduledOffline(resourcePath, createHeaders, onlineODataInterface, bundle);
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (onlineODataInterface != null)
                onlineODataInterface.responseFailed(null, e.getMessage(), bundle);
        }
    }

    private static void requestScheduledOffline(String resourcePath, Map<String, String> createHeaders, OnlineODataInterface onlineODataInterface, Bundle bundle) throws ODataException {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        if (offlineStore != null) {
            OnlineRequestListeners getOnlineRequestListener = new OnlineRequestListeners(onlineODataInterface, bundle);
            scheduledReqEntity(resourcePath, getOnlineRequestListener, createHeaders, offlineStore);

        } else {
            throw new IllegalArgumentException("Store not opened");
        }
    }

    private static ODataRequestExecution scheduledReqEntity(String resourcePath, ODataRequestListener listener, Map<String, String> options, ODataOfflineStore offStore) throws ODataContractViolationException {
        if (TextUtils.isEmpty(resourcePath)) {
            throw new IllegalArgumentException("resourcePath is null");
        } else if (listener == null) {
            throw new IllegalArgumentException("listener is null");
        } else {
            ODataRequestParamSingleDefaultImpl requestParam = new ODataRequestParamSingleDefaultImpl();
            requestParam.setMode(ODataRequestParamSingle.Mode.Read);
            requestParam.setResourcePath(resourcePath);
            requestParam.setOptions(options);
            requestParam.getCustomHeaders().putAll(options);

            return offStore.scheduleRequest(requestParam, listener);
        }
    }


    public static ArrayList<ConfigTypeValues> getConfigTypeValues(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypeValues configTypesetTypesBean;
      /*  configTypesetTypesBean = new ConfigTypeValues();
        configTypesetTypesBean.setType("");
        configTypesetTypesBean.setTypeName(Constants.All);
        configTypesetTypesBean.setTypeset("");
        configTypesetTypesBean.setTypeValue("");
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);*/
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypeValues();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        if (property != null)
                            configTypesetTypesBean.setType((String) property.getValue());

                        property = properties.get(Constants.TypesName);
                        if (property != null)
                            configTypesetTypesBean.setTypeName((String) property.getValue());

                        property = properties.get(Constants.TypesValue);
                        if (property != null)
                            configTypesetTypesBean.setTypeValue((String) property.getValue());

                        property = properties.get(Constants.Typeset);
                        if (property != null)
                            configTypesetTypesBean.setTypeset((String) property.getValue());
                        if (!TextUtils.isEmpty(configTypesetTypesBean.getTypeValue().trim()))
                            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }


    public static ArrayList<ConfigTypeValues> checkOneTimeShipTo() {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        String mStrConfigQry = Constants.ConfigTypsetTypeValues + "?$filter=" + Constants.Typeset + " eq '" + Constants.SF + "' and Types eq '" + Constants.ONETIMESHP + "'";
        try {
            configTypesetTypesBeanArrayList.addAll(OfflineManager.getConfigTypeValues(mStrConfigQry));
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return configTypesetTypesBeanArrayList;
    }

    /*get config type set type*/
    public static String[][] getConfigTypesetTypesSO(String query) throws com.arteriatech.mutils.common.OnlineODataStoreException {
        String[] configVal[] = null;
        ODataProperty property;
        ODataPropMap properties;

        try {
            //Define the resource path
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, query);
            if (entities != null) {
                int incVal = 1;
                configVal = new String[2][entities.size() + 1];
                configVal[0][0] = "";
                configVal[1][0] = Constants.None;
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();

                    property = properties.get(Constants.Types);
                    configVal[0][incVal] = (String) property.getValue();
                    property = properties.get(Constants.TypesName);
                    configVal[1][incVal] = (String) property.getValue();
                    incVal++;
                }
            } else {
                throw new com.arteriatech.mutils.common.OnlineODataStoreException(Constants.invalid_payload_entityset_expected + query);
            }
        } catch (Exception e) {
            throw new com.arteriatech.mutils.common.OnlineODataStoreException(e);
        }
        return configVal;
    }

    public static ArrayList<SalesPersonBean> getSalesPersons(String query, ArrayList<SalesPersonBean> forwardListBeanList) throws OfflineODataStoreException {


        SalesPersonBean tempstoList;

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();

                if (entities != null && entities.size() > 0) {
                    int incVal = 0;

                    for (ODataEntity entity : entities) {
                        tempstoList = new SalesPersonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.FirstName);
                        tempstoList.setFirstName(property.getValue().toString());
                        properties = entity.getProperties();
                        property = properties.get(Constants.SPNo);
                        tempstoList.setSPNo(property.getValue().toString());
                        forwardListBeanList.add(tempstoList);
                    }
                }


            }
        }
        return forwardListBeanList;
    }

    public static List<SalesPersonBean> getSalesPerson(String qry) throws OfflineODataStoreException {
        List<SalesPersonBean> salesPersonBeanList = new ArrayList<>();
        SalesPersonBean salesPersonBean = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        salesPersonBean = new SalesPersonBean();
                        properties = entity.getProperties();
                        salesPersonBean = getSalesPersonData(salesPersonBean, properties);
                        salesPersonBeanList.add(salesPersonBean);
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPersonBeanList;
    }

    public static ArrayList<SalesPersonBean> getSalesPersons(String qry) throws OfflineODataStoreException {
        ArrayList<SalesPersonBean> salesPersonBeanList = new ArrayList<>();
        SalesPersonBean salesPersonBean = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        salesPersonBean = new SalesPersonBean();
                        properties = entity.getProperties();
                        salesPersonBean = getSalesPersonData(salesPersonBean, properties);
                        salesPersonBeanList.add(salesPersonBean);
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPersonBeanList;
    }

    public static SalesPersonBean getSalesPersonData(SalesPersonBean salesPersonBean, ODataPropMap properties) {
        ODataProperty property = properties.get(Constants.SPNo);
        if (property != null) {
            salesPersonBean.setSPNo(property.getValue().toString());
        }

        property = properties.get(Constants.FirstName);
        if (property != null) {
            salesPersonBean.setFirstName(property.getValue().toString());
        }

        property = properties.get(Constants.LastName);
        if (property != null) {
            salesPersonBean.setLastName(property.getValue().toString());
        }

        property = properties.get(Constants.SPCategoryID);
        if (property != null) {
            salesPersonBean.setSPCategoryID(property.getValue().toString());
        }

        property = properties.get(Constants.DesignationID);
        if (property != null) {
            salesPersonBean.setDesignationID(property.getValue().toString());
        }

        property = properties.get(Constants.DesignationDesc);
        if (property != null) {
            salesPersonBean.setDesignationDesc(property.getValue().toString());
        }

        property = properties.get(Constants.Address1);
        if (property != null) {
            salesPersonBean.setAddress1(property.getValue().toString());
        }

        property = properties.get(Constants.Address2);
        if (property != null) {
            salesPersonBean.setAddress2(property.getValue().toString());
        }

        property = properties.get(Constants.Address3);
        if (property != null) {
            salesPersonBean.setAddress3(property.getValue().toString());
        }
        property = properties.get(Constants.Address4);
        if (property != null) {
            salesPersonBean.setAddress4(property.getValue().toString());
        }

        property = properties.get(Constants.PostalCode);
        if (property != null) {
            salesPersonBean.setPostalCode(property.getValue().toString());
        }

        property = properties.get(Constants.EmailID);
        if (property != null) {
            salesPersonBean.setEmailID(property.getValue().toString());
        }

        property = properties.get(Constants.MobileNoSales);
        if (property != null) {
            salesPersonBean.setMobileNo(property.getValue().toString());
        }

        property = properties.get(Constants.ExternalRefID);
        if (property != null) {
            salesPersonBean.setExternalRefID(property.getValue().toString());
        }
        property = properties.get(Constants.SPGUID);
        try {
            ODataGuid spGUID = (ODataGuid) property.getValue();
            salesPersonBean.setSPGUID(spGUID.guidAsString36().toUpperCase());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return salesPersonBean;
    }

    public static SalesPersonBean getSalesPersonData(SalesPersonBean salesPersonBean, JSONObject properties) {
        if (properties.optString(Constants.SPNo) != null) {
            salesPersonBean.setSPNo(properties.optString(Constants.SPNo));
        }

        if (properties.optString(Constants.FirstName) != null) {
            salesPersonBean.setFirstName(properties.optString(Constants.FirstName));
        }

        if (properties.optString(Constants.LastName) != null) {
            salesPersonBean.setLastName(properties.optString(Constants.LastName));
        }

        if (properties.optString(Constants.SPCategoryID) != null) {
            salesPersonBean.setSPCategoryID(properties.optString(Constants.SPCategoryID));
        }

        if (properties.optString(Constants.DesignationID) != null) {
            salesPersonBean.setDesignationID(properties.optString(Constants.DesignationID));
        }

        if (properties.optString(Constants.DesignationDesc) != null) {
            salesPersonBean.setDesignationDesc(properties.optString(Constants.DesignationDesc));
        }

        if (properties.optString(Constants.Address1) != null) {
            salesPersonBean.setAddress1(properties.optString(Constants.Address1));
        }

        if (properties.optString(Constants.Address2) != null) {
            salesPersonBean.setAddress2(properties.optString(Constants.Address2));
        }

        if (properties.optString(Constants.Address3) != null) {
            salesPersonBean.setAddress3(properties.optString(Constants.Address3));
        }
        if (properties.optString(Constants.Address4) != null) {
            salesPersonBean.setAddress4(properties.optString(Constants.Address4));
        }

        if (properties.optString(Constants.PostalCode) != null) {
            salesPersonBean.setPostalCode(properties.optString(Constants.PostalCode));
        }

        if (properties.optString(Constants.EmailID) != null) {
            salesPersonBean.setEmailID(properties.optString(Constants.EmailID));
        }

        if (properties.optString(Constants.MobileNoSales) != null) {
            salesPersonBean.setMobileNo(properties.optString(Constants.MobileNoSales));
        }

        if (properties.optString(Constants.ExternalRefID) != null) {
            salesPersonBean.setExternalRefID(properties.optString(Constants.ExternalRefID));
        }
        try {
            salesPersonBean.setSPGUID(properties.optString(Constants.SPGUID));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return salesPersonBean;
    }

    public static List<SalesPersonBean> getUserSalesPerson(String qry) throws OfflineODataStoreException {
        List<SalesPersonBean> salesPersonBeanList = new ArrayList<>();
        SalesPersonBean salesPersonBean = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);

                request.setResourcePath(qry);
                //Send a request to read the Distributors from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        salesPersonBean = new SalesPersonBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.SPNo);
                        if (property != null) {
                            salesPersonBean.setSPNo(property.getValue().toString());
                        }

                        property = properties.get(Constants.FirstName);
                        if (property != null) {
                            salesPersonBean.setFirstName(property.getValue().toString());
                        }

                        property = properties.get(Constants.LastName);
                        if (property != null) {
                            salesPersonBean.setLastName(property.getValue().toString());
                        }

                        property = properties.get(Constants.SPCategoryID);
                        if (property != null) {
                            salesPersonBean.setSPCategoryID(property.getValue().toString());
                        }

                        property = properties.get(Constants.DesignationID);
                        if (property != null) {
                            salesPersonBean.setDesignationID(property.getValue().toString());
                        }

                        property = properties.get(Constants.DesignationDesc);
                        if (property != null) {
                            salesPersonBean.setDesignationDesc(property.getValue().toString());
                        }

                        property = properties.get(Constants.Address1);
                        if (property != null) {
                            salesPersonBean.setAddress1(property.getValue().toString());
                        }

                        property = properties.get(Constants.Address2);
                        if (property != null) {
                            salesPersonBean.setAddress2(property.getValue().toString());
                        }

                        property = properties.get(Constants.Address3);
                        if (property != null) {
                            salesPersonBean.setAddress3(property.getValue().toString());
                        }
                        property = properties.get(Constants.Address4);
                        if (property != null) {
                            salesPersonBean.setAddress4(property.getValue().toString());
                        }

                        property = properties.get(Constants.PostalCode);
                        if (property != null) {
                            salesPersonBean.setPostalCode(property.getValue().toString());
                        }

                        property = properties.get(Constants.EmailID);
                        if (property != null) {
                            salesPersonBean.setEmailID(property.getValue().toString());
                        }

                        property = properties.get(Constants.MobileNo);
                        if (property != null) {
                            salesPersonBean.setMobileNo(property.getValue().toString());
                        }
                        salesPersonBeanList.add(salesPersonBean);
                    }
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesPersonBeanList;
    }

    public static List<ConfigTypesetTypesBean> getStatusConfig(String query, String defaultValue) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        if (!TextUtils.isEmpty(defaultValue)) {
            configTypesetTypesBean = new ConfigTypesetTypesBean();
            configTypesetTypesBean.setTypes("");
            configTypesetTypesBean.setTypesName(defaultValue);
            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        }

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static InvoiceListBean getInvoiceDetails(String qry, Context context, String mStrInvNo) throws Exception {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        String mStrInvQry = Constants.InvoiceConditions + "?$filter=" + Constants.InvoiceNo + " eq '" + mStrInvNo + "'";
        InvoiceListBean invoiceListBean = null;
        ODataProperty property;
        ODataPropMap properties;
        Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
        todayCalenderDate.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight
        todayCalenderDate.set(Calendar.MINUTE, 0);                 // set minute in hour
        todayCalenderDate.set(Calendar.SECOND, 0);                 // set second in minute
        todayCalenderDate.set(Calendar.MILLISECOND, 0);
        try {
            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
            request.setMode(Mode.Read);
            request.setResourcePath(qry);
            //Send a request to read the Distributors from the local database
            ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
            ODataEntity entity = (ODataEntity) response.getPayload();
            ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
            invoiceListBean = new InvoiceListBean();
            properties = entity.getProperties();
            property = properties.get(Constants.CustomerName);
            invoiceListBean.setCustomerName((String) property.getValue());

            property = properties.get(Constants.CustomerNo);
            if (property != null)
                invoiceListBean.setCustomerNo((String) property.getValue());

            property = properties.get(Constants.InvoiceNo);
            invoiceListBean.setInvoiceNo((String) property.getValue());

            property = properties.get(Constants.NetAmount);
            String invAmtStr = "0";
            if (property != null) {
                BigDecimal mStrAmount = (BigDecimal) property.getValue();
                invAmtStr = mStrAmount.toString();
            }
            invoiceListBean.setNetAmount(invAmtStr);

            property = properties.get(Constants.InvoiceDate);
            String convertDateFormat2 = null;
            if (property != null) {
                convertDateFormat2 = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());

//                convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
            }

            invoiceListBean.setInvoiceDate(convertDateFormat2);
            invoiceListBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, convertDateFormat2));
            property = properties.get(Constants.InvoiceStatus);
            if (property != null)
                invoiceListBean.setInvoiceStatus((String) property.getValue());


            property = properties.get(Constants.Currency);
            if (property != null)
                invoiceListBean.setCurrency((String) property.getValue());

            property = properties.get(Constants.InvoiceTypDesc);
            if (property != null)
                invoiceListBean.setInvoiceTypDesc((String) property.getValue());

            property = properties.get(Constants.InvoiceType);
            if (property != null)
                invoiceListBean.setInvoiceType((String) property.getValue());


            property = properties.get(Constants.PaymentTermDesc);
            if (property != null)
                invoiceListBean.setPaymentTermDesc((String) property.getValue());

            property = properties.get(Constants.IncoTerm1);
            if (property != null)
                invoiceListBean.setIncoterm1Desc((String) property.getValue());

            property = properties.get(Constants.IncoTerm2);
            if (property != null)
                invoiceListBean.setIncoTerm2((String) property.getValue());

            ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.InvoiceItemDetails);
            ODataEntitySet feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
            List<ODataEntity> entities = feed.getEntities();
            ArrayList<InvoiceItemBean> soItemBeanArrayList = new ArrayList<>();
            InvoiceItemBean invoiceItemBean;
            for (ODataEntity soItemEntity : entities) {
                invoiceItemBean = new InvoiceItemBean();
                properties = soItemEntity.getProperties();
                property = properties.get(Constants.MaterialDesc);
                invoiceItemBean.setMaterialDesc(property.getValue().toString());
                property = properties.get(Constants.GrossAmount);
                invoiceItemBean.setGrossAmount(property.getValue().toString());
                property = properties.get(Constants.Tax);
                invoiceItemBean.setTax(property.getValue().toString());
                try {
                    BigDecimal bgGrossAmt = new BigDecimal(invoiceItemBean.getGrossAmount());
                    BigDecimal bgTax = new BigDecimal(invoiceItemBean.getTax());
                    invoiceItemBean.setTotalAmount(String.valueOf(bgGrossAmt.add(bgTax)));
                } catch (Exception e) {
                    e.printStackTrace();
                    invoiceItemBean.setTotalAmount("0.0");
                }

                property = properties.get(Constants.MaterialNo);
                invoiceItemBean.setMaterialNo(property.getValue().toString());
                property = properties.get(Constants.ItemNo);
                invoiceItemBean.setItemNo(property.getValue().toString());
                property = properties.get(Constants.UOM);
                invoiceItemBean.setUOM(property.getValue().toString());
                property = properties.get(Constants.ActualInvQty);

                invoiceItemBean.setActualInvQty(ConstantsUtils.checkNoUOMZero(invoiceItemBean.getUOM(), property.getValue().toString()));

                property = properties.get(Constants.Currency);
                invoiceItemBean.setCurrency(property.getValue().toString());
                if (!configTypeValuesList.isEmpty()) {
                    invoiceItemBean.setInvoiceMaterialDescAndNo(context.getString(R.string.po_details_display_value, invoiceItemBean.getMaterialDesc(), invoiceItemBean.getMaterialNo()));
                } else {
                    invoiceItemBean.setInvoiceMaterialDescAndNo(invoiceItemBean.getMaterialDesc());
                }
                soItemBeanArrayList.add(invoiceItemBean);
            }
            Collections.sort(soItemBeanArrayList, new Comparator<InvoiceItemBean>() {
                @Override
                public int compare(InvoiceItemBean one, InvoiceItemBean two) {
                    return one.getItemNo().compareTo(two.getItemNo());
                }
            });
            invoiceListBean.setInvoiceItemBeanArrayList(soItemBeanArrayList);

            ODataNavigationProperty invoicePartnerFunctionsProp = entity.getNavigationProperty(Constants.InvoicePartnerFunctions);
            ODataEntitySet pfFeed = (ODataEntitySet) invoicePartnerFunctionsProp.getNavigationContent();
            List<ODataEntity> pfEntities = pfFeed.getEntities();
            ArrayList<InvoicePartnerFunctionsBean> invoicePartnerFunctionsArrayList = new ArrayList<>();
            InvoicePartnerFunctionsBean invoicePartnerFunctions;
            for (ODataEntity soItemEntity : pfEntities) {
                invoicePartnerFunctions = new InvoicePartnerFunctionsBean();
                properties = soItemEntity.getProperties();
                property = properties.get(Constants.CustomerName);
                invoicePartnerFunctions.setCustomerName(property.getValue().toString());
                property = properties.get(Constants.PartnerFunctionID);
                String PartnerFunctionID = property.getValue().toString();
                property = properties.get(Constants.PartnerFunctionDesc);
                invoicePartnerFunctions.setPartnerFunctionDesc(property.getValue().toString());
                property = properties.get(Constants.TransportationZoneDesc);
                invoicePartnerFunctions.setTransportationZoneDesc(property.getValue().toString());
                property = properties.get(Constants.VendorName);
                invoicePartnerFunctions.setVendorNo(property.getValue().toString());
                property = properties.get(Constants.PersonnelName);
                invoicePartnerFunctions.setPersonnelNo(property.getValue().toString());
                property = properties.get(Constants.CustomerNo);
                invoicePartnerFunctions.setCustomerNo(property.getValue().toString());
                property = properties.get(Constants.Address1);
                invoicePartnerFunctions.setAddress1(property.getValue().toString());
                property = properties.get(Constants.Address2);
                invoicePartnerFunctions.setAddress2(property.getValue().toString());
                property = properties.get(Constants.Address3);
                invoicePartnerFunctions.setAddress3(property.getValue().toString());
                property = properties.get(Constants.Address4);
                invoicePartnerFunctions.setAddress4(property.getValue().toString());
                property = properties.get(Constants.District);
                invoicePartnerFunctions.setDistrict(property.getValue().toString());
                property = properties.get(Constants.CityID);
                invoicePartnerFunctions.setCityID(property.getValue().toString());
                property = properties.get(Constants.RegionID);
                invoicePartnerFunctions.setRegionID(property.getValue().toString());
                property = properties.get(Constants.RegionDesc);
                invoicePartnerFunctions.setRegionDesc(property.getValue().toString());
                property = properties.get(Constants.CountryID);
                invoicePartnerFunctions.setCountryID(property.getValue().toString());
                property = properties.get(Constants.CountryDesc);
                invoicePartnerFunctions.setCountryDesc(property.getValue().toString());
                property = properties.get(Constants.PostalCode);
                invoicePartnerFunctions.setPostalCode(property.getValue().toString());
                property = properties.get(Constants.Mobile1);
                invoicePartnerFunctions.setMobile1(property.getValue().toString());
                property = properties.get(Constants.Mobile2);
                invoicePartnerFunctions.setMobile2(property.getValue().toString());
                property = properties.get(Constants.EmailID);
                invoicePartnerFunctions.setEmailID(property.getValue().toString());
                property = properties.get(Constants.PartnerFunctionID);
                invoicePartnerFunctions.setPartnerFunctionID(property.getValue().toString());
                invoicePartnerFunctionsArrayList.add(invoicePartnerFunctions);
            }
            invoiceListBean.setInvoicePartnerFunctionsArrayList(invoicePartnerFunctionsArrayList);

            ArrayList<InvoiceConditionsBean> invoiceConditionsFunctionsArrayList = new ArrayList<>();
            List<ODataEntity> invcEntities = null;
            ODataRequestParamSingle requestInvCond = new ODataRequestParamSingleDefaultImpl();
            requestInvCond.setMode(Mode.Read);
            requestInvCond.setResourcePath(mStrInvQry);
            //Send a request to read the Distributors from the local database
            ODataResponseSingle responseInvCond = (ODataResponseSingle) offlineStore.executeRequest(requestInvCond);
            if (responseInvCond.getPayloadType() == ODataPayload.Type.Error) {
                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                        responseInvCond.getPayload();

                //Check if the response contains EntitySet
            } else if (responseInvCond.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet invcFeed = (ODataEntitySet) responseInvCond.getPayload();
                invcEntities = invcFeed.getEntities();
                InvoiceConditionsBean invoiceConditions;
                for (ODataEntity invcEntity : invcEntities) {
                    invoiceConditions = new InvoiceConditionsBean();
                    properties = invcEntity.getProperties();
                    property = properties.get(Constants.ConditionAmt);
                    invoiceConditions.setConditionAmt(property.getValue().toString());
                    property = properties.get(Constants.ConditionAmtPerUOM);
                    invoiceConditions.setConditionAmtPerUOM(property.getValue().toString());
                    property = properties.get(Constants.ConditionCatDesc);
                    invoiceConditions.setConditionCatDesc(property.getValue().toString());
                    property = properties.get(Constants.ConditionCatID);
                    invoiceConditions.setConditionCatID(property.getValue().toString());
                    property = properties.get(Constants.ConditionValue);
                    invoiceConditions.setConditionValue(property.getValue().toString());
                    property = properties.get(Constants.Currency);
                    invoiceConditions.setCurrency(property.getValue().toString());
                    property = properties.get(Constants.Name);
                    invoiceConditions.setName(property.getValue().toString());
                    property = properties.get(Constants.SequenceNo);
                    if (property != null) {
                        invoiceConditions.setSequenceNo(property.getValue().toString());
                    }
                    invoiceConditionsFunctionsArrayList.add(invoiceConditions);
                }
            }
            Collections.sort(invoiceConditionsFunctionsArrayList, new Comparator<InvoiceConditionsBean>() {
                @Override
                public int compare(InvoiceConditionsBean arg0, InvoiceConditionsBean arg1) {

                    return arg0.getSequenceNo().compareTo(arg1.getSequenceNo());
                }
            });

           /* ODataNavigationProperty invoiceConditionsProp = entity.getNavigationProperty(Constants.InvoiceConditions);
            ODataEntitySet invcFeed = (ODataEntitySet) invoiceConditionsProp.getNavigationContent();
            List<ODataEntity> invcEntities = invcFeed.getEntities();
            ArrayList<InvoiceConditionsBean> invoiceConditionsFunctionsArrayList = new ArrayList<>();
            InvoiceConditionsBean invoiceConditions;
            for (ODataEntity invcEntity : invcEntities) {
                invoiceConditions = new InvoiceConditionsBean();
                properties = invcEntity.getProperties();
                property = properties.get(Constants.ConditionAmt);
                invoiceConditions.setConditionAmt(property.getValue().toString());
                property = properties.get(Constants.ConditionAmtPerUOM);
                invoiceConditions.setConditionAmtPerUOM(property.getValue().toString());
                property = properties.get(Constants.ConditionCatDesc);
                invoiceConditions.setConditionCatDesc(property.getValue().toString());
                property = properties.get(Constants.ConditionCatID);
                invoiceConditions.setConditionCatID(property.getValue().toString());
                property = properties.get(Constants.ConditionValue);
                invoiceConditions.setConditionValue(property.getValue().toString());
                property = properties.get(Constants.Currency);
                invoiceConditions.setCurrency(property.getValue().toString());
                property = properties.get(Constants.Name);
                invoiceConditions.setName(property.getValue().toString());

                invoiceConditionsFunctionsArrayList.add(invoiceConditions);
            }*/

            //***************************************
            InvConItemBean invConItemBean = new InvConItemBean();
            ArrayList<InvConItemBean> invConditionItemDetaiBeanArrayList = new ArrayList<>();
            BigDecimal totalConditionValue = new BigDecimal("0.00");
            BigDecimal totalConditionAmt = new BigDecimal("0.00");
            if (invcEntities != null && invcEntities.size() > 0) {
                for (ODataEntity soHeader : invcEntities) {
                    invConItemBean = getConditionInv(soHeader);
                    if (invConItemBean != null) {
                        if (invConItemBean.getName().length() > 0) {
                            try {
                                totalConditionValue = totalConditionValue.add(new BigDecimal(invConItemBean.getConditionValue()));
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                            try {
                                totalConditionAmt = totalConditionAmt.add(new BigDecimal(invConItemBean.getConditionAmt()));
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }

                    }
                }
                if (invConItemBean != null) {
                    invConItemBean.setConditionTotalAmt(totalConditionAmt + "");
                    invConItemBean.setConditionTotalValue(totalConditionValue + "");
                }
                invConditionItemDetaiBeanArrayList.add(invConItemBean);
            }

            invoiceListBean.setInvConditionItemDetaiBeanArrayList(invConditionItemDetaiBeanArrayList);
            invoiceListBean.setInvoiceConditionsArrayList(invoiceConditionsFunctionsArrayList);

            return invoiceListBean;


        } catch (Exception e) {
            e.printStackTrace();
            throw new com.arteriatech.mutils.common.OfflineODataStoreException(e.getMessage());
        }
    }

    public static InvConItemBean getConditionInv(ODataEntity entityCondition) {
        ODataProperty property;
        ODataPropMap properties;
        properties = entityCondition.getProperties();
        InvConItemBean invConItemBean = null;
        invConItemBean = new InvConItemBean();

        property = properties.get(Constants.ConditionCatDesc);
        if (property != null) {
            invConItemBean.setConditionCatDesc(property.getValue().toString());
        }

        property = properties.get(Constants.ConditionValue);
        if (property != null) {
//            totalNormalAmt=totalNormalAmt.add((BigDecimal)property.getValue());
            invConItemBean.setConditionValue(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionAmt);
        if (property != null) {
            invConItemBean.setConditionAmt(property.getValue().toString());
        }

        property = properties.get(Constants.Name);
        if (property != null) {
            invConItemBean.setName(property.getValue().toString());
        }

        property = properties.get(Constants.SequenceNo);
        if (property != null) {
            invConItemBean.setSequenceNo(property.getValue().toString());
        }

        return invConItemBean;
    }

    public static List<SalesOrderBean> getSOListDB(Context context, String retailerStockQry,
                                                   String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.StatusID);
                        salesOrderBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.DelvStatusID);
                        salesOrderBean.setDelvStatus((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.Material);
                        salesOrderBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        salesOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.Quantity);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        property = properties.get(Constants.UOM);
                        salesOrderBean.setUom((String) property.getValue());
                       /* if (checkNoUOMZero(salesOrderBean.getUom()))
                            salesOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            salesOrderBean.setQAQty(qty);*/
                        salesOrderBean.setQAQty(ConstantsUtils.checkNoUOMZero(salesOrderBean.getUom(), qty));


                /*        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/
//
//
               /*         property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");*/

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        salesOrderBean.setOrderDate(convertDateFormat);

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + salesOrderBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        salesOrderBean.setRemarks(soTxt != null ? soTxt : "");


                        salesOrderBeanList.add(salesOrderBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return salesOrderBeanList;

    }

    public static SOListBean getSODetails(String qry, Context mContext) {
        SOListBean soListBean = null;
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.Entity) {
                    ODataEntitySet feed;
                    soListBean = new SOListBean();
                  /*  ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();*/
                    ODataEntity entity = (ODataEntity) response.getPayload();
                    //Retrieve the data from the response
                    properties = entity.getProperties();
                    property = properties.get(Constants.SONo);
                    if (property != null)
                        soListBean.setSONo(property.getValue().toString());

                    try {
                        property = properties.get(Constants.TotalAmount);
                        soListBean.setTotalAmt(property.getValue().toString());

                        property = properties.get(Constants.Currency);
                        soListBean.setCurrency(property.getValue().toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.SalesAreaDesc);
                    soListBean.setSalesAreaDesc(property.getValue().toString());
                    property = properties.get(Constants.SalesArea);
                    soListBean.setSalesArea(property.getValue().toString());
                    property = properties.get(Constants.OrderTypeDesc);
                    soListBean.setOrderTypeDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderType);
                    soListBean.setOrderType(property.getValue().toString());
                    property = properties.get(Constants.ShipToPartyName);
                    soListBean.setShipToName(property.getValue().toString());
                    property = properties.get(Constants.ShipToParty);
                    soListBean.setShipTo(property.getValue().toString());
                    property = properties.get(Constants.TransporterName);
                    if (property != null)
                        soListBean.setTransportName(property.getValue().toString());
                    property = properties.get(Constants.TransporterID);
                    if (property != null)
                        soListBean.setTransportNameID(property.getValue().toString());

                    property = properties.get(Constants.Plant);
                    if (property != null) {
                        soListBean.setPlant((String) property.getValue());
                    }

                    property = properties.get(Constants.UnloadingPoint);
                    if (property != null) {
                        soListBean.setUnloadingPointDesc((String) property.getValue());
                    }

                    property = properties.get(Constants.ReceivingPoint);
                    if (property != null) {
                        soListBean.setReceivingPointDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.PaytermDesc);
                    if (property != null) {
                        soListBean.setPaymentTermDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Payterm);
                    if (property != null) {
                        soListBean.setPaymentTerm(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1Desc);
                    if (property != null) {
                        soListBean.setIncoterm1Desc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1);
                    if (property != null) {
                        soListBean.setIncoTerm1(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm2);
                    if (property != null) {
                        soListBean.setIncoterm2(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeID);
                    if (property != null) {
                        soListBean.setShippingPoint(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeDesc);
                    if (property != null) {
                        soListBean.setShippingPointDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesOffice);
                    if (property != null) {
                        soListBean.setSalesOfficeId(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleOffDesc);
                    if (property != null) {
                        soListBean.setSaleOffDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.SalesGroup);
                    if (property != null) {
                        soListBean.setSalesGroup(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleGrpDesc);
                    if (property != null) {
                        soListBean.setSaleGrpDesc(property.getValue().toString());
                    }
                    soListBean.setAddress(SOUtils.getAddressValue(properties));

                    property = properties.get(Constants.CustomerPO);
                    if (property != null) {
                        soListBean.setPONo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerNo);
                    if (property != null) {
                        soListBean.setSoldTo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerName);
                    if (property != null) {
                        soListBean.setSoldToName(property.getValue().toString());
                    }
                    property = properties.get(Constants.Status);
                    if (property != null) {
                        soListBean.setStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.DelvStatus);
                    if (property != null) {
                        soListBean.setDelvStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstyp);
                    if (property != null) {
                        soListBean.setMeansOfTranstyp(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstypDesc);
                    if (property != null) {
                        soListBean.setMeansOfTranstypDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.NetWeight);
                    if (property != null) {
                        soListBean.setmStrTotalWeight(property.getValue().toString());
                    }
                    property = properties.get(Constants.NetWeightUom);
                    if (property != null) {
                        soListBean.setmStrWeightUOM(property.getValue().toString());
                    }
                    //checkNoUOMZero(soListBean.getmStrWeightUOM(), soListBean.getmStrTotalWeight()
                    /*if (checkNoUOMZero(soListBean.getmStrWeightUOM()))
                        soListBean.setmStrTotalWeight(trimQtyDecimalPlace(soListBean.getmStrTotalWeight()));
                    else
                        soListBean.setmStrTotalWeight(soListBean.getmStrTotalWeight());*/
                    soListBean.setmStrTotalWeight(ConstantsUtils.checkNoUOMZero(soListBean.getUOM(), soListBean.getmStrTotalWeight()));

                    property = properties.get(Constants.TotalQuantity);
                    if (property != null) {
                        soListBean.setQuantity(trimQtyDecimalPlace(property.getValue().toString()));
                    }
                    property = properties.get(Constants.QuantityUom);
                    if (property != null) {
                        soListBean.setmSteTotalQtyUOM(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesDist);
                    if (property != null)
                        soListBean.setSalesDist(property.getValue().toString());
                    property = properties.get(Constants.SalesDistDesc);
                    if (property != null)
                        soListBean.setSalesDistDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderDate);
                    if (property != null) {
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        soListBean.setOrderDate(convertDateFormat);
                    }
                    property = properties.get(Constants.CustomerPODate);
                    if (property != null) {
                        try {
                            String customerPoDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            soListBean.setPODate(customerPoDate);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    ODataNavigationProperty soPartnerProp = entity.getNavigationProperty(Constants.SOPartnerFunctions);
                    ODataEntitySet feedParFun = (ODataEntitySet) soPartnerProp.getNavigationContent();
                    List<ODataEntity> soPartnerEntities = feedParFun.getEntities();
                    ArrayList<CustomerPartnerFunctionBean> customerPartnerFunctionList = new ArrayList<>();
                    for (ODataEntity partnerFunctionEntity : soPartnerEntities) {
                        CustomerPartnerFunctionBean partnerFunctions
                                = new CustomerPartnerFunctionBean();
                        properties = partnerFunctionEntity.getProperties();
                        property = properties.get(Constants.PartnerFunctionID);
                        partnerFunctions.setPartnerFunctionID(property.getValue().toString());
                        partnerFunctions = getCustomerPartnerFunction(properties, partnerFunctions);

                        customerPartnerFunctionList.add(partnerFunctions);
                    }

                    soListBean.setCustomerPartnerFunctionList(customerPartnerFunctionList);
                    ODataNavigationProperty soTextProp = entity.getNavigationProperty(Constants.SOTexts);
                    feed = (ODataEntitySet) soTextProp.getNavigationContent();
                    List<ODataEntity> soTextEntities = feed.getEntities();

                    for (ODataEntity soTextEntity : soTextEntities) {
                        properties = soTextEntity.getProperties();
                        property = properties.get(Constants.Text);
                        soListBean.setRemarks(property.getValue().toString());
                    }
                    /*soItem details*/
                    ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.SOItemDetails);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> feedEntities = feed.getEntities();
                    ArrayList<SOItemBean> soItemBeanArrayList = new ArrayList<>();
                    SOItemBean soItemBean;
                    /*soItem details finish*/
                    /*so condition start*/
                    soItemDetailsProp = entity.getNavigationProperty(Constants.SOConditions);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> soConditionEntities = feed.getEntities();


                    for (ODataEntity soItemEntity : feedEntities) {
                        soItemBean = new SOItemBean();
                        properties = soItemEntity.getProperties();
                        property = properties.get(Constants.Material);
                        soItemBean.setMatCode(property.getValue().toString());
                        property = properties.get(Constants.MaterialDesc);
                        soItemBean.setMatDesc(property.getValue().toString());
                        if (!configTypeValuesList.isEmpty()) {
                            soItemBean.setMatNoAndDesc(mContext.getString(R.string.po_details_display_value, soItemBean.getMatDesc(), soItemBean.getMatCode()));
                        } else {
                            soItemBean.setMatNoAndDesc(soItemBean.getMatDesc());
                        }
                        property = properties.get(Constants.UOM);
                        soItemBean.setUom(property.getValue().toString());
                        property = properties.get(Constants.Quantity);
                        if (checkNoUOMZero(String.valueOf(soItemBean.getUom()))) {
                            soItemBean.setSoQty(trimQtyDecimalPlace(property.getValue().toString()));
                        } else {
                            soItemBean.setSoQty(property.getValue().toString());
                        }
//                        soItemBean.setSoQty(property.getValue().toString());

                      /*  if (!configTypeValuesList.isEmpty()) {
                            soItemBean.setMatNoAndDesc(mContext.getString(R.string.po_details_display_value, soItemBean.getMatDesc(), soItemBean.getMatCode()));
                        } else {
                            soItemBean.setMatNoAndDesc(soItemBean.getMatDesc());
                        }*/
                        property = properties.get(Constants.UnitPrice);
                        soItemBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.NetAmount);
                        soItemBean.setNetAmount(property.getValue().toString());
                        property = properties.get(Constants.Plant);
                        soItemBean.setPlantId(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        soItemBean.setPlantDesc(property.getValue().toString());
                        property = properties.get(Constants.Currency);
                        soItemBean.setCurrency(property.getValue().toString());
                        property = properties.get(Constants.ItemNo);
                        soItemBean.setItemNo(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        soItemBean.setSetSONo(property.getValue().toString());
                        property = properties.get(Constants.DelvStatusID);
                        soItemBean.setDelvStatusID(property.getValue().toString());
                        /*start so condition*/
                        ArrayList<SOConditionItemDetaiBean> soConditionItemDetaiBeanArrayList = new ArrayList<>();
                        SOConditionItemDetaiBean soConditionItemDetaiBean;
                        BigDecimal totalNormalAmt = new BigDecimal("0.00");
                        BigDecimal subTotalAmt = new BigDecimal("0.00");
                        for (ODataEntity soHeader : soConditionEntities) {
                            soConditionItemDetaiBean = getCondition(soHeader);
                            if (soConditionItemDetaiBean != null) {
                                try {
                                    totalNormalAmt = totalNormalAmt.add(new BigDecimal(soConditionItemDetaiBean.getAmount()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                try {
                                    subTotalAmt = subTotalAmt.add(new BigDecimal(soConditionItemDetaiBean.getConditionValue()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                soConditionItemDetaiBeanArrayList.add(soConditionItemDetaiBean);
                            }
                        }
                        Collections.sort(soConditionItemDetaiBeanArrayList, new Comparator<SOConditionItemDetaiBean>() {
                            @Override
                            public int compare(SOConditionItemDetaiBean arg0, SOConditionItemDetaiBean arg1) {

                                return arg0.getSequenceNo().compareTo(arg1.getSequenceNo());
                            }
                        });

                        soConditionItemDetaiBean = new SOConditionItemDetaiBean();
                        soConditionItemDetaiBean.setViewType("T");
                        soConditionItemDetaiBean.setName("Total");
                        soConditionItemDetaiBean.setAmount(totalNormalAmt + "");
                        soConditionItemDetaiBean.setConditionValue(subTotalAmt + "");
                        soConditionItemDetaiBeanArrayList.add(soConditionItemDetaiBean);
                        soItemBean.setConditionItemDetaiBeanArrayList(soConditionItemDetaiBeanArrayList);
                        soItemBeanArrayList.add(soItemBean);
                    }
                    Collections.sort(soItemBeanArrayList, new Comparator<SOItemBean>() {
                        @Override
                        public int compare(SOItemBean one, SOItemBean two) {
                            return one.getItemNo().compareTo(two.getItemNo());
                        }
                    });
                    soListBean.setSoItemBeanArrayList(soItemBeanArrayList);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return soListBean;
    }

    /*so condition*/
    public static SOConditionItemDetaiBean getCondition(ODataEntity entityCondition) {
        ODataProperty property;
        ODataPropMap properties;
        properties = entityCondition.getProperties();
        SOConditionItemDetaiBean soConditionItemDetaiBean = null;
        String condCurrency = "";
        property = properties.get(Constants.CondCurrency);
        if (property != null) {
            condCurrency = property.getValue().toString();
        }

//        if (comingFrom!=ConstantsUtils.SO_MULTIPLE_MATERIAL || !TextUtils.isEmpty(condCurrency))
        soConditionItemDetaiBean = new SOConditionItemDetaiBean();
        soConditionItemDetaiBean.setViewType("S");
        if (!TextUtils.isEmpty(condCurrency)) {
            property = properties.get(Constants.ConditionAmount);
            if (property != null) {
//            totalNormalAmt=totalNormalAmt.add((BigDecimal)property.getValue());
                soConditionItemDetaiBean.setAmount(property.getValue().toString());
            }
        }
        property = properties.get(Constants.Name);
        if (property != null) {
            soConditionItemDetaiBean.setName(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionAmtPer);
        if (property != null) {
            soConditionItemDetaiBean.setConditionAmtPer(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionValue);
        if (property != null) {
//            subTotalAmt=subTotalAmt.add((BigDecimal)property.getValue());
            soConditionItemDetaiBean.setConditionValue(property.getValue().toString());
        }
        property = properties.get(Constants.Currency);
        if (property != null) {
            soConditionItemDetaiBean.setCurrency(property.getValue().toString());
        }
        property = properties.get(Constants.ConditionCounter);
        if (property != null) {
            soConditionItemDetaiBean.setConditionCounter(property.getValue().toString());
        }
        property = properties.get(Constants.CondCurrency);
        if (property != null) {
            soConditionItemDetaiBean.setCondCurrency(property.getValue().toString());
        }
        property = properties.get(Constants.SequenceNo);
        if (property != null) {
            soConditionItemDetaiBean.setSequenceNo(property.getValue().toString());
        }
        return soConditionItemDetaiBean;
    }

    private static CustomerPartnerFunctionBean getCustomerPartnerFunction(ODataPropMap properties, CustomerPartnerFunctionBean partnerFunctions) {
        ODataProperty property;
        property = properties.get(Constants.PartnerFunctionDesc);
        partnerFunctions.setPartnerFunctionDesc(property.getValue().toString());
        property = properties.get(Constants.CustomerNo);
        partnerFunctions.setPartnerCustomerNo(property.getValue().toString());
        property = properties.get(Constants.CustomerName);
        if (property != null)
            partnerFunctions.setPartnerCustomerName(property.getValue().toString());
        property = properties.get(Constants.VendorNo);
        if (property != null)
            partnerFunctions.setPartnerVendorNo(property.getValue().toString());
        property = properties.get(Constants.VendorName);
        if (property != null)
            partnerFunctions.setPartnerVendorName(property.getValue().toString());
        property = properties.get(Constants.PersonnelNo);
        if (property != null)
            partnerFunctions.setPersonnelNo(property.getValue().toString());
        property = properties.get(Constants.PersonnelName);
        if (property != null)
            partnerFunctions.setPersonnelName(property.getValue().toString());
        property = properties.get(Constants.Address1);
        if (property != null)
            partnerFunctions.setAddress1(property.getValue().toString());
        property = properties.get(Constants.Address2);
        if (property != null)
            partnerFunctions.setAddress2(property.getValue().toString());
        property = properties.get(Constants.Address3);
        if (property != null)
            partnerFunctions.setAddress3(property.getValue().toString());
        property = properties.get(Constants.Address4);
        if (property != null)
            partnerFunctions.setAddress4(property.getValue().toString());
        property = properties.get(Constants.District);
        if (property != null)
            partnerFunctions.setDistrict(property.getValue().toString());
        property = properties.get(Constants.CityID);
        if (property != null)
            partnerFunctions.setCityID(property.getValue().toString());
        property = properties.get(Constants.RegionID);
        if (property != null)
            partnerFunctions.setRegionID(property.getValue().toString());
        property = properties.get(Constants.RegionDesc);
        if (property != null)
            partnerFunctions.setRegionDesc(property.getValue().toString());
        property = properties.get(Constants.CountryID);
        if (property != null)
            partnerFunctions.setCountryID(property.getValue().toString());
        property = properties.get(Constants.CountryDesc);
        if (property != null)
            partnerFunctions.setCountryDesc(property.getValue().toString());
        property = properties.get(Constants.PostalCode);
        if (property != null)
            partnerFunctions.setPostalCode(property.getValue().toString());
        property = properties.get(Constants.Mobile1);
        if (property != null)
            partnerFunctions.setMobile1(property.getValue().toString());
        property = properties.get(Constants.Mobile2);
        if (property != null)
            partnerFunctions.setMobile2(property.getValue().toString());
        property = properties.get(Constants.EmailID);
        if (property != null)
            partnerFunctions.setEmailID(property.getValue().toString());
        return partnerFunctions;
    }

    public static List<SalesOrderBean> getSODetailsListFromDataValt(String mDeviceNo, Context mContext) throws OfflineODataStoreException {
        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        SalesOrderBean salesOrderItemsBean;
        String store = "";
        ArrayList<HashMap<String, String>> arrtable;
        ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
        try {
            store = ConstantsUtils.getFromDataVault(mDeviceNo,mContext);
        } catch (Throwable e) {
            e.printStackTrace();
        }
        try {
            JSONObject fetchJsonHeaderObject = new JSONObject(store);
            String itemsString = fetchJsonHeaderObject.getString(Constants.SalesOrderItems);
            arrtable = UtilConstants.convertToArrayListMap(itemsString);
            for (int i = 0; i < arrtable.size(); i++) {
                HashMap<String, String> singleRow = arrtable.get(i);
                salesOrderItemsBean = new SalesOrderBean();
                salesOrderItemsBean.setMaterialNo(singleRow.get(Constants.Material));
                salesOrderItemsBean.setMaterialDesc(singleRow.get(Constants.MaterialDesc));
                salesOrderItemsBean.setsItemNo(singleRow.get(Constants.ItemNo));
                salesOrderItemsBean.setQAQty(singleRow.get(Constants.Quantity));
                salesOrderItemsBean.setNetAmount(singleRow.get(Constants.NetAmount));
                salesOrderItemsBean.setCurrency(singleRow.get(Constants.Currency));
                salesOrderItemsBean.setUom(singleRow.get(Constants.UOM));
                if (!configTypeValuesList.isEmpty()) {
                    salesOrderItemsBean.setMatNoAndDesc(mContext.getString(R.string.po_details_display_value, salesOrderItemsBean.getMaterialDesc(), salesOrderItemsBean.getMaterialNo()));
                } else {
                    salesOrderItemsBean.setMatNoAndDesc(salesOrderItemsBean.getMaterialDesc());
                }
                salesOrderItemsBean.setPlant(singleRow.get(Constants.Plant));
                salesOrderItemsBean.setPlantDesc(singleRow.get(Constants.PlantDesc));
                salesOrderItemsBean.setMatFrgtGrp(singleRow.get(Constants.MatFrgtGrp));
                salesOrderItemsBean.setMatFrgtGrpDesc(singleRow.get(Constants.MatFrgtGrpDesc));
                salesOrderItemsBean.setStorLoc(singleRow.get(Constants.StorLoc));
                salesOrderItemsBean.setStorLocDesc(singleRow.get(Constants.StorLocDesc));

                ArrayList<HashMap<String, String>> condItemTable = UtilConstants.convertToArrayListMap(singleRow.get("conditionItem_" + salesOrderItemsBean.getMaterialNo()));
                ArrayList<SalesOrderConditionsBean> salesOrderConditionsBeanArrayList = new ArrayList<>();
                for (HashMap<String, String> condMap : condItemTable) {
                    SalesOrderConditionsBean salesOrderConditionsBean = new SalesOrderConditionsBean();
                    salesOrderConditionsBean.setName(condMap.get(Constants.Name));
                    salesOrderConditionsBean.setconditionAmount(condMap.get(Constants.Amount));
                    salesOrderConditionsBean.setconditionValue(condMap.get(Constants.ConditionValue));
                    salesOrderConditionsBean.setCondCurrency(condMap.get(Constants.CondCurrency));
                    salesOrderConditionsBeanArrayList.add(salesOrderConditionsBean);
                }
                salesOrderItemsBean.setSalesOrderConditionsBeanArrayList(salesOrderConditionsBeanArrayList);


                salesOrderBeanList.add(salesOrderItemsBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return salesOrderBeanList;

    }

    public static ArrayList<SalesOrderConditionsBean> getSOConditionsList(String query) throws OfflineODataStoreException {
        ArrayList<SalesOrderConditionsBean> salesOrderConditionsBeanArrayList = new ArrayList<>();
        if (offlineStore != null) {
            SalesOrderConditionsBean salesOrderConditionsBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        salesOrderConditionsBean = new SalesOrderConditionsBean();
                        property = properties.get(Constants.SONo);
                        salesOrderConditionsBean.setSoNo((String) property.getValue());
                        property = properties.get(Constants.ConditionTypeID);
                        salesOrderConditionsBean.setSoNo((String) property.getValue());
                        property = properties.get(Constants.Name);
                        salesOrderConditionsBean.setName((String) property.getValue());
                        property = properties.get(Constants.Currency);
                        salesOrderConditionsBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.ConditionTypeDesc);
                        salesOrderConditionsBean.setconditionTypeDescription((String) property.getValue());
                        property = properties.get(Constants.CondCurrency);
                        salesOrderConditionsBean.setCondCurrency((String) property.getValue());
                        property = properties.get(Constants.ConditionAmount);
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        salesOrderConditionsBean.setconditionAmount(mStrAmount.toString());
                        property = properties.get(Constants.ConditionValue);
                        BigDecimal value = (BigDecimal) property.getValue();
                        salesOrderConditionsBean.setconditionValue(value.toString());
                        property = properties.get(Constants.ConditionPricingDate);
                        salesOrderConditionsBean.setconditionPricingDate(UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                        salesOrderConditionsBeanArrayList.add(salesOrderConditionsBean);
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return salesOrderConditionsBeanArrayList;

    }

    public static ArrayList<ConfigTypesetTypesBean> getCredLimtSize(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.TypesName);
                        configTypesetTypesBean.setTypesName((String) property.getValue());
                        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static ArrayList<ConfigTypesetTypesBean> getBrandsVal(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypesetTypesBean> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypesetTypesBean configTypesetTypesBean;
        configTypesetTypesBean = new ConfigTypesetTypesBean();
        configTypesetTypesBean.setTypes("");
        configTypesetTypesBean.setTypesName(Constants.All);
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
        String branddesc="";

        String[] configVal[] = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.BrandID);
                        configTypesetTypesBean.setTypes((String) property.getValue());
                        property = properties.get(Constants.BrandDesc);
                        configTypesetTypesBean.setTypesName((String) property.getValue());

                        branddesc=(String) property.getValue();

                        if(!branddesc.equalsIgnoreCase("Blank")) {
                            configTypesetTypesBeanArrayList.add(configTypesetTypesBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return configTypesetTypesBeanArrayList;
    }

    public static HashMap<String, String> getUOMMapVal(String mStrQry) throws OfflineODataStoreException {
        HashMap<String, String> mapVal = new HashMap<>();
        ODataProperty property;
        ODataPropMap properties;
        if (offlineStore != null) {
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.Types);
                    String mStrUOM = (String) property.getValue();
                    mapVal.put(mStrUOM, "");
                }
            }

        }
        return mapVal;
    }

    public static ArrayList<MTPHeaderBean> getMTPCurrentPlane(Context mContext, String qry, String comingFrom, String validFrom, String validTo, boolean isAsmLogin) throws OfflineODataStoreException {
        ArrayList<MTPHeaderBean> weekHeaderLists = new ArrayList<>();
        try {

            Calendar currentCal = Calendar.getInstance();
            currentCal.set(Calendar.DAY_OF_MONTH, 1);
            currentCal.setFirstDayOfWeek(Calendar.SUNDAY);
            if (comingFrom.equalsIgnoreCase(ConstantsUtils.MONTH_NEXT) || comingFrom.equalsIgnoreCase(ConstantsUtils.MTP_SUBORDINATE_NEXT)) {
                currentCal.add(Calendar.MONTH, 1);
            }
            Calendar calendarVFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(validFrom, "yyyy-MM-dd'T'HH:mm:ss");
            Calendar calendarVTo = ConstantsUtils.convertCalenderToDisplayDateFormat(validTo, "yyyy-MM-dd'T'HH:mm:ss");
            validFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVFrom, ConstantsUtils.getDisplayDateFormat(mContext));
            validTo = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVTo, ConstantsUtils.getDisplayDateFormat(mContext));

            currentCal.setMinimalDaysInFirstWeek(1);
            int maxDay = currentCal.getActualMaximum(Calendar.DAY_OF_MONTH);
            MTPHeaderBean weekHeaderList = null;
            int oldWeek = 0;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
            for (int i = 1; i <= maxDay; i++) {
                int week = currentCal.get(Calendar.WEEK_OF_MONTH);
                currentCal.set(Calendar.DAY_OF_MONTH, i);
                if (week != oldWeek) {
                    weekHeaderList = new MTPHeaderBean();
                    weekHeaderList.setWeekTitle("Week " + String.valueOf(week));
                    weekHeaderList.setWeek(week);
                    weekHeaderList.setTitle(true);
                    weekHeaderLists.add(weekHeaderList);
                    oldWeek = week;
                }
                String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
                weekHeaderList = new MTPHeaderBean();
                weekHeaderList.setWeekTitle(String.valueOf(week));
                weekHeaderList.setDay(dayShortName);
                weekHeaderList.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                weekHeaderList.setFullDate(ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy"));
                ArrayList<MTPRoutePlanBean> weekDetailsLists = new ArrayList<>();
                ArrayList<MTPRoutePlanBean> weekDetailsDataValtLists = getMTPListFromDataValt(mContext, currentCal, weekHeaderList, validFrom, validTo, isAsmLogin);
                if (!weekDetailsDataValtLists.isEmpty())
                    weekDetailsLists = weekDetailsDataValtLists;
                else if (!weekHeaderList.isFromDataValt()) {
                    weekDetailsLists = getRouteDetailsList(currentCal, entities, weekHeaderList, isAsmLogin);
                    if (entities.size() == 0) {
                        weekHeaderList.setTestRun("D");
                    }
                }
                weekHeaderList.setMTPRoutePlanBeanArrayList(weekDetailsLists);
                if (!weekDetailsLists.isEmpty()) {
                    addMTPHeaderData(weekHeaderList, weekDetailsLists, isAsmLogin);
                }
                weekHeaderLists.add(weekHeaderList);
            }
            return weekHeaderLists;
        }catch (Exception ex){
            ex.printStackTrace();
            return weekHeaderLists;
        }
    }

    public static ArrayList<MTPHeaderBean> getMTPCurrentPlane(Context mContext, String comingFrom, String validFrom, String validTo, boolean isAsmLogin) throws OfflineODataStoreException {
        ArrayList<MTPHeaderBean> weekHeaderLists = new ArrayList<>();
        try {

            Calendar currentCal = Calendar.getInstance();
            currentCal.set(Calendar.DAY_OF_MONTH, 1);
            currentCal.setFirstDayOfWeek(Calendar.SUNDAY);
            if (comingFrom.equalsIgnoreCase(ConstantsUtils.MONTH_NEXT) || comingFrom.equalsIgnoreCase(ConstantsUtils.MTP_SUBORDINATE_NEXT)) {
                currentCal.add(Calendar.MONTH, 1);
            }
            Calendar calendarVFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(validFrom, "yyyy-MM-dd'T'HH:mm:ss");
            Calendar calendarVTo = ConstantsUtils.convertCalenderToDisplayDateFormat(validTo, "yyyy-MM-dd'T'HH:mm:ss");
            validFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVFrom, ConstantsUtils.getDisplayDateFormat(mContext));
            validTo = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVTo, ConstantsUtils.getDisplayDateFormat(mContext));

            currentCal.setMinimalDaysInFirstWeek(1);
            int maxDay = currentCal.getActualMaximum(Calendar.DAY_OF_MONTH);
            MTPHeaderBean weekHeaderList = null;
            int oldWeek = 0;
            for (int i = 1; i <= maxDay; i++) {
                int week = currentCal.get(Calendar.WEEK_OF_MONTH);
                currentCal.set(Calendar.DAY_OF_MONTH, i);
                if (week != oldWeek) {
                    weekHeaderList = new MTPHeaderBean();
                    weekHeaderList.setWeekTitle("Week " + String.valueOf(week));
                    weekHeaderList.setWeek(week);
                    weekHeaderList.setTitle(true);
                    weekHeaderLists.add(weekHeaderList);
                    oldWeek = week;
                }
                String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
                weekHeaderList = new MTPHeaderBean();
                weekHeaderList.setWeekTitle(String.valueOf(week));
                weekHeaderList.setDay(dayShortName);
                weekHeaderList.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                weekHeaderList.setFullDate(ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy"));
                ArrayList<MTPRoutePlanBean> weekDetailsLists = new ArrayList<>();
                weekHeaderList.setTestRun("D");
                weekHeaderList.setMTPRoutePlanBeanArrayList(weekDetailsLists);
                if (!weekDetailsLists.isEmpty()) {
                    addMTPHeaderData(weekHeaderList, weekDetailsLists, isAsmLogin);
                }
                weekHeaderLists.add(weekHeaderList);
            }
            return weekHeaderLists;
        }catch (Exception ex){
            ex.printStackTrace();
            return weekHeaderLists;
        }
    }

    public static ArrayList<MTPHeaderBean> getSPMTPCurrentPlan(Context mContext, List<ODataEntity> entities, String comingFrom, String validFrom, String validTo, boolean isAsmLogin) throws OfflineODataStoreException {
        ArrayList<MTPHeaderBean> weekHeaderLists = new ArrayList<>();
        try {

            Calendar currentCal = Calendar.getInstance();
            currentCal.set(Calendar.DAY_OF_MONTH, 1);
            currentCal.setFirstDayOfWeek(Calendar.SUNDAY);
            if (comingFrom.equalsIgnoreCase(ConstantsUtils.MONTH_NEXT) || comingFrom.equalsIgnoreCase(ConstantsUtils.MTP_SUBORDINATE_NEXT)) {
                currentCal.add(Calendar.MONTH, 1);
            }
            Calendar calendarVFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(validFrom, "yyyy-MM-dd'T'HH:mm:ss");
            Calendar calendarVTo = ConstantsUtils.convertCalenderToDisplayDateFormat(validTo, "yyyy-MM-dd'T'HH:mm:ss");
            validFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVFrom, ConstantsUtils.getDisplayDateFormat(mContext));
            validTo = ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVTo, ConstantsUtils.getDisplayDateFormat(mContext));

            currentCal.setMinimalDaysInFirstWeek(1);
            int maxDay = currentCal.getActualMaximum(Calendar.DAY_OF_MONTH);
            MTPHeaderBean weekHeaderList = null;
            int oldWeek = 0;
            for (int i = 1; i <= maxDay; i++) {
                int week = currentCal.get(Calendar.WEEK_OF_MONTH);
                currentCal.set(Calendar.DAY_OF_MONTH, i);
                if (week != oldWeek) {
                    weekHeaderList = new MTPHeaderBean();
                    weekHeaderList.setWeekTitle("Week " + String.valueOf(week));
                    weekHeaderList.setWeek(week);
                    weekHeaderList.setTitle(true);
                    weekHeaderLists.add(weekHeaderList);
                    oldWeek = week;
                }
                String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
                weekHeaderList = new MTPHeaderBean();
                weekHeaderList.setWeekTitle(String.valueOf(week));
                weekHeaderList.setDay(dayShortName);
                weekHeaderList.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                weekHeaderList.setFullDate(ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy"));
                ArrayList<MTPRoutePlanBean> weekDetailsLists = new ArrayList<>();
                ArrayList<MTPRoutePlanBean> weekDetailsDataValtLists = getMTPListFromDataValt(mContext, currentCal, weekHeaderList, validFrom, validTo, isAsmLogin);
                if (!weekDetailsDataValtLists.isEmpty())
                    weekDetailsLists = weekDetailsDataValtLists;
                else if (!weekHeaderList.isFromDataValt()) {
                    weekDetailsLists = getRouteDetailsList(currentCal, entities, weekHeaderList, isAsmLogin);
                    if (entities.size() == 0) {
                        weekHeaderList.setTestRun("D");
                    }
                }
                weekHeaderList.setMTPRoutePlanBeanArrayList(weekDetailsLists);
                if (!weekDetailsLists.isEmpty()) {
                    addMTPHeaderData(weekHeaderList, weekDetailsLists, isAsmLogin);
                }
                weekHeaderLists.add(weekHeaderList);
            }
            return weekHeaderLists;
        }catch (Exception ex){
            ex.printStackTrace();
            return weekHeaderLists;
        }
    }


    public static void addMTPHeaderData(MTPHeaderBean weekHeaderList, ArrayList<MTPRoutePlanBean> weekDetailsLists, boolean isAsmLogin) {
        if (weekDetailsLists.size() == 1) {
            MTPRoutePlanBean weekDetailsList = weekDetailsLists.get(0);
            if (!TextUtils.isEmpty(weekDetailsList.getSalesDistrict())) {
                weekHeaderList.setSalesDistrict(weekDetailsList.getSalesDistrict());
                weekHeaderList.setSalesDistrictDisc(weekDetailsList.getSalesDistrictDesc());
            } else {
                weekHeaderList.setCustomerName(weekDetailsList.getCustomerName());
                weekHeaderList.setCustomerNo(weekDetailsList.getCustomerNo());
            }
            weekHeaderList.setActivityDec(weekDetailsList.getActivityDec());
            weekHeaderList.setActivityID(weekDetailsList.getActivityId());
            weekHeaderList.setRemarks(weekDetailsList.getRemarks());
            weekHeaderList.setRouteSchGUID(weekDetailsList.getRouteSchGUID());
        } else {
            MTPRoutePlanBean weekDetailsList = weekDetailsLists.get(0);
            if (!TextUtils.isEmpty(weekDetailsList.getSalesDistrict())) {
                weekHeaderList.setSalesDistrict(weekDetailsList.getSalesDistrict());
                weekHeaderList.setSalesDistrictDisc(weekDetailsList.getSalesDistrictDesc() + "...");
            } else if (!TextUtils.isEmpty(weekDetailsList.getCustomerNo())) {
                weekHeaderList.setCustomerName(weekDetailsList.getCustomerName() + "...");
                weekHeaderList.setCustomerNo(weekDetailsList.getCustomerNo());
            }
            weekHeaderList.setActivityDec(weekDetailsList.getActivityDec());
            weekHeaderList.setActivityID(weekDetailsList.getActivityId());
            weekHeaderList.setRemarks(weekDetailsList.getRemarks());
            weekHeaderList.setRouteSchGUID(weekDetailsList.getRouteSchGUID());
        }
    }

    public static ArrayList<MTPRoutePlanBean> getMTPListFromDataValt(Context context, Calendar currentCal, MTPHeaderBean weekHeaderList, String validFrom, String validTo, boolean isAsmLogin) throws OfflineODataStoreException {
//        MTPRoutePlanBean routePlanBean;
        ArrayList<MTPRoutePlanBean> routePlanDetailsList = new ArrayList<>();
        Set<String> set = new HashSet<>();
        SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
        String rollType = sharedPreferences.getString(Constants.USERROLE, "");

        set = sharedPreferences.getStringSet(Constants.MTPDataValt, null);
        String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
        if (set != null && !set.isEmpty()) {
            Iterator itr = set.iterator();
            while (itr.hasNext()) {
                String store = null, deviceNo = "";
                try {
                    deviceNo = itr.next().toString();
                    store = ConstantsUtils.getFromDataVault(deviceNo,context);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                try {
                    JSONObject fetchJsonHeaderObject = new JSONObject(store);
                    Calendar calendarVFrom = ConstantsUtils.convertCalenderToDisplayDateFormat(fetchJsonHeaderObject.optString(Constants.ValidFrom), "yyyy-MM-dd'T'HH:mm:ss");
                    Calendar calendarVTo = ConstantsUtils.convertCalenderToDisplayDateFormat(fetchJsonHeaderObject.optString(Constants.ValidTo), "yyyy-MM-dd'T'HH:mm:ss");

                    if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.RouteSchedules) && ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVFrom, ConstantsUtils.getDisplayDateFormat(context)).equalsIgnoreCase(validFrom) && ConstantsUtils.convertCalenderToDisplayDateFormat(calendarVTo, ConstantsUtils.getDisplayDateFormat(context)).equalsIgnoreCase(validTo)) {
//                        routePlanBean = new MTPRoutePlanBean();
//                        routePlanBean.setDeviceNo(deviceNo);
                        weekHeaderList.setDeviceNo(deviceNo);
                        weekHeaderList.setRouteSchGUID(fetchJsonHeaderObject.optString(Constants.RouteSchGUID));
                        weekHeaderList.setApprovalStatus(fetchJsonHeaderObject.optString(Constants.ApprovalStatus));
                        weekHeaderList.setApprovalStatusDs(fetchJsonHeaderObject.optString(Constants.ApprovalStatusDs));
                        weekHeaderList.setRoutId(fetchJsonHeaderObject.optString(Constants.RoutId));
                        weekHeaderList.setCreatedBy(fetchJsonHeaderObject.optString(Constants.CreatedBy));
                        Calendar createdOnCal = ConstantsUtils.convertCalenderToDisplayDateFormat(fetchJsonHeaderObject.optString(Constants.CreatedOn), "yyyy-MM-dd'T'HH:mm:ss");
                        weekHeaderList.setCreatedOn(ConstantsUtils.convertCalenderToDisplayDateFormat(createdOnCal, ConstantsUtils.getDisplayDateFormat(context)));
                        weekHeaderList.setIsUpdate(fetchJsonHeaderObject.optString(Constants.IS_UPDATE));
                        weekHeaderList.setTestRun(fetchJsonHeaderObject.optString(Constants.Testrun));
                        weekHeaderList.setFromDataValt(true);

                        String itemsString = fetchJsonHeaderObject.getString(Constants.RouteSchedulePlans);
                        ArrayList<HashMap<String, String>> arrtable = UtilConstants.convertToArrayListMap(itemsString);
                        for (int incrementVal = 0; incrementVal < arrtable.size(); incrementVal++) {
                            HashMap<String, String> singleRow = arrtable.get(incrementVal);
                            MTPRoutePlanBean mtpRoutePlanBean = new MTPRoutePlanBean();
                            mtpRoutePlanBean.setRouteSchGUID(fetchJsonHeaderObject.optString(Constants.RouteSchGUID));
                            Calendar calendar = ConstantsUtils.convertCalenderToDisplayDateFormat(singleRow.get(Constants.VisitDate), "yyyy-MM-dd'T'HH:mm:ss");
                            mtpRoutePlanBean.setVisitDate(ConstantsUtils.convertCalenderToDisplayDateFormat(calendar, ConstantsUtils.getDisplayDateFormat(context)));
                            if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(mtpRoutePlanBean.getVisitDate())) {
                                mtpRoutePlanBean.setRouteSchPlanGUID(singleRow.get(Constants.RouteSchPlanGUID));
                                if (!isAsmLogin && !rollType.equalsIgnoreCase("Z3")) {
                                    mtpRoutePlanBean.setCustomerNo(singleRow.get(Constants.VisitCPGUID));
                                    mtpRoutePlanBean.setCustomerName(singleRow.get(Constants.VisitCPName));
                                    mtpRoutePlanBean.setAddress("");
                                    mtpRoutePlanBean.setPostalCode("");
                                    mtpRoutePlanBean.setMobile1("");
                                } else {
                                    mtpRoutePlanBean.setSalesDistrict(singleRow.get(Constants.SalesDistrict));
                                    mtpRoutePlanBean.setSalesDistrictDesc(singleRow.get(Constants.SalesDistrictDesc));
                                }
                                mtpRoutePlanBean.setDay(dayShortName);
                                mtpRoutePlanBean.setRemarks(singleRow.get(Constants.Remarks));
                                mtpRoutePlanBean.setActivityDec(singleRow.get(Constants.ActivityDesc));
                                mtpRoutePlanBean.setActivityId(singleRow.get(Constants.ActivityID));
                                mtpRoutePlanBean.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                                routePlanDetailsList.add(mtpRoutePlanBean);
                            }
                        }
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return routePlanDetailsList;

    }

    private static ArrayList<MTPRoutePlanBean> getRouteDetailsList(Calendar currentCal, List<ODataEntity> entities, MTPHeaderBean weekHeaderList, boolean isAsmLogin) throws OfflineODataStoreException {
        ArrayList<MTPRoutePlanBean> mtpRoutePlanList = new ArrayList<>();
        try {
            List<ODataEntity> tempList = new ArrayList<>();
            ODataPropMap propertiesHeader;
            ODataPropMap propertiesItem;
            ODataProperty property;
            String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
            if (entities!=null&&!entities.isEmpty()) {
                for (ODataEntity oDataEntity : entities) {
                    propertiesHeader = oDataEntity.getProperties();
                    property = propertiesHeader.get(Constants.RouteSchGUID);
                    String routeSchemGuid = "";
                    try {
                        ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                        routeSchemGuid = mInvoiceGUID.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    property = propertiesHeader.get(Constants.SalesPersonID);
                    String salesPersonID = "";
                    try {
                        ODataGuid mSPGUID = (ODataGuid) property.getValue();
                        salesPersonID = mSPGUID.guidAsString36().toUpperCase();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (weekHeaderList != null) {
                        weekHeaderList.setRouteSchGUID(routeSchemGuid);
                        weekHeaderList.setSalesPersonGuid(salesPersonID);
                        property = propertiesHeader.get(Constants.ApprovalStatus);
                        weekHeaderList.setApprovalStatus(property.getValue().toString());
                        property = propertiesHeader.get(Constants.ApprovalStatusDs);
                        weekHeaderList.setApprovalStatusDs(property.getValue().toString());
                        property = propertiesHeader.get(Constants.RoutId);
                        if (property != null)
                            weekHeaderList.setRoutId(property.getValue().toString());
                        property = propertiesHeader.get(Constants.CreatedBy);
                        if (property != null)
                            weekHeaderList.setCreatedBy(property.getValue().toString());
                        property = propertiesHeader.get(Constants.CreatedOn);
                        if (property != null)
                            weekHeaderList.setCreatedOn(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                    /*property = propertiesHeader.get(Constants.CreatedAt);
                    if (property != null)
                        weekHeaderList.setCreatedAt(property.getValue().toString());*/
                        weekHeaderList.setIsUpdate("X");
                        if (TextUtils.isEmpty(weekHeaderList.getApprovalStatus())) {
                            weekHeaderList.setTestRun("D");
                        }
                    }

                    List<ODataEntity> entitiesItem = UtilOfflineManager.getEntities(OfflineManager.offlineStore, Constants.RouteSchedulePlans + "?$filter=RouteSchGUID eq guid'" + routeSchemGuid + "'");
                    for (ODataEntity oDataEntityItem : entitiesItem) {
                        MTPRoutePlanBean mtpRoutePlanBean = new MTPRoutePlanBean();
                        mtpRoutePlanBean.setRouteSchGUID(routeSchemGuid);
                        propertiesItem = oDataEntityItem.getProperties();
                        property = propertiesItem.get(Constants.VisitDate);
                        if (property != null) {
                            mtpRoutePlanBean.setVisitDate(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                            if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(mtpRoutePlanBean.getVisitDate())) {
                                mtpRoutePlanBean.setDay(dayShortName);
                                mtpRoutePlanBean.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                                mtpRoutePlanList.add(ConstantsUtils.parseMTPItems(mtpRoutePlanBean, propertiesItem, isAsmLogin));

                            }
                        }
    /*
                    if (property != null) {

                        mtpRoutePlanBean.setVisitDate(ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue()));
                        if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(mtpRoutePlanBean.getVisitDate())) {
                            property = properties.get(Constants.CustomerNo);
                            mtpRoutePlanBean.setCustomerNo(property.getValue().toString());
    //                    property = properties.get(Constants.CustomerName);
                            if (!TextUtils.isEmpty(mtpRoutePlanBean.getCustomerNo())) {
                                ArrayList<CustomerBean> customerList = getCustomerList(Constants.Customers + "?$filter=" + Constants.CustomerNo + " eq '" + mtpRoutePlanBean.getCustomerNo() + "' ");
                                if (!customerList.isEmpty()) {
                                    CustomerBean customerBean = customerList.get(0);
                                    mtpRoutePlanBean.setCustomerName(customerBean.getCustomerName());
                                    mtpRoutePlanBean.setAddress(customerBean.getAddress1());
                                    mtpRoutePlanBean.setPostalCode(customerBean.getPostalCode());
                                    mtpRoutePlanBean.setMobile1(customerBean.getMobile1());
                                    mtpRoutePlanBean.setDay(dayShortName);
                                    mtpRoutePlanBean.setRemarks("going for field work");
                                    mtpRoutePlanBean.setActivityDec("Field work");
                                    mtpRoutePlanBean.setDate(String.valueOf(currentCal.get(Calendar.DAY_OF_MONTH)));
                                }
                            }
                            mtpRoutePlanList.add(mtpRoutePlanBean);
                            tempList.add(oDataEntity);
                        }
                    }*/
                    }
                }
            }
            if (!tempList.isEmpty())
                entities.removeAll(tempList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mtpRoutePlanList;
    }



    public static String getValidFromAndToFromEntity(String validFrom,String validTo, List<ODataEntity> entities) throws OfflineODataStoreException {
    //    List<ODataEntity> tempList = new ArrayList<>();
        String guidRsch="";
        try {
          //  List<ODataEntity> tempList = new ArrayList<>();


            ODataPropMap propertiesHeader;
            ODataPropMap propertiesItem;
            ODataProperty property;
            if (entities!=null&&!entities.isEmpty()) {
                for (ODataEntity oDataEntity : entities) {
                    propertiesHeader = oDataEntity.getProperties();
                    String validFromDate="";
                    String validToDate = "";
                    property = propertiesHeader.get(Constants.ValidFrom);
                    if (property != null) {
                        try {
                             validFromDate = ConstantsUtils.convertCalenderToDisplayDateFormatNew((GregorianCalendar) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    property = propertiesHeader.get(Constants.ValidTo);
                    if (property != null) {
                        try {
                             validToDate = ConstantsUtils.convertCalenderToDisplayDateFormatNew((GregorianCalendar) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if(validFrom.contains(validFromDate) && validTo.contains(validToDate)){
                        //tempList.add(oDataEntity);
                        property = propertiesHeader.get(Constants.RouteSchGUID);
                        ODataGuid campaignGuid = (ODataGuid) property.getValue();
                        guidRsch = campaignGuid.guidAsString36().toUpperCase();
                        break;
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return guidRsch;
    }

    public static String getValidFromAndToFromEntity(String validFrom,String validTo, JSONArray jsonArray) throws OfflineODataStoreException {
        //    List<ODataEntity> tempList = new ArrayList<>();
        String guidRsch="";
        try {
            //  List<ODataEntity> tempList = new ArrayList<>();


            if (jsonArray!=null) {
                for (int i=0;i<jsonArray.length();i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    String validFromDate="";
                    String validToDate = "";
                    try {
                        validFromDate = ConstantsUtils.getJSONDate(jsonObject.optString(Constants.ValidFrom));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    try {
                        validToDate = ConstantsUtils.getJSONDate(jsonObject.optString(Constants.ValidTo));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    if(validFrom.contains(validFromDate) && validTo.contains(validToDate)){
                        guidRsch = jsonObject.optString(Constants.RouteSchGUID);
                        break;
                    }

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return guidRsch;
    }

    public static ArrayList<MTPRoutePlanBean> getMTPTodayPlane(String qry, boolean isAsmLogin) throws OfflineODataStoreException {
        Calendar currentCal = Calendar.getInstance();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        return getRouteDetailsList(currentCal, entities, null, isAsmLogin);
    }

    public static Set<String> getUniqueOutVisitFromVisit(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        Set setCPList = new HashSet();
        if (offlineStore != null) {
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return setCPList;
    }

    public static ArrayList<String> getUniqueOutVisitFromVisitTemp(String visitQry) {
        ArrayList<CustomerBean> alRetBean = new ArrayList<>();
        ArrayList<String> setCPList = new ArrayList<>();
        if (offlineStore != null) {
            CustomerBean customerBean = null;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, visitQry);
                if (entities != null && entities.size() > 0) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();

                        property = properties.get(Constants.CPNo);
                        customerBean = new CustomerBean((String) property.getValue());
                        customerBean.setCPNo((String) property.getValue());

                        property = properties.get(Constants.CPGUID);
                        try {
                            customerBean.setCPGUID(Constants.convertStrGUID32to36((String) property.getValue()));
                            customerBean.setCpGuidStringFormat((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        if (!setCPList.contains((String) property.getValue())) {
                            setCPList.add((String) property.getValue());
                        }
                    }
                }
            } catch (OfflineODataStoreException cpex) {
                cpex.printStackTrace();
            }
        }

        return setCPList;
    }

    public static String getCustListQryByBeatCustomers(String retListQry) throws OfflineODataStoreException {

        String mCPGuid = "", cpguidQry = "";

        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SequenceNo);
                        String mSeqNo = (String) property.getValue();

                        property = properties.get(Constants.VisitCPGUID);
                        mCPGuid = Constants.convertStrGUID32to36((String) property.getValue()).toUpperCase();
                        if (cpguidQry.length() == 0)
                            cpguidQry += " '" + mCPGuid + "'";
                        else
                            cpguidQry += " or " + Constants.CustomerNo + " eq '" + mCPGuid + "'";

                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return cpguidQry;

    }

    public static ArrayList<CustomerBean> getTodayBeatCustomers(String cpguidQry) throws OfflineODataStoreException {
        ArrayList<CustomerBean> alRetailerList = new ArrayList<>();
        if (!cpguidQry.equalsIgnoreCase("")) {
            alRetailerList = getCustomerList(Constants.Customers + "?$filter=" +
                    Constants.CustomerNo + " eq '" + cpguidQry + "'");
        }

        return alRetailerList;
    }

    public static ArrayList<CustomerBean> getTodayRoutesCustomers(String qry) throws OfflineODataStoreException {

        ArrayList<CustomerBean> routeList = new ArrayList<CustomerBean>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the routes from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    //int i = 0;
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.RschGuid);
                        ODataGuid RschGuid = null;
                        RschGuid = (ODataGuid) property.getValue();
//                        if (!RschGuid.guidAsString36().toUpperCase().equals("00000000-0000-0000-0000-000000000000")) {
                        CustomerBean routeBean = new CustomerBean("");
                        property = properties.get(Constants.RoutSchScope);
                        routeBean.setRoutSchScope((String) property.getValue());
                        property = properties.get(Constants.RoutePlanKey);
                        routeBean.setRoutePlanKey((String) property.getValue());

                        property = properties.get(Constants.CustomerNo);
                        routeBean.setCPNo((String) property.getValue());
                        Constants.alCustomers.add((String) property.getValue());
                        routeList.add(routeBean);
                    }
//                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);

            }
        }
        return routeList;
    }

    public static String makeSOsQry(String sosQry, String guidColumn) throws OfflineODataStoreException {

        String sssosListQry = "";
        ArrayList<InvoiceHistoryBean> sssoArrayList = new ArrayList<>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            InvoiceHistoryBean invoiceBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, sosQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    invoiceBean = new InvoiceHistoryBean();
                    properties = entity.getProperties();
                    property = properties.get(guidColumn);
                    try {
                        String mStrVal = (String) property.getValue();
                        invoiceBean.setInvoiceGuid(mStrVal);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    sssoArrayList.add(invoiceBean);

                }
            }
        }


        if (sssoArrayList != null && sssoArrayList.size() > 0) {
            for (int incVal = 0; incVal < sssoArrayList.size(); incVal++) {
                if (incVal == 0 && incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";

                } else if (incVal == 0) {
                    sssosListQry = sssosListQry
                            + "(" + guidColumn + "%20eq%20'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";

                } else if (incVal == sssoArrayList.size() - 1) {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "')";
                } else {
                    sssosListQry = sssosListQry
                            + "%20or%20" + guidColumn + "%20eq%20'"
                            + sssoArrayList.get(incVal).getInvoiceGuid().toUpperCase() + "'";
                }
            }
        } else {
            sssosListQry = "";
        }

        return sssosListQry;
    }

    public static String getCountTLSDFromDatabase(String ssoItemListQry) throws OfflineODataStoreException {
        int countOfTLSd = 0;
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, ssoItemListQry);
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            countOfTLSd = entities.size();
        }
        return countOfTLSd + "";
    }

    public static List<AttendanceConfigTypesetTypesBean> getAttendanceConfig(String qry) throws OfflineODataStoreException {
        List<AttendanceConfigTypesetTypesBean> list = new ArrayList<>();
        AttendanceConfigTypesetTypesBean configVal;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                  /*  configVal = new String[3][entities.size() + 1];
                    configVal[0][0] = Constants.str_00;
                    configVal[1][0] = Constants.None;
                    configVal[2][0] = Constants.X;*/
                    configVal = new AttendanceConfigTypesetTypesBean();
                    configVal.setTypes("");
                    configVal.setTypeName(Constants.None);
                    list.add(configVal);
                    for (ODataEntity entity : entities) {
                        configVal = new AttendanceConfigTypesetTypesBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.ID);
                        String propIDVal = (String) property.getValue();
                        configVal.setTypes(propIDVal);
                        property = properties.get(Constants.DESCRIPTION);
                        configVal.setTypeName(property.getValue().toString());
                        String mStrTypeVal = Constants.getConfigTypeIndicator(Constants.ConfigTypsetTypeValues,
                                Constants.TypeValue, Constants.Types, propIDVal, Constants.Typeset, Constants.PROP_ATTTYP);
                        configVal.setMandatory(mStrTypeVal);
                        list.add(configVal);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return list;
    }


    private static ArrayList<WeekDetailsList> getCollectionPlanItemDetails(Calendar currentCal, List<ODataEntity> entities, String comingFrom) {
        ArrayList<WeekDetailsList> weekDetailsListArrayList = new ArrayList<>();
        ODataPropMap properties;
        ODataProperty property;
        try {
            if(entities!=null && !entities.isEmpty()) {
                for (ODataEntity oDataEntity : entities) {
                    properties = oDataEntity.getProperties();
                    if (comingFrom.equals(ConstantsUtils.MONTH_TODAY)) {
                        if (getPayload(properties, currentCal) != null)
                            weekDetailsListArrayList.add(getPayload(properties, currentCal));
                    } else {
                        property = properties.get(Constants.CollectionPlanGUID);
                        ODataGuid campaignGuid = (ODataGuid) property.getValue();
                        String collePlanGUID32 = campaignGuid.guidAsString36().toUpperCase();
                        String qry = Constants.CollectionPlanItem + "?$filter=" + Constants.CollectionPlanGUID + " eq guid'" + collePlanGUID32 + "'";
                        try {
                            List<ODataEntity> itemEntity = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                            for (ODataEntity itemODataEntity : itemEntity) {
                                properties = itemODataEntity.getProperties();
                                if (getPayload(properties, currentCal) != null)
                                    weekDetailsListArrayList.add(getPayload(properties, currentCal));
                            }
                        } catch (OfflineODataStoreException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } catch (Throwable e) {
            e.printStackTrace();
        }
        return weekDetailsListArrayList;
    }

    private static WeekDetailsList getPayload(ODataPropMap properties, Calendar currentCal) {
        ODataProperty property;
        property = properties.get(Constants.COllectionPlanDate);
        BigDecimal totalAmount = new BigDecimal("0");
        if (property != null) {
            String date = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
            if (ConstantsUtils.convertCalenderToDisplayDateFormat(currentCal, "dd-MMM-yyyy").equalsIgnoreCase(date)) {
                String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
                WeekDetailsList weekDetailsList = new WeekDetailsList();
                weekDetailsList.setDay(dayShortName);
                weekDetailsList.setCurrentDate(ConstantsUtils.getDayDate());

                weekDetailsList.setDate(date);
                property = properties.get(Constants.COllectionPlanDate);
                if (property != null) {
                    weekDetailsList.setCollectionPlanDate(property.getValue().toString());
                }
                property = properties.get(Constants.ItemNo);
                if (property != null) {
                    weekDetailsList.setItemNo(property.getValue().toString());
                }
                property = properties.get(Constants.PlannedValue);
                if (property != null) {
                    BigDecimal mStrAmount = (BigDecimal) property.getValue();
                    weekDetailsList.setPlannedValue(mStrAmount.toString());
                }
                if (weekDetailsList.getPlannedValue() != null && !"".equals(weekDetailsList.getPlannedValue())) {
                    totalAmount = totalAmount.add(new BigDecimal(weekDetailsList.getPlannedValue()));
                }
                weekDetailsList.setTotalAmount(totalAmount.toString());
                property = properties.get(Constants.AchievedValue);
                if (property != null) {
                    BigDecimal mStrAmount = (BigDecimal) property.getValue();
                    weekDetailsList.setAchievedValue(mStrAmount.toString());
                }

                property = properties.get(Constants.SPName);
                if (property != null) {
                    weekDetailsList.setSPName(property.getValue().toString());
                }

                property = properties.get(Constants.Currency);
                if (property != null) {
                    weekDetailsList.setCurrency(property.getValue().toString());
                }

                property = properties.get(Constants.CrdtCtrlArea);
                if (property != null) {
                    weekDetailsList.setCrdtCtrlArea(property.getValue().toString());
                }

                property = properties.get(Constants.CrdtCtrlAreaDs);
                if (property != null) {
                    weekDetailsList.setCrdtCtrlAreaDs(property.getValue().toString());
                }

                property = properties.get(Constants.CPName);
                if (property != null) {
                    weekDetailsList.setCPName(property.getValue().toString());
                }

                property = properties.get(Constants.REMARKS);
                if (property != null) {
                    weekDetailsList.setRemarks(property.getValue().toString());
                }
                return weekDetailsList;
            }
        }
        return null;
    }


    public static ArrayList<WeekHeaderList> getTodayPlane(String qry) throws OfflineODataStoreException {
        Calendar currentCal = Calendar.getInstance();
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
        String dayShortName = currentCal.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());
        ArrayList<WeekHeaderList> weekHeaderLists = new ArrayList<>();
        WeekHeaderList weekHeaderList = new WeekHeaderList();
        weekHeaderList.setDay(dayShortName);
        weekHeaderList.setDate(ConstantsUtils.getDayDate());
        weekHeaderList.setTotalAmount("0");
        ArrayList<WeekDetailsList> weekDetailsListArrayList = getCollectionPlanItemDetails(currentCal, entities, ConstantsUtils.MONTH_TODAY);
        weekHeaderList.setWeekDetailsLists(weekDetailsListArrayList);
        BigDecimal mStrAmount = new BigDecimal(weekHeaderList.getTotalAmount());
        for (int i = 0; i < weekDetailsListArrayList.size(); i++) {
            weekHeaderList.setCurrency(weekDetailsListArrayList.get(0).getCurrency());
            if (!"".equals(weekDetailsListArrayList.get(i).getPlannedValue())) {
                mStrAmount = mStrAmount.add(new BigDecimal(weekDetailsListArrayList.get(i).getPlannedValue()));
            }
        }
        weekHeaderList.setTotalAmount(mStrAmount.toString());
        weekHeaderLists.add(weekHeaderList);
        return weekHeaderLists;
    }

    public static ArrayList<CustomerBean> getCustomerSalesAreaList(String retListQry, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        ArrayList<String> tempList = new ArrayList<>();
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, retListQry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.SalesDistrictID);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        if (!tempList.contains(retBean.getCustomerId())) {
                            boolean isCustomerNoPresent = checkSalesDistPresent(retBean, mtpRoutePlanBeanArrayList);
                            property = properties.get(Constants.SalesDistrictDesc);
                            retBean.setCustomerName((String) property.getValue());
                            retailerList.add(retBean);
                            tempList.add(retBean.getCustomerId());
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + retListQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkSalesDistPresent(CustomerBean customerBean, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (MTPRoutePlanBean mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getSalesDistrict())) {
                customerBean.setChecked(true);
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getRouteSchPlanGUID());
                isGetList = true;
                break;
            }
            pos++;
        }
        if (isGetList) {
            mtpRoutePlanBeanArrayList.remove(pos);
        }
        return isGetList;
    }

    public static ArrayList<CustomerBean> getCustomerList(String retListQry, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        if (property != null) {
                            retBean = new CustomerBean((String) property.getValue());
                            retBean.setCustomerId((String) property.getValue());
                            boolean isCustomerNoPresent = checkCustomerNoPresent(retBean, mtpRoutePlanBeanArrayList);
                            property = properties.get(Constants.Name);
                            retBean.setCustomerName((String) property.getValue());
                            property = properties.get(Constants.Address1);
                            retBean.setAddress1((String) property.getValue());
                            property = properties.get(Constants.Address2);
                            retBean.setAddress2((String) property.getValue());
                            property = properties.get(Constants.Address3);
                            retBean.setAddress3((String) property.getValue());
                            property = properties.get(Constants.District);
                            retBean.setDistrict((String) property.getValue());
                            property = properties.get(Constants.City);
                            retBean.setCity((String) property.getValue());
                            property = properties.get(Constants.PostalCode);
                            retBean.setPostalCode((String) property.getValue());
                            try {
                                property = properties.get(Constants.MobileNo);
                                retBean.setMobile1((String) property.getValue());
                            } catch (Exception e) {
                                e.printStackTrace();
                                property = properties.get(Constants.Mobile1);
                                retBean.setMobile1((String) property.getValue());
                            }
                            property = properties.get(Constants.Currency);
                            retBean.setCurrency((String) property.getValue());
                            retailerList.add(retBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkCustomerNoPresent(CustomerBean customerBean, ArrayList<MTPRoutePlanBean> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (MTPRoutePlanBean mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getCustomerNo())) {
                customerBean.setChecked(true);
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getRouteSchPlanGUID());
                isGetList = true;
                break;
            }
            pos++;
        }
        if (isGetList) {
            mtpRoutePlanBeanArrayList.remove(pos);
        }
        return isGetList;
    }

    public static ArrayList<Config> getSalesDistrict() throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                String resourcePath = Constants.UserProfileAuthSet + "?$filter=Application eq 'PD' and AuthOrgTypeID eq '000025' ";
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(resourcePath);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    public static ArrayList<Config> getSalesDistrict(String qry) throws OfflineODataStoreException {

        ArrayList<Config> authList = new ArrayList<Config>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            Config authBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the AUTHORIZATIONS from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        authBean = new Config();
                        properties = entity.getProperties();
                        property = properties.get(Constants.AuthOrgValue);
                        authBean.setFeature((String) property.getValue());
                        authList.add(authBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return authList;

    }

    public static ArrayList<Config> getConfig() {
        try {
            return OfflineManager.getSalesDistrict(Constants.UserProfileAuthSet + "?$filter=Application eq 'PD' and AuthOrgTypeID eq '000014'");
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
    }

    public static boolean isASMUser() {
        String salesDist = "";
        ArrayList<Config> configs = getConfig(); //000014
        if (!configs.isEmpty()) {
            salesDist = configs.get(0).getFeature();
            if (!TextUtils.isEmpty(salesDist) && salesDist.equalsIgnoreCase("Z1")) {
//                if(!TextUtils.isEmpty(salesDist) && salesDist.equalsIgnoreCase("00")){
                return true;
            }
        }

        return false;
    }

    public static ArrayList<CustomerBean> getCustomerListRTGS(String retListQry, ArrayList<WeekDetailsList> mtpRoutePlanBeanArrayList) throws OfflineODataStoreException {

        ArrayList<CustomerBean> retailerList = new ArrayList<CustomerBean>();
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(retListQry);
                //Send a request to read the ChannelPartners from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        retBean = new CustomerBean((String) property.getValue());
                        retBean.setCustomerId((String) property.getValue());
                        boolean isCustomerNoPresent = checkCustomerNoPresentRtgs(retBean, mtpRoutePlanBeanArrayList);
                        property = properties.get(Constants.Name);
                        retBean.setCustomerName((String) property.getValue());

//                        property = properties.get(Constants.Name);
                        retBean.setCustomerType("01");

                        property = properties.get(Constants.Address1);
                        retBean.setAddress1((String) property.getValue());
                        property = properties.get(Constants.Address2);
                        retBean.setAddress2((String) property.getValue());
                        property = properties.get(Constants.Address3);
                        retBean.setAddress3((String) property.getValue());
                        property = properties.get(Constants.District);
                        retBean.setDistrict((String) property.getValue());
                        property = properties.get(Constants.City);
                        retBean.setCity((String) property.getValue());
                        property = properties.get(Constants.PostalCode);
                        retBean.setPostalCode((String) property.getValue());
                        try {
                            property = properties.get(Constants.MobileNo);
                            retBean.setMobile1((String) property.getValue());
                        } catch (Exception e) {
                            e.printStackTrace();
                            property = properties.get(Constants.Mobile1);
                            retBean.setMobile1((String) property.getValue());
                        }
                        property = properties.get(Constants.Currency);
                        retBean.setCurrency((String) property.getValue());
                        retailerList.add(retBean);
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return retailerList;

    }

    private static boolean checkCustomerNoPresentRtgs(CustomerBean customerBean, ArrayList<WeekDetailsList> mtpRoutePlanBeanArrayList) {
        int pos = 0;
        boolean isGetList = false;
        for (WeekDetailsList mtpRoutePlanBean : mtpRoutePlanBeanArrayList) {
            if (customerBean.getCustomerId().equalsIgnoreCase(mtpRoutePlanBean.getcPNo())) {
                customerBean.setChecked(true);
                try {
                    customerBean.setAmount(mtpRoutePlanBean.getPlannedValue());
                } catch (Exception e) {
                    customerBean.setAmount("");
                    e.printStackTrace();
                }
                try {
                    customerBean.setAmount1(mtpRoutePlanBean.getPlannedValue2());
                } catch (Exception e) {
                    customerBean.setAmount1("");
                    e.printStackTrace();
                }
                try {
                    customerBean.setActualAmount(mtpRoutePlanBean.getAchievedValue());
                } catch (Exception e) {
                    customerBean.setActualAmount("0.00");
                    e.printStackTrace();
                }
                try {
                    customerBean.setCurrency(mtpRoutePlanBean.getCurrency());
                } catch (Exception e) {
                    customerBean.setCurrency("INR");
                    e.printStackTrace();
                }
                try {
                    customerBean.setRemarks(mtpRoutePlanBean.getRemarks());
                } catch (Exception e) {
                    customerBean.setRemarks("");
                    e.printStackTrace();
                }
                try {
                    customerBean.setRemarks1(mtpRoutePlanBean.getRemarks2());
                } catch (Exception e) {
                    customerBean.setRemarks("");
                    e.printStackTrace();
                }
                customerBean.setRouteSchPlanGUID(mtpRoutePlanBean.getCollectionPlanItemGUID());
                isGetList = true;
                break;
            }
//            pos++;
        }
//        if (isGetList){
//            mtpRoutePlanBeanArrayList.remove(pos);
//        }
        return isGetList;
    }

    public static List<CreditLimitBean> getCreditLimit(String creditLimitQry) {
        List<CreditLimitBean> limitBeanList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, creditLimitQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    CreditLimitBean creditLimitBean = new CreditLimitBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.BalanceAmount);
                    if (property != null)
                        creditLimitBean.setBalanceAmount(property.getValue().toString());

                    property = properties.get(Constants.Currency);
                    if (property != null)
                        creditLimitBean.setCurrency(property.getValue().toString());
                    limitBeanList.add(creditLimitBean);
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        return limitBeanList;
    }

    public static ArrayList<CollectionBean> getCollection(Context mContext, String qry) throws OfflineODataStoreException {
        ArrayList<CollectionBean> collectionBeanArrayList = new ArrayList<>();
        ArrayList<CollectionBean> finalCollectionBeanArrayList = new ArrayList<>();
        CollectionBean collectionBean;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        collectionBean = new CollectionBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.DocumentNo);
                        if (property != null)
                            collectionBean.setDocNo((String) property.getValue());

                        property = properties.get(Constants.DocumentDate);
                        if (property != null) {
                            String convertDateFormat2 = UtilConstants.convertDateIntoDeviceFormat(mContext, UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue()));
                            collectionBean.setDocDate(convertDateFormat2);
                        }
                        property = properties.get(Constants.Currency);
                        if (property != null)
                            collectionBean.setCurrency((String) property.getValue());

                        property = properties.get(Constants.Amount);
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            collectionBean.setDocAmount(ConstantsUtils.commaSeparator(String.valueOf(mStrAmount), collectionBean.getCurrency()));
                        }
                        collectionBeanArrayList.add(collectionBean);
                    }
                }
            } catch (ODataException e) {
                e.printStackTrace();
            }
        }
        return collectionBeanArrayList;
    }

    public static void createDealerStock(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = createDealerEntity(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleCreateEntity(newEntity, Constants.Stocks,
                    new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.Stocks),
                    null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }


    /*Creates entity to create cpstock items in offline store*/
    private static ODataEntity updateDealerEntry(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.STOCK_ENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.StockGuid,
                        new ODataPropertyDefaultImpl(Constants.StockGuid, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.StockGuid))));
/*

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.Customer,
                        new ODataPropertyDefaultImpl(Constants.Customer, hashtable.get(Constants.Customer)));
                newEntity.getProperties().put(Constants.CustomerName,
                        new ODataPropertyDefaultImpl(Constants.CustomerName, hashtable.get(Constants.CustomerName)));
                newEntity.getProperties().put(Constants.Material,
                        new ODataPropertyDefaultImpl(Constants.Material, hashtable.get(Constants.Material)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));

//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
                newEntity.getProperties().put(Constants.ProdCatg,
                        new ODataPropertyDefaultImpl(Constants.ProdCatg, hashtable.get(Constants.ProdCatg)));

                newEntity.getProperties().put(Constants.ProdCatgDesc,
                        new ODataPropertyDefaultImpl(Constants.ProdCatgDesc, hashtable.get(Constants.ProdCatgDesc)));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
                newEntity.getProperties().put(Constants.Unrestricted,
                        new ODataPropertyDefaultImpl(Constants.Unrestricted, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Unrestricted)))));
                newEntity.getProperties().put(Constants.SkuGroup,
                        new ODataPropertyDefaultImpl(Constants.SkuGroup, hashtable.get(Constants.SkuGroup)));

                newEntity.getProperties().put(Constants.SkuGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.SkuGroupDesc, hashtable.get(Constants.SkuGroupDesc)));

                newEntity.getProperties().put(Constants.Banner,
                        new ODataPropertyDefaultImpl(Constants.Banner, hashtable.get(Constants.Banner)));
                newEntity.getProperties().put(Constants.BannerDesc,
                        new ODataPropertyDefaultImpl(Constants.BannerDesc, hashtable.get(Constants.BannerDesc)));

                newEntity.getProperties().put(Constants.Brand,
                        new ODataPropertyDefaultImpl(Constants.Brand, hashtable.get(Constants.Brand)));
                newEntity.getProperties().put(Constants.BrandDesc,
                        new ODataPropertyDefaultImpl(Constants.BrandDesc, hashtable.get(Constants.BrandDesc)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));
                newEntity.getProperties().put(Constants.Etag,
                        new ODataPropertyDefaultImpl(Constants.Etag, hashtable.get(Constants.Etag)));

                if (!TextUtils.isEmpty(hashtable.get(Constants.StockGuid))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.Stocks, hashtable.get(Constants.StockGuid));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    /*Creates entity to create cpstock items in offline store*/
    private static ODataEntity createDealerEntity(Hashtable<String, String> hashtable) throws ODataParserException {
        ODataEntity newEntity = null;
        try {
            if (hashtable != null) {
                newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.STOCK_ENTITY);

                try {
                    offlineStore.allocateProperties(newEntity, ODataStore.PropMode.Keys);
                } catch (ODataException e) {
                    e.printStackTrace();
                }
                newEntity.getProperties().put(Constants.StockGuid,
                        new ODataPropertyDefaultImpl(Constants.StockGuid, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.StockGuid))));
/*

                newEntity.getProperties().put(Constants.LOGINID,
                        new ODataPropertyDefaultImpl(Constants.LOGINID, hashtable.get(Constants.LOGINID)));*/
                newEntity.getProperties().put(Constants.Customer,
                        new ODataPropertyDefaultImpl(Constants.Customer, hashtable.get(Constants.Customer)));
                newEntity.getProperties().put(Constants.CustomerName,
                        new ODataPropertyDefaultImpl(Constants.CustomerName, hashtable.get(Constants.CustomerName)));
                newEntity.getProperties().put(Constants.Material,
                        new ODataPropertyDefaultImpl(Constants.Material, hashtable.get(Constants.Material)));
                newEntity.getProperties().put(Constants.MaterialDesc,
                        new ODataPropertyDefaultImpl(Constants.MaterialDesc, hashtable.get(Constants.MaterialDesc)));

//				newEntity.getProperties().put(Constants.UnrestrictedQty,
//						new ODataPropertyDefaultImpl(Constants.UnrestrictedQty, hashtable.get(Constants.UnrestrictedQty)));
                newEntity.getProperties().put(Constants.ProdCatg,
                        new ODataPropertyDefaultImpl(Constants.ProdCatg, hashtable.get(Constants.ProdCatg)));

                newEntity.getProperties().put(Constants.ProdCatgDesc,
                        new ODataPropertyDefaultImpl(Constants.ProdCatgDesc, hashtable.get(Constants.ProdCatgDesc)));
                newEntity.getProperties().put(Constants.UOM,
                        new ODataPropertyDefaultImpl(Constants.UOM, hashtable.get(Constants.UOM)));
//				newEntity.getProperties().put(Constants.MRP,
//						new ODataPropertyDefaultImpl(Constants.MRP, hashtable.get(Constants.MRP)));
//				newEntity.getProperties().put(Constants.LandingPrice,
//						new ODataPropertyDefaultImpl(Constants.LandingPrice, hashtable.get(Constants.LandingPrice)));
                newEntity.getProperties().put(Constants.Unrestricted,
                        new ODataPropertyDefaultImpl(Constants.Unrestricted, BigDecimal.valueOf(Double.parseDouble(hashtable.get(Constants.Unrestricted)))));
                newEntity.getProperties().put(Constants.SkuGroup,
                        new ODataPropertyDefaultImpl(Constants.SkuGroup, hashtable.get(Constants.SkuGroup)));

                newEntity.getProperties().put(Constants.SkuGroupDesc,
                        new ODataPropertyDefaultImpl(Constants.SkuGroupDesc, hashtable.get(Constants.SkuGroupDesc)));

                newEntity.getProperties().put(Constants.Banner,
                        new ODataPropertyDefaultImpl(Constants.Banner, hashtable.get(Constants.Banner)));
                newEntity.getProperties().put(Constants.BannerDesc,
                        new ODataPropertyDefaultImpl(Constants.BannerDesc, hashtable.get(Constants.BannerDesc)));

                newEntity.getProperties().put(Constants.Brand,
                        new ODataPropertyDefaultImpl(Constants.Brand, hashtable.get(Constants.Brand)));
                newEntity.getProperties().put(Constants.BrandDesc,
                        new ODataPropertyDefaultImpl(Constants.BrandDesc, hashtable.get(Constants.BrandDesc)));

                newEntity.getProperties().put(Constants.AsOnDate,
                        new ODataPropertyDefaultImpl(Constants.AsOnDate, UtilConstants.convertDateFormat(hashtable.get(Constants.AsOnDate))));

                if (!TextUtils.isEmpty(hashtable.get(Constants.StockGuid))) {
                    String resourcePath = Constants.getGUIDEditResourcePath(Constants.Stocks, hashtable.get(Constants.StockGuid));
                    newEntity.setResourcePath(resourcePath, resourcePath);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return newEntity;

    }

    public static void updateDealerStockEntry(Hashtable<String, String> table, UIListener uiListener) throws OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineStore == null) return;
        try {
            //Creates the entity payload
            ODataEntity newEntity = updateDealerEntry(table);
            //Send the request to update attendance in the local database
            offlineStore.scheduleUpdateEntity(newEntity, new OfflineRequestListener(Operation.Update.getValue(), uiListener, Constants.CPStockItems), null);
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    public static ArrayList<MyPerformanceBean> getRetTrendsList(String myPerfQry, String mStrCPGUID) throws OfflineODataStoreException {
        final Calendar c = Calendar.getInstance();
        int fiscalYear = c.get(Calendar.YEAR);
        int mMonth = c.get(Calendar.MONTH);

        String mon = "";
        String day = "";
        int mnt = 0;
        mnt = mMonth + 1;
        if (mnt < 10)
            mon = "0" + mnt;
        else
            mon = "" + mnt;
        String mStrMonthYear = mon + fiscalYear;
        String qry = Constants.ConfigTypesetTypes + "?$filter=" + Constants.Typeset + " eq '" + Constants.UOMNO0 + "' ";
        HashMap<String, String> mapUOM = null;
        try {
            mapUOM = new HashMap<>();
            mapUOM = OfflineManager.getUOMMapVal(qry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        String mStrSkuQry = "";
        String mStrType = Constants.getName(Constants.ConfigTypsetTypeValues, Constants.TypeValue, Constants.Types, Constants.TRDGRPTYPE);
        ArrayList<MyPerformanceBean> myPerfList = new ArrayList<>();
        ArrayList<MyPerformanceBean> myPerfSumList = new ArrayList<>();
        //Check if the offline oData store is initialized
        MyPerformanceBean myPerfBean;
        ODataProperty property;
        ODataPropMap properties;
        String mStrReportType = "";
        List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myPerfQry);
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                myPerfBean = new MyPerformanceBean();


                property = properties.get(Constants.ReportOnID);
                mStrReportType = (String) property.getValue();
                property = properties.get(Constants.UOM);
                myPerfBean.setUOM((String) property.getValue());
                myPerfBean.setReportType(mStrReportType);

                if (mStrType.equalsIgnoreCase(Constants.str_01)) {
                    property = properties.get(Constants.OrderMaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    myPerfBean.setMaterialNo(orderMatGrpId);
                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    myPerfBean.setMaterialDesc((String) property.getValue());

                    if (mStrSkuQry.length() == 0) {
                        mStrSkuQry += " " + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId + "'";
                    } else {
                        mStrSkuQry += " or " + Constants.OrderMaterialGroupID + " eq '" + orderMatGrpId + "'";

                    }
                } else {
                    property = properties.get(Constants.MaterialGroupID);
                    String orderMatGrpId = (String) property.getValue();
                    myPerfBean.setMaterialNo(orderMatGrpId);
                    property = properties.get(Constants.MaterialGroupDesc);
                    myPerfBean.setMaterialDesc((String) property.getValue());

                    if (mStrSkuQry.length() == 0) {
                        mStrSkuQry += " " + Constants.MaterialGroup + " eq '" + orderMatGrpId + "'";
                    } else {
                        mStrSkuQry += " or " + Constants.MaterialGroup + " eq '" + orderMatGrpId + "'";

                    }
                }
                // TODO ReportOnID equal to  '02' display amount values other wise quantity values
                if (mStrReportType.equalsIgnoreCase("02")) {
                    property = properties.get(Constants.AmtMTD);
                    BigDecimal mAmtMTD = null;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.AmtLastYearMTD);
                    BigDecimal mAmtLastYearMTD = null;
                    if (property != null) {
                        mAmtLastYearMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtLMTD(mAmtLastYearMTD.toString());
                    }


                    property = properties.get(Constants.AmtMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.AmtMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.AmtMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }


                } else if (mStrReportType.equalsIgnoreCase("01")) {

                    property = properties.get(Constants.QtyMTD);
                    BigDecimal mAmtMTD = null;
                    if (property != null) {
                        mAmtMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMTD(mAmtMTD.toString());
                    }

                    property = properties.get(Constants.QtyLastYearMTD);
                    BigDecimal mQtyLastYearMTD = null;
                    ;
                    if (property != null) {
                        mQtyLastYearMTD = (BigDecimal) property.getValue();
                        myPerfBean.setAmtLMTD(mQtyLastYearMTD.toString());
                    }

                    property = properties.get(Constants.QtyMonth1PrevPerf);
                    if (property != null) {
                        BigDecimal mStrQty = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth1PrevPerf(mStrQty.toString());
                    }

                    property = properties.get(Constants.QtyMonth2PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth2PrevPerf(mStrAmount.toString());
                    }

                    property = properties.get(Constants.QtyMonth3PrevPerf);
                    if (property != null) {
                        BigDecimal mStrAmount = (BigDecimal) property.getValue();
                        myPerfBean.setAmtMonth3PrevPerf(mStrAmount.toString());
                    }

                }
                myPerfList.add(myPerfBean);
            }
        }

        if (mStrSkuQry != null && !mStrSkuQry.equalsIgnoreCase("")) {
            Map<String, MyTargetsBean> mapTargetList = getTargetByRetailerByCalBase(mStrCPGUID, mStrSkuQry, mStrReportType, mStrType, mStrMonthYear);
            Map<String, MyPerformanceBean> mapPerList = getALMyTargetList(myPerfList);
            myPerfSumList = getValuesFromMap(mapPerList, mapTargetList, mapUOM);
        }
        return myPerfSumList;

    }

    private static ArrayList<MyPerformanceBean> getValuesFromMap(Map<String, MyPerformanceBean> mapPerfVal,
                                                                 Map<String, MyTargetsBean> mapTargetList, HashMap<String, String> mapUOM) {
        ArrayList<MyPerformanceBean> alTargets = new ArrayList<>();
        if (!mapPerfVal.isEmpty()) {
            Iterator iterator = mapPerfVal.keySet().iterator();
            while (iterator.hasNext()) {
                String key = iterator.next().toString();
                MyPerformanceBean myPerformanceBean = mapPerfVal.get(key);

                Double mAmtMTD = 0.00;
                try {
                    mAmtMTD = Double.parseDouble(myPerformanceBean.getAmtMTD());
                } catch (NumberFormatException e) {
                    mAmtMTD = 0.00;
                    e.printStackTrace();
                }
                Double mAmtLastYearMTD = 0.00;
                try {
                    mAmtLastYearMTD = Double.parseDouble(myPerformanceBean.getAmtLMTD());
                    mAmtLastYearMTD = ConstantsUtils.decimalRoundOff(new BigDecimal(mAmtLastYearMTD), 3).doubleValue();
                } catch (NumberFormatException e) {
                    mAmtLastYearMTD = 0.00;
                    e.printStackTrace();
                }
                Double diffValue = 0.0;
                try {
//                    diffValue = mAmtMTD.doubleValue() - mAmtLastYearMTD.doubleValue();
                    diffValue = mAmtMTD.doubleValue() - mAmtLastYearMTD.doubleValue();
                } catch (Exception e) {
                    diffValue = 0.0;
                }
                myPerformanceBean.setGrPer(getAchivedPer(mAmtLastYearMTD.toString(), diffValue.toString()) + "");

                Double mAmtOne = 0.00, mdoubSumOf = 0.00, mAmtTwo = 0.00, mAmtThree = 0.00;
                try {
                    mAmtOne = Double.parseDouble(myPerformanceBean.getAmtMonth1PrevPerf());
                    mAmtOne = ConstantsUtils.decimalRoundOff(new BigDecimal(mAmtOne), 3).doubleValue();
                } catch (NumberFormatException e) {
                    mAmtOne = 0.00;
                    e.printStackTrace();
                }
                try {
                    mAmtTwo = Double.parseDouble(myPerformanceBean.getAmtMonth2PrevPerf());
                    mAmtTwo = ConstantsUtils.decimalRoundOff(new BigDecimal(mAmtTwo), 3).doubleValue();
                } catch (NumberFormatException e) {
                    mAmtTwo = 0.00;
                    e.printStackTrace();
                }

                try {
                    mAmtThree = Double.parseDouble(myPerformanceBean.getAmtMonth3PrevPerf());
                    mAmtThree = ConstantsUtils.decimalRoundOff(new BigDecimal(mAmtThree), 3).doubleValue();
                } catch (NumberFormatException e) {
                    mAmtThree = 0.00;
                    e.printStackTrace();
                }

                Double avgLastThreeMont = 0.0;
                try {
                    avgLastThreeMont = (mAmtOne + mAmtTwo + mAmtThree) / 3;
                } catch (Exception e) {
                    avgLastThreeMont = 0.0;
                }

                if (Double.isNaN(avgLastThreeMont) || Double.isInfinite(avgLastThreeMont)) {
                    avgLastThreeMont = 0.0;
                }

                avgLastThreeMont = ConstantsUtils.decimalRoundOff(new BigDecimal(avgLastThreeMont), 3).doubleValue();

                myPerformanceBean.setAvgLstThreeMonth(avgLastThreeMont.toString());

                MyTargetsBean myTargetsBean = null;
                try {
                    if (mapTargetList.containsKey(key)) {
                        myTargetsBean = mapTargetList.get(key);
                    } else {
                        myTargetsBean = new MyTargetsBean();
                    }
                } catch (Exception e) {
                    myTargetsBean = new MyTargetsBean();
                    e.printStackTrace();
                }
                myPerformanceBean.setCMTarget(myTargetsBean.getMonthTarget().equalsIgnoreCase("") ? "0.000" : myTargetsBean.getMonthTarget());

                Double mDouBTD = 0.00;
                try {
//                    mDouBTD = Double.parseDouble(myTargetsBean.getMonthTarget()) - mAmtMTD.doubleValue();
                    mDouBTD = Double.parseDouble(myTargetsBean.getMonthTarget()) - Double.parseDouble(myTargetsBean.getMTDA());

                    mDouBTD = ConstantsUtils.decimalRoundOff(new BigDecimal(mDouBTD), 3).doubleValue();
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
                if (Double.isNaN(mDouBTD) || Double.isInfinite(mDouBTD)) {
                    mDouBTD = 0.0;
                }

                myPerformanceBean.setAmtMTD(myTargetsBean.getMTDA().equalsIgnoreCase("") ? "0.000" : myTargetsBean.getMTDA());
                myPerformanceBean.setBalToDo(mDouBTD.toString());

                double mDouCalAchivedTar = 0.0;

                try {
//                    mDouCalAchivedTar = Double.parseDouble(myTargetsBean.getMTDA() )+ mAmtMTD.doubleValue();
                    mDouCalAchivedTar = Double.parseDouble(myTargetsBean.getMTDA());
                } catch (NumberFormatException e) {
                    mDouCalAchivedTar = 0.0;
                }
                myPerformanceBean.setAchivedPer(getAchivedPer(myTargetsBean.getMonthTarget(), mDouCalAchivedTar + "") + "");

                myPerformanceBean.setMapUOM(mapUOM);

                alTargets.add(myPerformanceBean);
            }
        }
        return alTargets;
    }

    private static Map<String, MyPerformanceBean> getALMyTargetList(ArrayList<MyPerformanceBean> alMyTargets) {
        Map<String, MyPerformanceBean> mapMyTargetBean = new HashMap<>();
        if (alMyTargets != null && alMyTargets.size() > 0) {
            for (MyPerformanceBean bean : alMyTargets)
                if (mapMyTargetBean.containsKey(bean.getMaterialNo())) {

                    double AmtMonth1PrevPerf = Double.parseDouble(bean.getAmtMonth1PrevPerf()) + Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getAmtMonth1PrevPerf());
                    double AmtMonth2PrevPerf = Double.parseDouble(bean.getAmtMonth2PrevPerf()) + Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getAmtMonth2PrevPerf());
                    double AmtMonth3PrevPerf = Double.parseDouble(bean.getAmtMonth3PrevPerf()) + Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getAmtMonth3PrevPerf());
                    double mDoubAmtLMTD = Double.parseDouble(bean.getAmtLMTD()) + Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getAmtLMTD());
                    double mDoubAmtMTD = Double.parseDouble(bean.getAmtMTD()) + Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getAmtMTD());
//                    double mDoubGRPER = Double.parseDouble(bean.getGrPer())+ Double.parseDouble(mapMyTargetBean.get(bean.getMaterialNo()).getGrPer());

                    bean.setAmtMonth1PrevPerf(AmtMonth1PrevPerf + "");
                    bean.setAmtMonth2PrevPerf(AmtMonth2PrevPerf + "");
                    bean.setAmtMonth3PrevPerf(AmtMonth3PrevPerf + "");
                    bean.setAmtLMTD(mDoubAmtLMTD + "");
                    bean.setAmtMTD(mDoubAmtMTD + "");
                    bean.setGrPer("");

                    mapMyTargetBean.put(bean.getMaterialNo(), bean);
                } else {

                    mapMyTargetBean.put(bean.getMaterialNo(), bean);
                }
        }


        return mapMyTargetBean;
    }

    public static Map<String, MyTargetsBean> getTargetByRetailerByCalBase(String mCPGuid,
                                                                          String mStrSKUQry, String mStrCalBase, String mStrType, String monYear) {
        ArrayList<MyTargetsBean> arrayList = new ArrayList<>();
        List<ODataEntity> entities = null;

        String mStrTargetQry = "", mSelectQry = "";
        try {
            if (getVisitStatusForCustomer("" + Constants.TargetItems +
                    "?$select=" + Constants.PartnerGUID + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' ")) {

                if (mStrType.equalsIgnoreCase("01")) {
                    if (mStrCalBase.equalsIgnoreCase("01")) {
                        mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                                + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    } else {
                        mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                                + Constants.OrderMaterialGroupID + "," + Constants.OrderMaterialGroupDesc + "," + Constants.UOM;
                    }

                    mStrTargetQry = Constants.TargetItems +
                            "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and (" + mStrSKUQry + ") " +
                            "and " + Constants.Periodicity + " eq '" + Constants.str_02 + "' and " + Constants.Period + " eq '" + monYear + "'";
                } else {
                    if (mStrCalBase.equalsIgnoreCase("01")) {
                        mSelectQry = Constants.TargetQty + "," + Constants.ActualQty + "," + Constants.KPICode + ","
                                + Constants.MaterialGroup + "," + Constants.MaterialGrpDesc + "," + Constants.UOM;
                    } else {
                        mSelectQry = Constants.TargetValue + "," + Constants.ActualValue + "," + Constants.KPICode + ","
                                + Constants.MaterialGroup + "," + Constants.MaterialGrpDesc + "," + Constants.UOM;
                    }

                    mStrTargetQry = Constants.TargetItems +
//                            "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and " + Constants.MaterialGroup + " eq '" + mStrOrderMatGrp + "' ";
                            "?$select=" + mSelectQry + " &$filter=" + Constants.PartnerGUID + " eq '" + mCPGuid + "' and (" + mStrSKUQry + ") " +
                            "and " + Constants.Periodicity + " eq '" + Constants.str_02 + "' and " + Constants.Period + " eq '" + monYear + "'";
                }


            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, mStrTargetQry);
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        ODataProperty property = null;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            //Retrieve the data from the response
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();

                MyTargetsBean myTargetBean = new MyTargetsBean();

                String monthTarget = "", actualTarget = "";
                Double mDobTargetQty = 0.0, mDobActQty = 0.0;

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.TargetQty);
                } else {
                    property = properties.get(Constants.TargetValue);
                }
                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobTargetQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobTargetQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobTargetQty.isNaN() || mDobTargetQty.isInfinite()) {
                    mDobTargetQty = 0.0;
                }
//                monthTarget = mDobTargetQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    monthTarget = String.format("%.3f", mDobTargetQty);
                    property = properties.get(Constants.UOM);
                   /* try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            monthTarget = trimQtyDecimalPlace(monthTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }*/
                } else
                    monthTarget = mDobTargetQty + "";

                if (mStrCalBase.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.ActualQty);
                } else {
                    property = properties.get(Constants.ActualValue);
                }

                try {
                    BigDecimal monthTargetVal = (BigDecimal) property.getValue();

                    mDobActQty = monthTargetVal.doubleValue();
                } catch (Exception e) {
                    mDobActQty = 0.0;
                    e.printStackTrace();
                }

                if (mDobActQty.isNaN() || mDobActQty.isInfinite()) {
                    mDobActQty = 0.0;
                }
//                actualTarget = mDobActQty + "";
                if (mStrCalBase.equalsIgnoreCase("01")) {
                    actualTarget = String.format("%.3f", mDobActQty);
                    property = properties.get(Constants.UOM);
                   /* try {
                        if (checkNoUOMZero(String.valueOf(property.getValue())))
                            actualTarget = trimQtyDecimalPlace(actualTarget);
                    } catch (OfflineODataStoreException e) {
                        e.printStackTrace();
                    }*/
                } else
                    actualTarget = mDobActQty + "";


                if (monthTarget != null) {
                    myTargetBean.setMonthTarget(!monthTarget.toString().equalsIgnoreCase("") ? monthTarget.toString() : "0");
                } else {
                    myTargetBean.setMonthTarget("0");
                }

                if (actualTarget != null) {
                    myTargetBean.setMTDA(!actualTarget.toString().equalsIgnoreCase("") ? actualTarget.toString() : "0");
                } else {
                    myTargetBean.setMTDA("0");
                }
                if (mStrType.equalsIgnoreCase("01")) {
                    property = properties.get(Constants.OrderMaterialGroupID);
                    myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                    property = properties.get(Constants.OrderMaterialGroupDesc);
                    myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());
                } else {
                    property = properties.get(Constants.MaterialGroup);
                    myTargetBean.setOrderMaterialGroupID((String) property.getValue());

                    property = properties.get(Constants.MaterialGrpDesc);
                    myTargetBean.setOrderMaterialGroupDesc((String) property.getValue());
                }


                arrayList.add(myTargetBean);
            }
        }
        Map<String, MyTargetsBean> mapMyTargetBean = new HashMap<>();
        if (arrayList != null && arrayList.size() > 0) {
            Map<String, Double> mapMonthTarget = new HashMap<>();
            Map<String, Double> mapMonthAchived = new HashMap<>();

            for (MyTargetsBean bean : arrayList)
                if (mapMyTargetBean.containsKey(bean.getOrderMaterialGroupID())) {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget()) + mapMonthTarget.get(bean.getOrderMaterialGroupID());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA()) + mapMonthAchived.get(bean.getOrderMaterialGroupID());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    bean.setMonthTarget(mDoubMonthTarget + "");
                    bean.setMTDA(mDoubMonthAchived + "");
                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                } else {
                    double mDoubMonthTarget = Double.parseDouble(bean.getMonthTarget());
                    double mDoubMonthAchived = Double.parseDouble(bean.getMTDA());

                    mapMonthTarget.put(bean.getOrderMaterialGroupID(), mDoubMonthTarget);
                    mapMonthAchived.put(bean.getOrderMaterialGroupID(), mDoubMonthAchived);

                    mapMyTargetBean.put(bean.getOrderMaterialGroupID(), bean);
                }
        } else {
            mapMyTargetBean = new HashMap<>();
        }
        return mapMyTargetBean;
    }

    /*Returns KPI set GUID  based on current month and year */
    public static MyTargetsBean getSpecificKpi(String kpiQry) throws OfflineODataStoreException {

        MyTargetsBean kpiBean = null;
        //Check if the offline oData store is initialized
        if (isOfflineStoreOpen()) {

            ODataProperty property;
            ODataPropMap properties;
            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, kpiQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    try {
                        properties = entity.getProperties();
                        String mStrRollUp = "";
                        property = properties.get(Constants.KPIGUID);
                        ODataGuid kpiGuid = null;
                        try {
                            kpiGuid = (ODataGuid) property.getValue();
                            mStrRollUp = getValueByColumnName(Constants.KPIItems + "?$select=" + Constants.RollUpTo + " &$filter = "
                                    + Constants.KPIGUID + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "'", Constants.RollUpTo);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                        String activityStatusForVisitQry = Constants.KPIItems + "?$top=1 &$filter=" + Constants.KPIGUID
//                                + " eq guid'" + kpiGuid.guidAsString36().toUpperCase() + "' and "+mStrCPDMSDIVKPIQry+" ";
//                        if (getVisitActivityStatusForVisit(activityStatusForVisitQry)) {
                        kpiBean = new MyTargetsBean();
                        kpiBean.setKpiGuid(kpiGuid.guidAsString36().toUpperCase());
                        kpiBean.setRollUpTo(mStrRollUp);

                        property = properties.get(Constants.KPIName);
                        kpiBean.setKPIName((String) property.getValue());


                        property = properties.get(Constants.KPICode);
                        kpiBean.setKPICode((String) property.getValue());

                        property = properties.get(Constants.KPIFor);
                        kpiBean.setKPIFor((String) property.getValue());

                        property = properties.get(Constants.CalculationSource);
                        kpiBean.setCalculationSource((String) property.getValue());

                        property = properties.get(Constants.CalculationBase);
                        kpiBean.setCalculationBase((String) property.getValue());

                        property = properties.get(Constants.KPICategory);
                        kpiBean.setKPICategory((String) property.getValue());
//                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                }
            }


        }

        return kpiBean;


    }

    public static ArrayList<MyTargetsBean> getMyTargetsList(String myTargetQry, String mStrSPGuid,
                                                            String mStrKpiName, String mStrKpiCode, String mStrKpiGuid,
                                                            String mStrCalBase, String mStrKpiFor, String mStrCalSource
            , String mStrRollUPto, String mStrKPICat, boolean comingFromTargets, String mStrPeriodicity, String mStrPeriodicityDesc) throws OfflineODataStoreException {

        ArrayList<MyTargetsBean> myTargetList = new ArrayList<>();


        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            MyTargetsBean myTargetBean;
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, myTargetQry);
            if (entities != null && entities.size() > 0) {
                //Retrieve the data from the response
                for (ODataEntity entity : entities) {

                    properties = entity.getProperties();

                    property = properties.get(Constants.TargetGUID);
                    ODataGuid mTargetGuid = null;
                    try {
                        mTargetGuid = (ODataGuid) property.getValue();

                    } catch (Exception e) {
                        e.printStackTrace();
                    }


                    ArrayList<MyTargetsBean> arrayList = getMyTargetItemsList(mTargetGuid.guidAsString36(), mStrSPGuid,
                            mStrCalBase, mStrRollUPto, mStrKpiName, mStrKpiGuid, mStrPeriodicity, mStrPeriodicityDesc);

                    if (myTargetList != null && myTargetList.size() > 0) {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(myTargetList.size(), arrayList);
                        }
                    } else {
                        if (arrayList != null && arrayList.size() > 0) {
                            myTargetList.addAll(arrayList);
                        }
                    }
                }
            }
        }

        return myTargetList;

    }

    public static double getDeviceTotalQtyBasedOnMaterialGrp(String createType, Context context, String mStrCurrentDate, ArrayList<String> alMatGrp) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        ArrayList<HashMap<String, String>> arrtable;
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && createdOn[0].equalsIgnoreCase(splitToday[0])) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.SalesOrderItems);
                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            try {
                                if (arrtable != null && arrtable.size() > 0) {
                                    for (HashMap<String, String> mapVal : arrtable) {
                                        if (alMatGrp.contains(mapVal.get(Constants.MaterialGroup))) {
                                            try {
                                                mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(mapVal.get(Constants.AlternateWeight));
                                            } catch (NumberFormatException e) {
                                                e.printStackTrace();
                                            }
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static double getDeviceTotalQtyBasedOnMaterialGrpVenus(String createType, Context context, String mStrCurrentDate, ArrayList<String> alMatGrp) {

        double mDoubleDevOrderValue = 0.0;
        String splitToday[] = mStrCurrentDate.split("T");
        try {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(createType, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store =  ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        ArrayList<HashMap<String, String>> arrtable;
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        String[] createdOn = fetchJsonHeaderObject.getString(Constants.CreatedOn).split("T");
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SalesOrderDataValt)
                                && createdOn[0].equalsIgnoreCase(splitToday[0])) {
                            String itemsString = fetchJsonHeaderObject.getString(Constants.SalesOrderItems);
                            arrtable = UtilConstants.convertToArrayListMap(itemsString);
                            try {
                                if (arrtable != null && arrtable.size() > 0) {
                                    for (HashMap<String, String> mapVal : arrtable) {
                                        if (alMatGrp.contains(mapVal.get(Constants.MaterialGroup))) {
                                            try {
                                                mDoubleDevOrderValue = mDoubleDevOrderValue + Double.parseDouble(mapVal.get(Constants.Quantity));
                                            } catch (NumberFormatException e) {
                                                e.printStackTrace();
                                            }
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return mDoubleDevOrderValue;
    }

    public static String makeCustomerQryFromCustomerPartnerFunc(String cpPartnerQry, String CustomerNoColumn) throws OfflineODataStoreException {

        String mCPQry = "";
        //Check if the offline oData store is initialized
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, cpPartnerQry);
            if (entities != null && entities.size() > 0) {
                for (ODataEntity entity : entities) {
                    try {
                        properties = entity.getProperties();
                        property = properties.get(CustomerNoColumn);
                        String mStrCPNo = (String) property.getValue();
                        if (mCPQry.length() == 0)
                            mCPQry += " " + CustomerNoColumn + " eq '" + mStrCPNo + "'";
                        else
                            mCPQry += " or " + CustomerNoColumn + " eq '" + mStrCPNo + "'";

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            }
        }

        return mCPQry;
    }

    public static String getRouteCount(List<ODataEntity> entities) throws OfflineODataStoreException {
        int mStrCount = 0;
        ODataProperty property;
        ODataPropMap properties;
        if (entities != null && entities.size() > 0) {
            for (ODataEntity entity : entities) {
                properties = entity.getProperties();
                property = properties.get(Constants.EntityAttribute4);
                String mStrEntityAttribute4 = (String) property.getValue();
                if (!mStrEntityAttribute4.equalsIgnoreCase("01")) {
                    mStrCount++;
                }
            }
        }

        return mStrCount + "";
    }

    public static String getRouteCount(JSONArray jsonArray) {
        int mStrCount = 0;
        if (jsonArray != null) {
            try {
                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    String mStrEntityAttribute4 = jsonObject.optString(Constants.EntityAttribute4);
                    if (!mStrEntityAttribute4.equalsIgnoreCase("01")) {
                        mStrCount++;
                    }
                }
            }catch (JSONException e){
                e.printStackTrace();
            }
        }

        return mStrCount + "";
    }

    public static void CreateLatLong(Hashtable hashtable, UIListener uiListener, String columnID, Context context) throws OfflineODataStoreException {
        if (isOfflineStoreOpenGeo()) {
           /* try {
                //Creates the entity payloadi
                ODataEntity newEntity = createLatLongEntity(hashtable, columnID, context);
                //Send the request to create the new visit in the local database
                offlineGeo.scheduleCreateEntity(newEntity, Constants.SPGeos, new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SPGeos), null);
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }*/
            //END

            try {
                //Creates the entity payload
                ODataEntity newEntity = createLatLongEntity(hashtable, columnID, context);
                newEntity.setResourcePath(Constants.SPGeos, Constants.SPGeos);

                //Send the request to create the new visit in the local database
                //   offlineStore.scheduleCreateEntity(newEntity, Constants.SyncHistroy, new OfflineRequestListener(Operation.Create.getValue(), null, Constants.SyncHistroy), null);
                //      Log.d("Sync History","insert"+hashtable.get(Constants.SyncHisGuid)+"--"+hashtable.get(Constants.SyncCollection));
                OfflineRequestListener collectionListener = new OfflineRequestListener(Operation.Create.getValue(), uiListener, Constants.SPGeos);

/*
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put(Constants.RequestID, ssoGUID32);
                createHeaders.put(Constants.RepeatabilityCreation, mStrDateTime);*/
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put("OfflineOData.RemoveAfterUpload", "true");


                ODataRequestParamSingle collectionReq = new ODataRequestParamSingleDefaultImpl();
                collectionReq.setMode(ODataRequestParamSingle.Mode.Create);
                collectionReq.setResourcePath(newEntity.getResourcePath());
                collectionReq.setPayload(newEntity);
                collectionReq.getCustomHeaders().putAll(createHeaders);
                offlineGeo.scheduleRequest(collectionReq, collectionListener);
            } catch (Exception e) {
                LogManager.writeLogDebug("Create Sync history failed oData ex: " + e.getLocalizedMessage());
                throw new OfflineODataStoreException(e);
            }
        }
    }

    private static ODataEntity createLatLongEntity(Hashtable hashtable, String columnID, Context context) {
        ODataEntity oDataEntity = null;

        if (hashtable != null) {
            oDataEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineGeo) + Constants.SPGEOENTITY);

            try {
                offlineGeo.allocateProperties(oDataEntity, ODataStore.PropMode.Keys);
            } catch (ODataException e) {
                e.printStackTrace();
            }


            oDataEntity.getProperties().put(Constants.GeoGUID,
                    new ODataPropertyDefaultImpl(Constants.GeoGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.GeoGUID).toString())));

            if (hashtable.get(Constants.GeoDate) != "") {
                oDataEntity.getProperties().put(Constants.GeoDate,
                        new ODataPropertyDefaultImpl(Constants.GeoDate, UtilConstants.convertDateFormat(hashtable.get(Constants.GeoDate).toString())));
            }

            if (hashtable.get(Constants.GeoTime) != "") {
                oDataEntity.getProperties().put(Constants.GeoTime,
                        new ODataPropertyDefaultImpl(Constants.GeoTime,hashtable.get(Constants.GeoTime)));

            }
            /*if (hashtable.get(Constants.Remarks) != "") {
                oDataEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks,hashtable.get(Constants.Remarks)));

            }*/

            try {
                if (hashtable.get(Constants.Distance) != "") {
                    oDataEntity.getProperties().put(Constants.Distance,
                            new ODataPropertyDefaultImpl(Constants.Distance,hashtable.get(Constants.Distance)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.DistanceUOM) != "") {
                    oDataEntity.getProperties().put(Constants.DistanceUOM,
                            new ODataPropertyDefaultImpl(Constants.DistanceUOM,hashtable.get(Constants.DistanceUOM)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (hashtable.get(Constants.Longitude) != "" && hashtable.get(Constants.Longitude) != null) {
                oDataEntity.getProperties().put(Constants.Longitude,
                        new ODataPropertyDefaultImpl(Constants.Longitude,hashtable.get(Constants.Longitude)));

            }

            if (hashtable.get(Constants.Latitude) != "" && hashtable.get(Constants.Latitude) != null) {
                oDataEntity.getProperties().put(Constants.Latitude,
                                new ODataPropertyDefaultImpl(Constants.Latitude, hashtable.get(Constants.Latitude)));
            }

            if (hashtable.get(Constants.SPGUID)!=null&&!TextUtils.isEmpty(hashtable.get(Constants.SPGUID).toString())) {
                oDataEntity.getProperties().put(Constants.SPGUID,
                        new ODataPropertyDefaultImpl(Constants.SPGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SPGUID).toString())));
            }

            if (hashtable.get(Constants.LoginID) != "") {
                oDataEntity.getProperties().put(Constants.LoginID,
                        new ODataPropertyDefaultImpl(Constants.LoginID, hashtable.get(Constants.LoginID)));
            }

            if (hashtable.get(Constants.SPNO) != "") {
                oDataEntity.getProperties().put(Constants.SPNO,
                        new ODataPropertyDefaultImpl(Constants.SPNO, hashtable.get(Constants.SPNO)));
            }

            if (hashtable.get(Constants.SPName) != "") {
                oDataEntity.getProperties().put(Constants.SPName,
                        new ODataPropertyDefaultImpl(Constants.SPName, hashtable.get(Constants.SPName)));
            }

            if (hashtable.get(Constants.Reason) != "") {
                oDataEntity.getProperties().put(Constants.Reason,
                        new ODataPropertyDefaultImpl(Constants.Reason, hashtable.get(Constants.Reason)));
            }

            if (hashtable.get(Constants.ReasonDesc) != "") {
                oDataEntity.getProperties().put(Constants.ReasonDesc,
                        new ODataPropertyDefaultImpl(Constants.ReasonDesc, hashtable.get(Constants.ReasonDesc)));
            }

            if (hashtable.get(Constants.BatteryPerc) != "") {
                oDataEntity.getProperties().put(Constants.BatteryPerc,
                        new ODataPropertyDefaultImpl(Constants.BatteryPerc, hashtable.get(Constants.BatteryPerc)));
            }

            try {
                if (hashtable.get(Constants.IMEI1) != "") {
                    oDataEntity.getProperties().put(Constants.IMEI1,
                            new ODataPropertyDefaultImpl(Constants.IMEI1,hashtable.get(Constants.IMEI1)));

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.IMEI2) != "") {
                    oDataEntity.getProperties().put(Constants.IMEI2,
                            new ODataPropertyDefaultImpl(Constants.IMEI2,hashtable.get(Constants.IMEI2)));

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

           /* if (hashtable.get(Constants.Remarks) != "") {
                oDataEntity.getProperties().put(Constants.Remarks,
                        new ODataPropertyDefaultImpl(Constants.Remarks, hashtable.get(Constants.Remarks)));
            }*/

            try {
                if (hashtable.get(Constants.APKVersion) != "") {
                    oDataEntity.getProperties().put(Constants.APKVersion,
                            new ODataPropertyDefaultImpl(Constants.APKVersion,hashtable.get(Constants.APKVersion)));

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.APKVersionCode) != "") {
                    oDataEntity.getProperties().put(Constants.APKVersionCode,
                            new ODataPropertyDefaultImpl(Constants.APKVersionCode,hashtable.get(Constants.APKVersionCode)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if (hashtable.get(Constants.MobileNo11) != "") {
                    oDataEntity.getProperties().put(Constants.MobileNo11,
                            new ODataPropertyDefaultImpl(Constants.MobileNo11,hashtable.get(Constants.MobileNo11)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                oDataEntity.getProperties().put(Constants.OsVersion,
                            new ODataPropertyDefaultImpl(Constants.OsVersion, android.os.Build.VERSION.RELEASE));
//                LogManager.writeLogInfo(android.os.Build.VERSION.RELEASE);
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                oDataEntity.getProperties().put(Constants.MobileModel,
                        new ODataPropertyDefaultImpl(Constants.MobileModel, Constants.getDeviceName()));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        DatabaseHelperGeo databaseHelper =  DatabaseHelperGeo.getInstance(context);
        databaseHelper.deleteLatLong(columnID);
        return oDataEntity;
    }

    private static ReentrantLock reentrantLock = null;
    public static int getPendingCount(final String strQry) throws OfflineODataStoreException {
        final int[] pendingCount = {0};
        Thread thread=new Thread(new Runnable() {
            @Override
            public void run() {
                if (reentrantLock==null){
                    reentrantLock = new ReentrantLock();
                }
                try {
                    Log.e("Sync History Info:","LOCKED");
                    reentrantLock.lock();
                    if (offlineStore != null) {
                        try {
                            //Define the resource path
                            String resourcePath = strQry;
                            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                            request.setMode(ODataRequestParamSingle.Mode.Read);
                            request.setResourcePath(resourcePath);
                            //Send a request to read the Retailer details from the local database
                            ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                                    executeRequest(request);

                            if (response.getPayloadType() == ODataPayload.Type.Error) {
                                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                        response.getPayload();
                                throw new OfflineODataStoreException(error.getMessage());
                                //Check if the response contains EntitySet
                            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                                List<ODataEntity> entities = feed.getEntities();
                                if (entities.size() > 0) {
                                    pendingCount[0] = entities.size();
                                }
                            }
                        } catch (Exception e) {
                            try {
                                throw new OfflineODataStoreException(e);
                            } catch (OfflineODataStoreException e1) {
                                e1.printStackTrace();
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e("Sync History Info","ANR EXCEPTION OCCURRED");
                }finally {
                    if (reentrantLock!=null&&reentrantLock.isHeldByCurrentThread())reentrantLock.unlock();
                    Log.e("Sync History Info:","UNLOCKED FINALLY");
                }

            }
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //Check if the offline oData store is initialized
        Log.d("Sync History","count"+pendingCount[0]);
        return pendingCount[0];

    }


    public static int getPendingCountGeo(final String strQry) throws OfflineODataStoreException {
        final int[] pendingCount = {0};
        Thread thread=new Thread(new Runnable() {
            @Override
            public void run() {
                if (reentrantLock==null){
                    reentrantLock = new ReentrantLock();
                }
                try {
                    Log.e("Sync History Info:","LOCKED");
                    reentrantLock.lock();
                    if (offlineGeo != null) {
                        try {
                            //Define the resource path
                            String resourcePath = strQry;
                            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                            request.setMode(ODataRequestParamSingle.Mode.Read);
                            request.setResourcePath(resourcePath);
                            //Send a request to read the Retailer details from the local database
                            ODataResponseSingle response = (ODataResponseSingle) offlineGeo.
                                    executeRequest(request);

                            if (response.getPayloadType() == ODataPayload.Type.Error) {
                                ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                        response.getPayload();
                                throw new OfflineODataStoreException(error.getMessage());
                                //Check if the response contains EntitySet
                            } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                                List<ODataEntity> entities = feed.getEntities();
                                if (entities.size() > 0) {
                                    pendingCount[0] = entities.size();
                                }
                            }
                        } catch (Exception e) {
                            try {
                                throw new OfflineODataStoreException(e);
                            } catch (OfflineODataStoreException e1) {
                                e1.printStackTrace();
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e("Sync History Info","ANR EXCEPTION OCCURRED");
                }finally {
                    if (reentrantLock!=null&&reentrantLock.isHeldByCurrentThread())reentrantLock.unlock();
                    Log.e("Sync History Info:","UNLOCKED FINALLY");
                }

            }
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //Check if the offline oData store is initialized
        Log.d("Sync History","count"+pendingCount[0]);
        return pendingCount[0];

    }

    public static void CreateSyncHistroy(Hashtable hashtable) throws OfflineODataStoreException {
        if (isOfflineStoreOpen()) {
            try {
                //Creates the entity payload
                ODataEntity newEntity = createSyncHistroyEntity(hashtable);
                newEntity.setResourcePath(Constants.SyncHistorys, Constants.SyncHistorys);

                //Send the request to create the new visit in the local database
             //   offlineStore.scheduleCreateEntity(newEntity, Constants.SyncHistroy, new OfflineRequestListener(Operation.Create.getValue(), null, Constants.SyncHistroy), null);
                Log.d("SH Offline","insert RefGuid:-"+hashtable.get(Constants.RefGUID)+"--"+hashtable.get(Constants.SyncCollection));
                OfflineRequestListener collectionListener = new OfflineRequestListener(Operation.Create.getValue(), null, Constants.SyncHistroy);

/*
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put(Constants.RequestID, ssoGUID32);
                createHeaders.put(Constants.RepeatabilityCreation, mStrDateTime);*/
                Map<String, String> createHeaders = new HashMap<String, String>();
                createHeaders.put("OfflineOData.RemoveAfterUpload", "true");



                ODataRequestParamSingle collectionReq = new ODataRequestParamSingleDefaultImpl();
                collectionReq.setMode(ODataRequestParamSingle.Mode.Create);
                collectionReq.setResourcePath(newEntity.getResourcePath());
                collectionReq.setPayload(newEntity);
                collectionReq.getCustomHeaders().putAll(createHeaders);
                offlineStore.scheduleRequest(collectionReq, collectionListener);
            } catch (Exception e) {
                LogManager.writeLogDebug("Create Sync history failed oData ex: "+e.getLocalizedMessage());
                throw new OfflineODataStoreException(e);
            }
        }
        //END
    }

    public static ODataEntity createSyncHistroyEntity(Hashtable hashtable) {
        ODataEntity oDataEntity = null;

        if (hashtable != null) {
            oDataEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpace(offlineStore) + Constants.SyncHistorysENTITY);

            try {
                offlineStore.allocateProperties(oDataEntity, ODataStore.PropMode.Keys);
            } catch (ODataException e) {
                e.printStackTrace();
            }


            if(hashtable.get(Constants.SyncHisGuid) != null) {
                oDataEntity.getProperties().put(Constants.SyncHisGuid,
                        new ODataPropertyDefaultImpl(Constants.SyncHisGuid, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.SyncHisGuid).toString())));
            }

            if(hashtable.get(Constants.RefGUID) != null) {
                oDataEntity.getProperties().put(Constants.RefGUID,
                        new ODataPropertyDefaultImpl(Constants.RefGUID, ODataGuidDefaultImpl.initWithString32(hashtable.get(Constants.RefGUID).toString())));
            }

            try {
                if(hashtable.get(Constants.SyncCollection) != null) {
                    oDataEntity.getProperties().put(Constants.SyncCollection,
                            new ODataPropertyDefaultImpl(Constants.SyncCollection, hashtable.get(Constants.SyncCollection)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncApplication) != null) {
                    oDataEntity.getProperties().put(Constants.SyncApplication,
                            new ODataPropertyDefaultImpl(Constants.SyncApplication, hashtable.get(Constants.SyncApplication)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncHisTime) != null) {
                    oDataEntity.getProperties().put(Constants.SyncHisTime,
                            new ODataPropertyDefaultImpl(Constants.SyncHisTime, hashtable.get(Constants.SyncHisTime)));

                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncDate) != null) {
                    oDataEntity.getProperties().put(Constants.SyncDate,
                            new ODataPropertyDefaultImpl(Constants.SyncDate, Constants.convertDateFormat1(hashtable.get(Constants.SyncDate).toString())));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.PartnerId) != null) {
                    oDataEntity.getProperties().put(Constants.PartnerId,
                            new ODataPropertyDefaultImpl(Constants.PartnerId, hashtable.get(Constants.PartnerId)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.SyncType) != null) {
                    oDataEntity.getProperties().put(Constants.SyncType,
                            new ODataPropertyDefaultImpl(Constants.SyncType, hashtable.get(Constants.SyncType)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.PartnerType) != null) {
                    oDataEntity.getProperties().put(Constants.PartnerType,
                            new ODataPropertyDefaultImpl(Constants.PartnerType, hashtable.get(Constants.PartnerType)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                if(hashtable.get(Constants.LoginId) != null) {
                    oDataEntity.getProperties().put(Constants.LoginId,
                            new ODataPropertyDefaultImpl(Constants.LoginId, hashtable.get(Constants.LoginId)));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                oDataEntity.getProperties().put(Constants.APKVersion, new ODataPropertyDefaultImpl(Constants.APKVersion, BuildConfig.VERSION_NAME));
                oDataEntity.getProperties().put(Constants.APKVersionCode, new ODataPropertyDefaultImpl(Constants.APKVersionCode, String.valueOf(BuildConfig.VERSION_CODE)));

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return oDataEntity;
    }

    public static String getPartnerTypeID(String query) throws
            OfflineODataStoreException {
        String partnerTypeID = "";
        ODataEntity entity = null;
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            ODataResponseSingle response = readSingleOdataRequest(query);
            if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                List<ODataEntity> entities = feed.getEntities();
                for (ODataEntity dataEntity : entities){
                    properties = dataEntity.getProperties();
                    property = properties.get(Constants.PartnerTypeID);
                    partnerTypeID = (String) property.getValue();
                    return partnerTypeID;
                }
            }
        }
        return partnerTypeID;
    }

    public static String getTotalOrderValue(List<ODataEntity> oDataEntity) throws OfflineODataStoreException {

        BigDecimal monthTargetVal = new BigDecimal("0");
        BigDecimal mBigDecTargetVal = new BigDecimal("0");
        //Check if the offline oData store is initialized
        if (oDataEntity != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                for (ODataEntity entity : oDataEntity) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.TotalAmount);
                    monthTargetVal = new BigDecimal("0");
                    if (property != null) {
                        try {
                            monthTargetVal = (BigDecimal) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    mBigDecTargetVal = mBigDecTargetVal.add(monthTargetVal);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return String.valueOf(mBigDecTargetVal);

    }

    public static ArrayList<InvoiceListBean> getNewInvoiceHistoryOnlineList(List<ODataEntity> oDataEntity, String status) throws OfflineODataStoreException{
        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<InvoiceListBean>();
        InvoiceListBean invoiceHisBean;
        if (oDataEntity != null) {
            Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
            ODataProperty property;
            ODataPropMap properties;
            try {
                if (!status.equalsIgnoreCase("5")) {
                    for (ODataEntity entity : oDataEntity) {
                        properties = entity.getProperties();

                        invoiceHisBean = new InvoiceListBean();

                        property = properties.get(Constants.InvoiceHisNo);
                        invoiceHisBean.setInvoiceNo((String) property.getValue());
                        property = properties.get(Constants.InvoiceDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        invoiceHisBean.setInvoiceDate(convertDateFormat);
                        invoiceHisBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, invoiceHisBean.getInvoiceDate()));
                        property = properties.get(Constants.NetAmount);
                        double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            netAmount = mStrAmount.doubleValue();
                            invoiceHisBean.setNetAmount(mStrAmount.toString());
                        }


                        property = properties.get(Constants.InvoiceQty);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        property = properties.get(Constants.UOM);
                        invoiceHisBean.setUOM((String) property.getValue());
                            /*if (checkNoUOMZero(invoiceHisBean.getUOM()))
                                invoiceHisBean.setQuantity(trimQtyDecimalPlace(qty));
                            else
                                invoiceHisBean.setQuantity(qty);*/
                        invoiceHisBean.setQuantity(ConstantsUtils.checkNoUOMZero(invoiceHisBean.getUOM(), qty));


                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());


                        property = properties.get(Constants.MaterialDesc);
                        invoiceHisBean.setMaterialDesc((String) property.getValue());
                        property = properties.get(Constants.MaterialNo);
                        invoiceHisBean.setMaterial((String) property.getValue());
                        property = properties.get(Constants.InvoiceTypDesc);
                        if (property != null)
                            invoiceHisBean.setInvoiceTypDesc((String) property.getValue());

                        property = properties.get(Constants.InvoiceType);
                        if (property != null)
                            invoiceHisBean.setInvoiceType((String) property.getValue());

                        property = properties.get(Constants.IncoTerm1);
                        if (property != null)
                            invoiceHisBean.setIncoterm1Desc((String) property.getValue());
                        property = properties.get(Constants.IncoTerm1Desc);
                        if (property != null)
                            invoiceHisBean.setIncoterm1Desc((String) property.getValue());

                        property = properties.get(Constants.IncoTerm2);
                        if (property != null)
                            invoiceHisBean.setIncoTerm2((String) property.getValue());
                        property = properties.get(Constants.PaymentTermDes);
                        if (property != null)
                            invoiceHisBean.setPaymentTermDesc((String) property.getValue());
                        property = properties.get(Constants.PaymentTerm);
                        if (property != null)
                            invoiceHisBean.setPaymentTerm((String) property.getValue());

                        double outAmt = netAmount - (collamt + devcollamt);

                        if (status.equalsIgnoreCase("")) {
                            if (devcollamt > 0) {
                                if (outAmt >= netAmount) {
                                    invoiceHisBean.setInvoiceStatus("01");
                                } else if (outAmt <= 0) {
                                    invoiceHisBean.setInvoiceStatus("03");
                                } else if (outAmt < netAmount) {
                                    invoiceHisBean.setInvoiceStatus("02");
                                }
                                alInvoiceHis.add(invoiceHisBean);
                            } else {
                                property = properties.get(Constants.PaymentStatus);
                                invoiceHisBean.setInvoiceStatus((String) property.getValue());

                                alInvoiceHis.add(invoiceHisBean);
                            }

                        }
                    }
                }
            } catch (OfflineODataStoreException e) {
                e.printStackTrace();
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }

        return alInvoiceHis;
    }

    public static ArrayList<InvoiceListBean> getInvoiceHistoryOnlineList(List<ODataEntity> oDataEntity, String status) throws OfflineODataStoreException {
        ArrayList<InvoiceListBean> alInvoiceHis = new ArrayList<InvoiceListBean>();
        InvoiceListBean invoiceHisBean;
        if (oDataEntity != null) {
            Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
            ODataProperty property;
            ODataPropMap properties;
            try {
                if (!status.equalsIgnoreCase("5")) {
                    for (ODataEntity entity : oDataEntity) {
                        properties = entity.getProperties();

                        invoiceHisBean = new InvoiceListBean();

                        property = properties.get(Constants.InvoiceHisNo);
                        invoiceHisBean.setInvoiceNo((String) property.getValue());
                        property = properties.get(Constants.InvoiceDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        invoiceHisBean.setInvoiceDate(convertDateFormat);
                        property = properties.get(Constants.NetAmount);
                        double netAmount = 0.0, collamt = 0.0, devcollamt = 0.0;
                        if (property != null) {
                            BigDecimal mStrAmount = (BigDecimal) property.getValue();
                            netAmount = mStrAmount.doubleValue();
                            invoiceHisBean.setNetAmount(mStrAmount.toString());
                        }


                        invoiceHisBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, invoiceHisBean.getInvoiceDate()));
                        property = properties.get(Constants.Currency);
                        invoiceHisBean.setCurrency((String) property.getValue());


                        double outAmt = netAmount - (collamt + devcollamt);

                        if (status.equalsIgnoreCase("")) {
                            if (devcollamt > 0) {
                                if (outAmt >= netAmount) {
                                    invoiceHisBean.setInvoiceStatus("01");
                                } else if (outAmt <= 0) {
                                    invoiceHisBean.setInvoiceStatus("03");
                                } else if (outAmt < netAmount) {
                                    invoiceHisBean.setInvoiceStatus("02");
                                }
                                alInvoiceHis.add(invoiceHisBean);
                            } else {
                                property = properties.get(Constants.InvoiceStatus);
                                invoiceHisBean.setInvoiceStatus((String) property.getValue());
                                alInvoiceHis.add(invoiceHisBean);
                            }

                        }


                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (alInvoiceHis != null && alInvoiceHis.size() > 0) {
            Collections.sort(alInvoiceHis, new Comparator<InvoiceListBean>() {
                public int compare(InvoiceListBean one, InvoiceListBean other) {
                    BigInteger i1 = null;
                    BigInteger i2 = null;
                    try {
                        i1 = new BigInteger(one.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    try {
                        i2 = new BigInteger(other.getInvoiceNo());
                    } catch (NumberFormatException e) {
                    }

                    if (i1 != null && i2 != null) {
                        return i2.compareTo(i1);
                    } else {
                        return other.getInvoiceNo().compareTo(one.getInvoiceNo());
                    }
                }
            });

        }
        return alInvoiceHis;
    }

    public static InvoiceListBean getInvoiceDetailsList(ODataEntity oDataEntity, Context context, String mStrInvNo) throws Exception {
//        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
//        OnlineODataStore store = openListener.getStore();
        String mStrInvQry = Constants.InvoiceConditions + "?$filter=" + Constants.InvoiceNo + " eq '" + mStrInvNo + "'";
        InvoiceListBean invoiceListBean = null;
        ODataProperty property;
        ODataPropMap properties;
        Calendar todayCalenderDate = Calendar.getInstance();       // get calendar instance
        todayCalenderDate.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight
        todayCalenderDate.set(Calendar.MINUTE, 0);                 // set minute in hour
        todayCalenderDate.set(Calendar.SECOND, 0);                 // set second in minute
        todayCalenderDate.set(Calendar.MILLISECOND, 0);
        try {
//            ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
//            request.setMode(Mode.Read);
//            request.setResourcePath(qry);
//            //Send a request to read the Distributors from the local database
//            ODataResponseSingle response = (ODataResponseSingle) offlineStore.executeRequest(request);
            if (oDataEntity != null) {
                ODataEntity entity = oDataEntity;
                ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
                invoiceListBean = new InvoiceListBean();
                properties = entity.getProperties();
                property = properties.get(Constants.CustomerName);
                invoiceListBean.setCustomerName((String) property.getValue());

                property = properties.get(Constants.CustomerNo);
                if (property != null)
                    invoiceListBean.setCustomerNo((String) property.getValue());

                property = properties.get(Constants.InvoiceNo);
                invoiceListBean.setInvoiceNo((String) property.getValue());

                property = properties.get(Constants.NetAmount);
                String invAmtStr = "0";
                if (property != null) {
                    BigDecimal mStrAmount = (BigDecimal) property.getValue();
                    invAmtStr = mStrAmount.toString();
                }
                invoiceListBean.setNetAmount(invAmtStr);

                property = properties.get(Constants.InvoiceDate);
                String convertDateFormat2 = null;
                if (property != null) {
                    convertDateFormat2 = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());

//                convertDateFormat = UtilConstants.convertCalenderToStringFormat((GregorianCalendar) property.getValue());
                }

                invoiceListBean.setInvoiceDate(convertDateFormat2);
                invoiceListBean.setDueDateStatus(Constants.getDueDateStatus(todayCalenderDate, convertDateFormat2));
                property = properties.get(Constants.InvoiceStatus);
                if (property != null)
                    invoiceListBean.setInvoiceStatus((String) property.getValue());


                property = properties.get(Constants.Currency);
                if (property != null)
                    invoiceListBean.setCurrency((String) property.getValue());

                property = properties.get(Constants.InvoiceTypDesc);
                if (property != null)
                    invoiceListBean.setInvoiceTypDesc((String) property.getValue());

                property = properties.get(Constants.InvoiceType);
                if (property != null)
                    invoiceListBean.setInvoiceType((String) property.getValue());


                property = properties.get(Constants.PaymentTermDesc);
                if (property != null)
                    invoiceListBean.setPaymentTermDesc((String) property.getValue());

                property = properties.get(Constants.IncoTerm1);
                if (property != null)
                    invoiceListBean.setIncoterm1Desc((String) property.getValue());

                property = properties.get(Constants.IncoTerm2);
                if (property != null)
                    invoiceListBean.setIncoTerm2((String) property.getValue());

                ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.InvoiceItemDetails);
                ODataEntitySet feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                List<ODataEntity> entities = feed.getEntities();
                ArrayList<InvoiceItemBean> soItemBeanArrayList = new ArrayList<>();
                InvoiceItemBean invoiceItemBean;
                for (ODataEntity soItemEntity : entities) {
                    invoiceItemBean = new InvoiceItemBean();
                    properties = soItemEntity.getProperties();
                    property = properties.get(Constants.MaterialDesc);
                    invoiceItemBean.setMaterialDesc(property.getValue().toString());
                    property = properties.get(Constants.GrossAmount);
                    invoiceItemBean.setGrossAmount(property.getValue().toString());
                    property = properties.get(Constants.Tax);
                    invoiceItemBean.setTax(property.getValue().toString());
                    try {
                        BigDecimal bgGrossAmt = new BigDecimal(invoiceItemBean.getGrossAmount());
                        BigDecimal bgTax = new BigDecimal(invoiceItemBean.getTax());
                        invoiceItemBean.setTotalAmount(String.valueOf(bgGrossAmt.add(bgTax)));
                    } catch (Exception e) {
                        e.printStackTrace();
                        invoiceItemBean.setTotalAmount("0.0");
                    }

                    property = properties.get(Constants.MaterialNo);
                    invoiceItemBean.setMaterialNo(property.getValue().toString());
                    property = properties.get(Constants.ItemNo);
                    invoiceItemBean.setItemNo(property.getValue().toString());
                    property = properties.get(Constants.UOM);
                    invoiceItemBean.setUOM(property.getValue().toString());
                    property = properties.get(Constants.ActualInvQty);

                    invoiceItemBean.setActualInvQty(ConstantsUtils.checkNoUOMZero(invoiceItemBean.getUOM(), property.getValue().toString()));

                    property = properties.get(Constants.Currency);
                    invoiceItemBean.setCurrency(property.getValue().toString());
                    if (!configTypeValuesList.isEmpty()) {
                        invoiceItemBean.setInvoiceMaterialDescAndNo(context.getString(R.string.po_details_display_value, invoiceItemBean.getMaterialDesc(), invoiceItemBean.getMaterialNo()));
                    } else {
                        invoiceItemBean.setInvoiceMaterialDescAndNo(invoiceItemBean.getMaterialDesc());
                    }
                    soItemBeanArrayList.add(invoiceItemBean);
                }
                Collections.sort(soItemBeanArrayList, new Comparator<InvoiceItemBean>() {
                    @Override
                    public int compare(InvoiceItemBean one, InvoiceItemBean two) {
                        return one.getItemNo().compareTo(two.getItemNo());
                    }
                });
                invoiceListBean.setInvoiceItemBeanArrayList(soItemBeanArrayList);

                ODataNavigationProperty invoicePartnerFunctionsProp = entity.getNavigationProperty(Constants.InvoicePartnerFunctions);
                ODataEntitySet pfFeed = (ODataEntitySet) invoicePartnerFunctionsProp.getNavigationContent();
                List<ODataEntity> pfEntities = pfFeed.getEntities();
                ArrayList<InvoicePartnerFunctionsBean> invoicePartnerFunctionsArrayList = new ArrayList<>();
                InvoicePartnerFunctionsBean invoicePartnerFunctions;
                for (ODataEntity soItemEntity : pfEntities) {
                    invoicePartnerFunctions = new InvoicePartnerFunctionsBean();
                    properties = soItemEntity.getProperties();
                    property = properties.get(Constants.CustomerName);
                    invoicePartnerFunctions.setCustomerName(property.getValue().toString());
                    property = properties.get(Constants.PartnerFunctionID);
                    String PartnerFunctionID = property.getValue().toString();
                    property = properties.get(Constants.PartnerFunctionDesc);
                    invoicePartnerFunctions.setPartnerFunctionDesc(property.getValue().toString());
                    property = properties.get(Constants.TransportationZoneDesc);
                    invoicePartnerFunctions.setTransportationZoneDesc(property.getValue().toString());
                    property = properties.get(Constants.VendorName);
                    invoicePartnerFunctions.setVendorNo(property.getValue().toString());
                    property = properties.get(Constants.PersonnelName);
                    invoicePartnerFunctions.setPersonnelNo(property.getValue().toString());
                    property = properties.get(Constants.CustomerNo);
                    invoicePartnerFunctions.setCustomerNo(property.getValue().toString());
                    property = properties.get(Constants.Address1);
                    invoicePartnerFunctions.setAddress1(property.getValue().toString());
                    property = properties.get(Constants.Address2);
                    invoicePartnerFunctions.setAddress2(property.getValue().toString());
                    property = properties.get(Constants.Address3);
                    invoicePartnerFunctions.setAddress3(property.getValue().toString());
                    property = properties.get(Constants.Address4);
                    invoicePartnerFunctions.setAddress4(property.getValue().toString());
                    property = properties.get(Constants.District);
                    invoicePartnerFunctions.setDistrict(property.getValue().toString());
                    property = properties.get(Constants.CityID);
                    invoicePartnerFunctions.setCityID(property.getValue().toString());
                    property = properties.get(Constants.RegionID);
                    invoicePartnerFunctions.setRegionID(property.getValue().toString());
                    property = properties.get(Constants.RegionDesc);
                    invoicePartnerFunctions.setRegionDesc(property.getValue().toString());
                    property = properties.get(Constants.CountryID);
                    invoicePartnerFunctions.setCountryID(property.getValue().toString());
                    property = properties.get(Constants.CountryDesc);
                    invoicePartnerFunctions.setCountryDesc(property.getValue().toString());
                    property = properties.get(Constants.PostalCode);
                    invoicePartnerFunctions.setPostalCode(property.getValue().toString());
                    property = properties.get(Constants.Mobile1);
                    invoicePartnerFunctions.setMobile1(property.getValue().toString());
                    property = properties.get(Constants.Mobile2);
                    invoicePartnerFunctions.setMobile2(property.getValue().toString());
                    property = properties.get(Constants.EmailID);
                    invoicePartnerFunctions.setEmailID(property.getValue().toString());
                    property = properties.get(Constants.PartnerFunctionID);
                    invoicePartnerFunctions.setPartnerFunctionID(property.getValue().toString());
                    invoicePartnerFunctionsArrayList.add(invoicePartnerFunctions);
                }
                invoiceListBean.setInvoicePartnerFunctionsArrayList(invoicePartnerFunctionsArrayList);

                ArrayList<InvoiceConditionsBean> invoiceConditionsFunctionsArrayList = new ArrayList<>();
                List<ODataEntity> invcEntities = null;

                if(Constants.getRollID(context)){
                    ODataNavigationProperty invoiceConditionProp = entity.getNavigationProperty(Constants.InvoiceConditions);
                    ODataEntitySet invConFeed = (ODataEntitySet) invoiceConditionProp.getNavigationContent();
                    invcEntities = invConFeed.getEntities();
                }else {
                    ODataRequestParamSingle requestInvCond = new ODataRequestParamSingleDefaultImpl();
                    requestInvCond.setMode(Mode.Read);
                    requestInvCond.setResourcePath(mStrInvQry);
                    //Send a request to read the Distributors from the local database
                    ODataResponseSingle responseInvCond = (ODataResponseSingle) offlineStore.executeRequest(requestInvCond);
                    if (responseInvCond.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                responseInvCond.getPayload();

                        //Check if the response contains EntitySet
                    } else if (responseInvCond.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet invcFeed = (ODataEntitySet) responseInvCond.getPayload();
                        invcEntities = invcFeed.getEntities();
                    }
                }


                InvoiceConditionsBean invoiceConditions;
                for (ODataEntity invcEntity : invcEntities) {
                    invoiceConditions = new InvoiceConditionsBean();
                    properties = invcEntity.getProperties();
                    property = properties.get(Constants.ConditionAmt);
                    invoiceConditions.setConditionAmt(property.getValue().toString());
                    property = properties.get(Constants.ConditionAmtPerUOM);
                    invoiceConditions.setConditionAmtPerUOM(property.getValue().toString());
                    property = properties.get(Constants.ConditionCatDesc);
                    invoiceConditions.setConditionCatDesc(property.getValue().toString());
                    property = properties.get(Constants.ConditionCatID);
                    invoiceConditions.setConditionCatID(property.getValue().toString());
                    property = properties.get(Constants.ConditionValue);
                    invoiceConditions.setConditionValue(property.getValue().toString());
                    property = properties.get(Constants.Currency);
                    invoiceConditions.setCurrency(property.getValue().toString());
                    property = properties.get(Constants.Name);
                    invoiceConditions.setName(property.getValue().toString());
                    property = properties.get(Constants.SequenceNo);
                    if (property != null) {
                        invoiceConditions.setSequenceNo(property.getValue().toString());
                    }
                    invoiceConditionsFunctionsArrayList.add(invoiceConditions);
                }

                Collections.sort(invoiceConditionsFunctionsArrayList, new Comparator<InvoiceConditionsBean>() {
                    @Override
                    public int compare(InvoiceConditionsBean arg0, InvoiceConditionsBean arg1) {

                        return arg0.getSequenceNo().compareTo(arg1.getSequenceNo());
                    }
                });

           /* ODataNavigationProperty invoiceConditionsProp = entity.getNavigationProperty(Constants.InvoiceConditions);
            ODataEntitySet invcFeed = (ODataEntitySet) invoiceConditionsProp.getNavigationContent();
            List<ODataEntity> invcEntities = invcFeed.getEntities();
            ArrayList<InvoiceConditionsBean> invoiceConditionsFunctionsArrayList = new ArrayList<>();
            InvoiceConditionsBean invoiceConditions;
            for (ODataEntity invcEntity : invcEntities) {
                invoiceConditions = new InvoiceConditionsBean();
                properties = invcEntity.getProperties();
                property = properties.get(Constants.ConditionAmt);
                invoiceConditions.setConditionAmt(property.getValue().toString());
                property = properties.get(Constants.ConditionAmtPerUOM);
                invoiceConditions.setConditionAmtPerUOM(property.getValue().toString());
                property = properties.get(Constants.ConditionCatDesc);
                invoiceConditions.setConditionCatDesc(property.getValue().toString());
                property = properties.get(Constants.ConditionCatID);
                invoiceConditions.setConditionCatID(property.getValue().toString());
                property = properties.get(Constants.ConditionValue);
                invoiceConditions.setConditionValue(property.getValue().toString());
                property = properties.get(Constants.Currency);
                invoiceConditions.setCurrency(property.getValue().toString());
                property = properties.get(Constants.Name);
                invoiceConditions.setName(property.getValue().toString());

                invoiceConditionsFunctionsArrayList.add(invoiceConditions);
            }*/

                //***************************************
                InvConItemBean invConItemBean = new InvConItemBean();
                ArrayList<InvConItemBean> invConditionItemDetaiBeanArrayList = new ArrayList<>();
                BigDecimal totalConditionValue = new BigDecimal("0.00");
                BigDecimal totalConditionAmt = new BigDecimal("0.00");
                if (invcEntities != null && invcEntities.size() > 0) {
                    for (ODataEntity soHeader : invcEntities) {
                        invConItemBean = getConditionInv(soHeader);
                        if (invConItemBean != null) {
                            if (invConItemBean.getName().length() > 0) {
                                try {
                                    totalConditionValue = totalConditionValue.add(new BigDecimal(invConItemBean.getConditionValue()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                try {
                                    totalConditionAmt = totalConditionAmt.add(new BigDecimal(invConItemBean.getConditionAmt()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                            }

                        }
                    }
                    if (invConItemBean != null) {
                        invConItemBean.setConditionTotalAmt(totalConditionAmt + "");
                        invConItemBean.setConditionTotalValue(totalConditionValue + "");
                    }
                    invConditionItemDetaiBeanArrayList.add(invConItemBean);
                }

                invoiceListBean.setInvConditionItemDetaiBeanArrayList(invConditionItemDetaiBeanArrayList);
                invoiceListBean.setInvoiceConditionsArrayList(invoiceConditionsFunctionsArrayList);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new com.arteriatech.mutils.common.OfflineODataStoreException(e.getMessage());
        }
        return invoiceListBean;
    }

    public static List<SalesOrderBean> getSOListDBOnline(Context context, List<ODataEntity> oDataEntity,
                                                   String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (oDataEntity != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                    //Retrieve the data from the response
                    for (ODataEntity entity : oDataEntity) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.StatusID);
                        salesOrderBean.setStatusID((String) property.getValue());

                        property = properties.get(Constants.DelvStatusID);
                        salesOrderBean.setDelvStatus((String) property.getValue());

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());
                        property = properties.get(Constants.Material);
                        salesOrderBean.setMaterialNo((String) property.getValue());
                        property = properties.get(Constants.MaterialDesc);
                        salesOrderBean.setMaterialDesc((String) property.getValue());

                        property = properties.get(Constants.NetAmount);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");

                        property = properties.get(Constants.Quantity);
                        String qty = "0.000";
                        if (property != null) {
                            qty = property.getValue().toString();
                        }
                        property = properties.get(Constants.UOM);
                        salesOrderBean.setUom((String) property.getValue());
                       /* if (checkNoUOMZero(salesOrderBean.getUom()))
                            salesOrderBean.setQAQty(trimQtyDecimalPlace(qty));
                        else
                            salesOrderBean.setQAQty(qty);*/
                        salesOrderBean.setQAQty(ConstantsUtils.checkNoUOMZero(salesOrderBean.getUom(), qty));


                /*        property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/
//
//
               /*         property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                       salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");*/

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        salesOrderBean.setOrderDate(convertDateFormat);

                        String soTxtQry = Constants.SOTexts + "?$select=" + Constants.Text + " &$filter=SONo eq '" + salesOrderBean.getOrderNo() + "'";
                        String soTxt = UtilOfflineManager.getColumnVal(offlineStore, soTxtQry, Constants.Text);
                        salesOrderBean.setRemarks(soTxt != null ? soTxt : "");


                        salesOrderBeanList.add(salesOrderBean);
                    }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store =  ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return salesOrderBeanList;
    }

    public static List<SalesOrderBean> getSecondarySalesOrderListOnline(Context context, List<ODataEntity> entities, String mStrCustomerNo, String status) throws OfflineODataStoreException {

        List<SalesOrderBean> salesOrderBeanList = new ArrayList<>();
        if (entities != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                    //Retrieve the data from the response
                    for (ODataEntity entity : entities) {
                        boolean isCancelledSO = false;
                        properties = entity.getProperties();

                        salesOrderBean = new SalesOrderBean();

                        property = properties.get(Constants.SONo);
                        String SoNo = (String) property.getValue();
                        salesOrderBean.setOrderNo((String) property.getValue());

                        property = properties.get(Constants.DelvStatus);
                        salesOrderBean.setDelvStatus((String) property.getValue());
                       /* property = properties.get(Constants.DelvStatusDesc);
                        salesOrderBean.setDelvStatusDesc((String) property.getValue());*/
                        property = properties.get(Constants.Status);
                        salesOrderBean.setStatusID((String) property.getValue());

                       /* property = properties.get(Constants.StatusDesc);
                        salesOrderBean.setStatusDesc((String) property.getValue());*/

                        property = properties.get(Constants.Currency);
                        salesOrderBean.setCurrency((String) property.getValue());

                        /*property = properties.get(Constants.NetPrice);
                        BigDecimal netAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setNetAmount(netAmount.doubleValue() + "");*/


                       /* property = properties.get(Constants.TaxAmount);
                        BigDecimal taxAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTaxAmt(taxAmount.doubleValue() + "");*/


                        property = properties.get(Constants.TotalAmount);
                        BigDecimal totalAmount = (BigDecimal) property.getValue();
                        salesOrderBean.setTotalAmt(totalAmount.doubleValue() + "");

                        property = properties.get(Constants.OrderDate);
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat(((GregorianCalendar) property.getValue()));
                        salesOrderBean.setOrderDate(convertDateFormat);


                       /* property = properties.get(Constants.OrderType);
                        salesOrderBean.setOrderType((String) property.getValue());

                        property = properties.get(Constants.OrderTypeDesc);
                        salesOrderBean.setOrderTypeDesc((String) property.getValue());*/

                      /*  property = properties.get(Constants.SalesArea);
                        salesOrderBean.setSalesArea((String) property.getValue());

                        property = properties.get(Constants.SalesAreaDesc);
                        salesOrderBean.setSalesAreaDesc((String) property.getValue());*/

                       /* property = properties.get(Constants.CustomerNo);
                        salesOrderBean.setSoldTo((String) property.getValue());

                        property = properties.get(Constants.CustomerName);
                        salesOrderBean.setSoldToName((String) property.getValue());*/


                       /* property = properties.get(Constants.ShipToParty);
                        salesOrderBean.setShipTo((String) property.getValue());

                        property = properties.get(Constants.ShipToPartyName);
                        salesOrderBean.setShipToName((String) property.getValue());


                        property = properties.get(Constants.ShippingTypeID);
                        salesOrderBean.setShippingTypeID((String) property.getValue());

                        property = properties.get(Constants.ShippingTypeDesc);
                        salesOrderBean.setShippingTypeDesc((String) property.getValue());*/

//                        property = properties.get("ZZFrwadgAgentName");
//                        salesOrderBean.setForwardingAgentName((String) property.getValue());
//
//
//                        property = properties.get("ZZFrwadgAgent");
//                        salesOrderBean.setForwardingAgent((String) property.getValue());

                       /* property = properties.get(Constants.Plant);
                        salesOrderBean.setPlant((String) property.getValue());

                        property = properties.get(Constants.PlantDesc);
                        salesOrderBean.setPlantDesc((String) property.getValue());

                        property = properties.get(Constants.Incoterm1);
                        salesOrderBean.setIncoTerm1((String) property.getValue());

                        property = properties.get(Constants.Incoterm1Desc);
                        salesOrderBean.setIncoterm1Desc((String) property.getValue());


                        property = properties.get(Constants.Incoterm2);
                        salesOrderBean.setIncoterm2((String) property.getValue());*/

                       /* property = properties.get(Constants.Payterm);
                        salesOrderBean.setPaymentTerm((String) property.getValue());

                        property = properties.get(Constants.PaytermDesc);
                        salesOrderBean.setPaytermDesc((String) property.getValue());
*/

//                        property = properties.get(Constants.SalesDist);
//                        salesOrderBean.setSalesDistrict((String) property.getValue());
//
//
//                        property = properties.get(Constants.SalesDistDesc);
//                        salesOrderBean.setSalesDistrictDesc((String) property.getValue());
//
//
//
//                        property = properties.get(Constants.Route);
//                        salesOrderBean.setRoute((String) property.getValue());
//
//
//                        property = properties.get(Constants.RouteDesc);
//                        salesOrderBean.setRouteDesc((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessing);
//                        salesOrderBean.setSplProcessing((String) property.getValue());
//
//
//                        property = properties.get(Constants.SplProcessingDesc);
//                        salesOrderBean.setSplProcessingDesc((String) property.getValue());


//                        String remarks = getSosText(Constants.SOTexts + "?$filter=" + Constants.SONo + " eq '" + SoNo + "'");
//                        salesOrderBean.setRemarks(remarks);

                        salesOrderBeanList.add(salesOrderBean);
                    }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        if (getDeviceCancelledSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOCancel, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDelvStatus("F");
                                    if (!status.equalsIgnoreCase("F") && !status.equalsIgnoreCase(Constants.str_00)) {
                                        salesOrderBeanList.remove(item);
                                    }
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (getDeviceChangedSO(context, mStrCustomerNo) > 0) {
            Set<String> set = new HashSet<>();
            SharedPreferences sharedPreferences = context.getSharedPreferences(Constants.PREFS_NAME, 0);
            set = sharedPreferences.getStringSet(Constants.SOUpdate, null);
            if (set != null && !set.isEmpty()) {
                Iterator itr = set.iterator();
                while (itr.hasNext()) {
                    String store = null, deviceNo = "";
                    try {
                        deviceNo = itr.next().toString();
                        store = ConstantsUtils.getFromDataVault(deviceNo,context);
                    } catch (Throwable e) {
                        e.printStackTrace();
                    }
                    try {
                        JSONObject fetchJsonHeaderObject = new JSONObject(store);
                        if (fetchJsonHeaderObject.getString(Constants.EntityType).equalsIgnoreCase(Constants.SOUpdate)
                                && fetchJsonHeaderObject.getString(Constants.CustomerNo).equalsIgnoreCase(mStrCustomerNo)) {
                            for (SalesOrderBean item : salesOrderBeanList) {
                                if (item.getOrderNo().equalsIgnoreCase(fetchJsonHeaderObject.getString(Constants.SONo))) {
                                    item.setDeviceNo(fetchJsonHeaderObject.getString(Constants.SONo));
                                    item.setNetAmount(fetchJsonHeaderObject.optString(Constants.TotalAmount));
                                    item.setRemarks(fetchJsonHeaderObject.optString(Constants.Remarks));
                                    break;
                                }
                            }
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        ArrayList<SalesOrderBean> soArrayList = new ArrayList<>();
        /*custom sorting start*/
        String lastDate = "";
        for (int i = 0; i < salesOrderBeanList.size(); i++) {
            SalesOrderBean soListBean = salesOrderBeanList.get(i);
            String currentDate = soListBean.getOrderDate();
            if (!currentDate.equalsIgnoreCase(lastDate)) {
                ArrayList<SalesOrderBean> tempNumberSortingList = new ArrayList<>();
                for (int j = i; j < salesOrderBeanList.size(); j++) {
                    SalesOrderBean soListBean1 = salesOrderBeanList.get(j);
                    if (soListBean1.getOrderDate().equalsIgnoreCase(currentDate)) {
                        tempNumberSortingList.add(soListBean1);
                    } else {
                        break;
                    }
                }
                Collections.sort(tempNumberSortingList, new Comparator<SalesOrderBean>() {
                    public int compare(SalesOrderBean one, SalesOrderBean other) {
                        BigInteger i1 = null;
                        BigInteger i2 = null;
                        try {
                            i1 = new BigInteger(one.getOrderNo());
                        } catch (NumberFormatException e) {
                        }

                        try {
                            i2 = new BigInteger(other.getOrderNo());
                        } catch (NumberFormatException e) {
                        }
                        if (i1 != null && i2 != null) {
                            return i2.compareTo(i1);
                        } else {
                            return other.getOrderNo().compareTo(one.getOrderNo());
                        }
                    }
                });
                soArrayList.addAll(tempNumberSortingList);
                lastDate = currentDate;
            }
        }
        /*custom sorting end*/
        return soArrayList;

    }

    public static SOListBean getSODetailsOnline(ODataEntity entities, Context mContext) {
        SOListBean soListBean = null;
        if (entities != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path
                ArrayList<ConfigTypeValues> configTypeValuesList = OfflineManager.checkMaterialCodeDisplay();
                    ODataEntitySet feed;
                    soListBean = new SOListBean();
                  /*  ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();*/
                    ODataEntity entity = entities;
                    //Retrieve the data from the response
                    properties = entity.getProperties();
                    property = properties.get(Constants.SONo);
                    if (property != null)
                        soListBean.setSONo(property.getValue().toString());

                    try {
                        property = properties.get(Constants.TotalAmount);
                        soListBean.setTotalAmt(property.getValue().toString());

                        property = properties.get(Constants.Currency);
                        soListBean.setCurrency(property.getValue().toString());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    property = properties.get(Constants.SalesAreaDesc);
                    soListBean.setSalesAreaDesc(property.getValue().toString());
                    property = properties.get(Constants.SalesArea);
                    soListBean.setSalesArea(property.getValue().toString());
                    property = properties.get(Constants.OrderTypeDesc);
                    soListBean.setOrderTypeDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderType);
                    soListBean.setOrderType(property.getValue().toString());
                    property = properties.get(Constants.ShipToPartyName);
                    soListBean.setShipToName(property.getValue().toString());
                    property = properties.get(Constants.ShipToParty);
                    soListBean.setShipTo(property.getValue().toString());
                    property = properties.get(Constants.TransporterName);
                    if (property != null)
                        soListBean.setTransportName(property.getValue().toString());
                    property = properties.get(Constants.TransporterID);
                    if (property != null)
                        soListBean.setTransportNameID(property.getValue().toString());

                    property = properties.get(Constants.Plant);
                    if (property != null) {
                        soListBean.setPlant((String) property.getValue());
                    }

                    property = properties.get(Constants.UnloadingPoint);
                    if (property != null) {
                        soListBean.setUnloadingPointDesc((String) property.getValue());
                    }

                    property = properties.get(Constants.ReceivingPoint);
                    if (property != null) {
                        soListBean.setReceivingPointDesc((String) property.getValue());
                    }
                    property = properties.get(Constants.PaytermDesc);
                    if (property != null) {
                        soListBean.setPaymentTermDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Payterm);
                    if (property != null) {
                        soListBean.setPaymentTerm(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1Desc);
                    if (property != null) {
                        soListBean.setIncoterm1Desc(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm1);
                    if (property != null) {
                        soListBean.setIncoTerm1(property.getValue().toString());
                    }
                    property = properties.get(Constants.Incoterm2);
                    if (property != null) {
                        soListBean.setIncoterm2(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeID);
                    if (property != null) {
                        soListBean.setShippingPoint(property.getValue().toString());
                    }
                    property = properties.get(Constants.ShippingTypeDesc);
                    if (property != null) {
                        soListBean.setShippingPointDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesOffice);
                    if (property != null) {
                        soListBean.setSalesOfficeId(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleOffDesc);
                    if (property != null) {
                        soListBean.setSaleOffDesc(property.getValue().toString());
                    }

                    property = properties.get(Constants.SalesGroup);
                    if (property != null) {
                        soListBean.setSalesGroup(property.getValue().toString());
                    }
                    property = properties.get(Constants.SaleGrpDesc);
                    if (property != null) {
                        soListBean.setSaleGrpDesc(property.getValue().toString());
                    }
                    soListBean.setAddress(SOUtils.getAddressValue(properties));

                    property = properties.get(Constants.CustomerPO);
                    if (property != null) {
                        soListBean.setPONo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerNo);
                    if (property != null) {
                        soListBean.setSoldTo(property.getValue().toString());
                    }
                    property = properties.get(Constants.CustomerName);
                    if (property != null) {
                        soListBean.setSoldToName(property.getValue().toString());
                    }
                    property = properties.get(Constants.Status);
                    if (property != null) {
                        soListBean.setStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.DelvStatus);
                    if (property != null) {
                        soListBean.setDelvStatus(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstyp);
                    if (property != null) {
                        soListBean.setMeansOfTranstyp(property.getValue().toString());
                    }
                    property = properties.get(Constants.MeansOfTranstypDesc);
                    if (property != null) {
                        soListBean.setMeansOfTranstypDesc(property.getValue().toString());
                    }
                    property = properties.get(Constants.NetWeight);
                    if (property != null) {
                        soListBean.setmStrTotalWeight(property.getValue().toString());
                    }
                    property = properties.get(Constants.NetWeightUom);
                    if (property != null) {
                        soListBean.setmStrWeightUOM(property.getValue().toString());
                    }
                    //checkNoUOMZero(soListBean.getmStrWeightUOM(), soListBean.getmStrTotalWeight()
                    /*if (checkNoUOMZero(soListBean.getmStrWeightUOM()))
                        soListBean.setmStrTotalWeight(trimQtyDecimalPlace(soListBean.getmStrTotalWeight()));
                    else
                        soListBean.setmStrTotalWeight(soListBean.getmStrTotalWeight());*/
                    soListBean.setmStrTotalWeight(ConstantsUtils.checkNoUOMZero(soListBean.getmStrWeightUOM(), soListBean.getmStrTotalWeight()));

                    property = properties.get(Constants.TotalQuantity);
                    if (property != null) {
                        soListBean.setQuantity(trimQtyDecimalPlace(property.getValue().toString()));
                    }
                    property = properties.get(Constants.QuantityUom);
                    if (property != null) {
                        soListBean.setmSteTotalQtyUOM(property.getValue().toString());
                    }
                    property = properties.get(Constants.SalesDist);
                    if (property != null)
                        soListBean.setSalesDist(property.getValue().toString());
                    property = properties.get(Constants.SalesDistDesc);
                    if (property != null)
                        soListBean.setSalesDistDesc(property.getValue().toString());
                    property = properties.get(Constants.OrderDate);
                    if (property != null) {
                        String convertDateFormat = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                        soListBean.setOrderDate(convertDateFormat);
                    }
                    property = properties.get(Constants.CustomerPODate);
                    if (property != null) {
                        try {
                            String customerPoDate = ConstantsUtils.convertCalenderToDisplayDateFormat((GregorianCalendar) property.getValue());
                            soListBean.setPODate(customerPoDate);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    ODataNavigationProperty soPartnerProp = entity.getNavigationProperty(Constants.SOPartnerFunctions);
                    ODataEntitySet feedParFun = (ODataEntitySet) soPartnerProp.getNavigationContent();
                    List<ODataEntity> soPartnerEntities = feedParFun.getEntities();
                    ArrayList<CustomerPartnerFunctionBean> customerPartnerFunctionList = new ArrayList<>();
                    for (ODataEntity partnerFunctionEntity : soPartnerEntities) {
                        CustomerPartnerFunctionBean partnerFunctions
                                = new CustomerPartnerFunctionBean();
                        properties = partnerFunctionEntity.getProperties();
                        property = properties.get(Constants.PartnerFunctionID);
                        partnerFunctions.setPartnerFunctionID(property.getValue().toString());
                        partnerFunctions = getCustomerPartnerFunction(properties, partnerFunctions);

                        customerPartnerFunctionList.add(partnerFunctions);
                    }

                    soListBean.setCustomerPartnerFunctionList(customerPartnerFunctionList);
                    ODataNavigationProperty soTextProp = entity.getNavigationProperty(Constants.SOTexts);
                    feed = (ODataEntitySet) soTextProp.getNavigationContent();
                    List<ODataEntity> soTextEntities = feed.getEntities();

                    for (ODataEntity soTextEntity : soTextEntities) {
                        properties = soTextEntity.getProperties();
                        property = properties.get(Constants.Text);
                        soListBean.setRemarks(property.getValue().toString());
                    }
                    /*soItem details*/
                    ODataNavigationProperty soItemDetailsProp = entity.getNavigationProperty(Constants.SOItemDetails);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> feedEntities = feed.getEntities();
                    ArrayList<SOItemBean> soItemBeanArrayList = new ArrayList<>();
                    SOItemBean soItemBean;
                    /*soItem details finish*/
                    /*so condition start*/
                    soItemDetailsProp = entity.getNavigationProperty(Constants.SOConditions);
                    feed = (ODataEntitySet) soItemDetailsProp.getNavigationContent();
                    List<ODataEntity> soConditionEntities = feed.getEntities();


                    for (ODataEntity soItemEntity : feedEntities) {
                        soItemBean = new SOItemBean();
                        properties = soItemEntity.getProperties();
                        property = properties.get(Constants.Material);
                        soItemBean.setMatCode(property.getValue().toString());
                        property = properties.get(Constants.MaterialDesc);
                        soItemBean.setMatDesc(property.getValue().toString());
                        if (!configTypeValuesList.isEmpty()) {
                            soItemBean.setMatNoAndDesc(mContext.getString(R.string.po_details_display_value, soItemBean.getMatDesc(), soItemBean.getMatCode()));
                        } else {
                            soItemBean.setMatNoAndDesc(soItemBean.getMatDesc());
                        }
                        property = properties.get(Constants.UOM);
                        soItemBean.setUom(property.getValue().toString());

                        property = properties.get(Constants.HighLevellItemNo);
                        soItemBean.setHighLevellItemNo(property.getValue().toString());
                        property = properties.get(Constants.ItemFlag);
                        soItemBean.setItemFlag(property.getValue().toString());

                        property = properties.get(Constants.ItemCategory);
                        soItemBean.setItemCategory(property.getValue().toString());


                        property = properties.get(Constants.Quantity);
                        if (checkNoUOMZero(String.valueOf(soItemBean.getUom()))) {
                            soItemBean.setSoQty(trimQtyDecimalPlace(property.getValue().toString()));
                        } else {
                            soItemBean.setSoQty(property.getValue().toString());
                        }
//                        soItemBean.setSoQty(property.getValue().toString());

                      /*  if (!configTypeValuesList.isEmpty()) {
                            soItemBean.setMatNoAndDesc(mContext.getString(R.string.po_details_display_value, soItemBean.getMatDesc(), soItemBean.getMatCode()));
                        } else {
                            soItemBean.setMatNoAndDesc(soItemBean.getMatDesc());
                        }*/
                        property = properties.get(Constants.UnitPrice);
                        soItemBean.setUnitPrice(property.getValue().toString());
                        property = properties.get(Constants.NetAmount);
                        soItemBean.setNetAmount(property.getValue().toString());
                        property = properties.get(Constants.Plant);
                        soItemBean.setPlantId(property.getValue().toString());
                        property = properties.get(Constants.PlantDesc);
                        soItemBean.setPlantDesc(property.getValue().toString());
                        property = properties.get(Constants.Currency);
                        soItemBean.setCurrency(property.getValue().toString());
                        property = properties.get(Constants.ItemNo);
                        soItemBean.setItemNo(property.getValue().toString());
                        property = properties.get(Constants.SONo);
                        soItemBean.setSetSONo(property.getValue().toString());
                        property = properties.get(Constants.DelvStatusID);
                        soItemBean.setDelvStatusID(property.getValue().toString());
                        property = properties.get(Constants.StatusID);
                        soItemBean.setStatusID(property.getValue().toString());
                        property = properties.get(Constants.RejReason);
                        soItemBean.setRejectionId(property.getValue().toString());
                        property = properties.get(Constants.RejReasonDesc);
                        soItemBean.setRejectionStatusDesc(property.getValue().toString());
                        if(!TextUtils.isEmpty(soItemBean.getRejectionId()) && soItemBean.getRejectionId().equalsIgnoreCase("99"))
                            soItemBean.setRemoved(true);

                        /*start so condition*/
                        ArrayList<SOConditionItemDetaiBean> soConditionItemDetaiBeanArrayList = new ArrayList<>();
                        SOConditionItemDetaiBean soConditionItemDetaiBean;
                        BigDecimal totalNormalAmt = new BigDecimal("0.00");
                        BigDecimal subTotalAmt = new BigDecimal("0.00");
                        for (ODataEntity soHeader : soConditionEntities) {
                            soConditionItemDetaiBean = getCondition(soHeader);
                            if (soConditionItemDetaiBean != null) {
                                try {
                                    totalNormalAmt = totalNormalAmt.add(new BigDecimal(soConditionItemDetaiBean.getAmount()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                try {
                                    subTotalAmt = subTotalAmt.add(new BigDecimal(soConditionItemDetaiBean.getConditionValue()));
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                soConditionItemDetaiBeanArrayList.add(soConditionItemDetaiBean);
                            }
                        }
                        Collections.sort(soConditionItemDetaiBeanArrayList, new Comparator<SOConditionItemDetaiBean>() {
                            @Override
                            public int compare(SOConditionItemDetaiBean arg0, SOConditionItemDetaiBean arg1) {

                                return arg0.getConditionCounter().compareTo(arg1.getConditionCounter());
                            }
                        });

                        soConditionItemDetaiBean = new SOConditionItemDetaiBean();
                        soConditionItemDetaiBean.setViewType("T");
                        soConditionItemDetaiBean.setName("Total");
                        soConditionItemDetaiBean.setAmount(totalNormalAmt + "");
                        soConditionItemDetaiBean.setConditionValue(subTotalAmt + "");
                        soConditionItemDetaiBeanArrayList.add(soConditionItemDetaiBean);
                        soItemBean.setConditionItemDetaiBeanArrayList(soConditionItemDetaiBeanArrayList);
                        soItemBeanArrayList.add(soItemBean);
                    }
                    Collections.sort(soItemBeanArrayList, new Comparator<SOItemBean>() {
                        @Override
                        public int compare(SOItemBean one, SOItemBean two) {
                            return one.getItemNo().compareTo(two.getItemNo());
                        }
                    });
                    soListBean.setSoItemBeanArrayList(soItemBeanArrayList);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return soListBean;
    }

    public static List<CreditLimitBean> getCreditLimitOnline(List<ODataEntity> entities) {
        List<CreditLimitBean> limitBeanList = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;

        try {
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    CreditLimitBean creditLimitBean = new CreditLimitBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.BalanceAmount);
                    if (property != null)
                        creditLimitBean.setBalanceAmount(property.getValue().toString());

                    property = properties.get(Constants.Currency);
                    if (property != null)
                        creditLimitBean.setCurrency(property.getValue().toString());
                    property = properties.get(Constants.CreditControlAreaID);
                    if (property != null)
                        creditLimitBean.setCreditControlAreaID(property.getValue().toString());
                    limitBeanList.add(creditLimitBean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return limitBeanList;
    }

    public static List<CreditLimitBean> getCreditLimitOnline(JSONArray jsonArray) {
        List<CreditLimitBean> limitBeanList = new ArrayList<>();

        try {
            if (jsonArray != null) {
                for (int i=0;i<jsonArray.length();i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    CreditLimitBean creditLimitBean = new CreditLimitBean();
                    creditLimitBean.setBalanceAmount(jsonObject.optString(Constants.BalanceAmount));

                    creditLimitBean.setCurrency(jsonObject.optString(Constants.Currency));
                    creditLimitBean.setCreditControlAreaID(jsonObject.optString(Constants.CreditControlAreaID));
                    limitBeanList.add(creditLimitBean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return limitBeanList;
    }

    public static String getCreditControlArea(String creditLimitQry) {
        String creditContronID = "";
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, creditLimitQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.CreditControlAreaID);
                    creditContronID = property.getValue().toString();
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        return creditContronID;
    }
 public static boolean getSyncStatus(String syncType) throws OfflineODataStoreException{

        String qrySyncDoneorNot = Constants.SyncHistroy + "?$filter=" + Constants.SyncDate + " eq datetime'"+UtilConstants.getNewDate()+"' and "+Constants.PartnerId+ " eq '"+Constants.getSPGUID(Constants.SPGUID).replaceAll("-","")+"' and "+Constants.SyncType + " eq '"+syncType+"'";
        try {
            if (offlineStore != null) {
                try {
                    //Define the resource path
                    String resourcePath = qrySyncDoneorNot;
                    ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                    request.setMode(ODataRequestParamSingle.Mode.Read);
                    request.setResourcePath(resourcePath);
                    //Send a request to read the Retailer details from the local database
                    ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                            executeRequest(request);

                    if (response.getPayloadType() == ODataPayload.Type.Error) {
                        ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                                response.getPayload();
                        throw new OfflineODataStoreException(error.getMessage());
                        //Check if the response contains EntitySet
                    } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                        ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                        List<ODataEntity> entities = feed.getEntities();
                        if (entities.size() > 0) {
                            return true;
                        }
                    }
                } catch (Exception e) {
                    try {
                        throw new OfflineODataStoreException(e);
                    } catch (OfflineODataStoreException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Log.e("Sync History Info","ANR EXCEPTION OCCURRED");
        }
        return false;
    }

    public static String getLoginID(String logiQry) {
        String loginID = "";
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.LoginID);
                    loginID = property.getValue().toString();
                    break;
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }

        return loginID;
    }

    public static DefaultValueBean getConfigListWithDefaultValAndNone(String qry) throws OfflineODataStoreException {
        ArrayList<DefaultValueBean> defaultValueBeenList = new ArrayList<>();
        //Check if the offline oData store is initialized
        DefaultValueBean defaultValueBeen = new DefaultValueBean();
        ODataProperty property;
        ODataPropMap properties;
        String unloadingPoint = "";
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    defaultValueBeen = new DefaultValueBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.SalesArea);
                    try {
                        String saleArea = (String) property.getValue();
                        String[] divisionArea = saleArea.split("/");
                        defaultValueBeen.setDivision(divisionArea[2]);
                        defaultValueBeen.setDistChannelID(divisionArea[1]);
                        defaultValueBeen.setSalesOrgID(divisionArea[0]);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    defaultValueBeen.setSalesArea((String) property.getValue());
                    property = properties.get(Constants.SalesAreaDesc);
                    defaultValueBeen.setSalesAreaDesc((String) property.getValue());
                    property = properties.get(Constants.ShippingConditionID);
                    defaultValueBeen.setShippingConditionID((String) property.getValue());
                    property = properties.get(Constants.ShippingConditionDesc);
                    defaultValueBeen.setShippingConditionDesc((String) property.getValue());
                    property = properties.get(Constants.DeliveringPlantID);
                    defaultValueBeen.setDeliveringPlantID((String) property.getValue());
                    property = properties.get(Constants.DeliveringPlantDesc);
                    defaultValueBeen.setDeliveringPlantDesc((String) property.getValue());
                    property = properties.get(Constants.TransportationZoneID);
                    defaultValueBeen.setTransportationZoneID((String) property.getValue());
                    property = properties.get(Constants.TransportationZoneDesc);
                    defaultValueBeen.setTransportationZoneDesc((String) property.getValue());
                    property = properties.get(Constants.Incoterms1ID);
                    defaultValueBeen.setIncoterms1ID((String) property.getValue());
                    property = properties.get(Constants.Incoterms1Desc);
                    defaultValueBeen.setIncoterms1Desc((String) property.getValue());
                    property = properties.get(Constants.Incoterms2);
                    defaultValueBeen.setIncoterms2((String) property.getValue());
                    property = properties.get(Constants.PaymentTermID);
                    defaultValueBeen.setPaymentTermID((String) property.getValue());
                    property = properties.get(Constants.PaymentTermDesc);
                    defaultValueBeen.setPaymentTermDesc((String) property.getValue());
                    property = properties.get(Constants.CreditControlAreaID);
                    defaultValueBeen.setCreditControlAreaID((String) property.getValue());
                    property = properties.get(Constants.CreditControlAreaDesc);
                    defaultValueBeen.setCreditControlAreaDesc((String) property.getValue());
                    property = properties.get(Constants.SalesOfficeID);
                    defaultValueBeen.setSalesOfficeID((String) property.getValue());
                    property = properties.get(Constants.SalesOfficeDesc);
                    defaultValueBeen.setSalesOfficeDesc((String) property.getValue());
                    property = properties.get(Constants.CustomerGrpID);
                    defaultValueBeen.setCustomerGrpID((String) property.getValue());
                    property = properties.get(Constants.DeliveringPlantDesc);
                    defaultValueBeen.setDeliveringPlantDesc((String) property.getValue());
                    property = properties.get(Constants.DeliveringPlantID);
                    defaultValueBeen.setDeliveringPlantID((String) property.getValue());
                    defaultValueBeen.setUnloadingPoint(unloadingPoint);
                    defaultValueBeen.setDisplayDropDown(defaultValueBeen.getSalesArea() + " - " + defaultValueBeen.getSalesAreaDesc());
                }
            }
        } catch (Exception e) {
            throw new OfflineODataStoreException(e);
        }
        return defaultValueBeen;

    }

    public static ArrayList<String> getSaleAreaFromUsrAth(String logiQry) {
        String authOrgTypeID = "";
        String authOrgValue = "";
        ArrayList<String> saleArea = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.AuthOrgTypeID);
                    authOrgTypeID = property.getValue().toString();
                    property = properties.get(Constants.AuthOrgValue);
                    if(authOrgTypeID.equalsIgnoreCase("000007")){
                        authOrgValue =  authOrgValue+property.getValue().toString()+"/";
                    }

                    if(authOrgTypeID.equalsIgnoreCase("000008")){
                        authOrgValue =  authOrgValue+property.getValue().toString()+"/";
                    }

                    if(authOrgTypeID.equalsIgnoreCase("000009")){
                        saleArea.add(authOrgValue+property.getValue().toString());

                        System.out.println("authOrgTypeID Trigger"+saleArea.size());
                      /*  String s = null;
                        try {
                            s = authOrgValue.substring(0, authOrgValue.length() - 1);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }*/

                    }
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return saleArea;
    }
 public static ArrayList<String> getSalesArea(String logiQry) {
        String authOrgTypeID = "";
        String authOrgValue = "";
        ArrayList<String> saleArea = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.AuthOrgTypeID);
                    authOrgTypeID = property.getValue().toString();
                    property = properties.get(Constants.AuthOrgValue);

                    System.out.println("AuthOrgValue : "+property.getValue().toString()+"     AuthOrgTypeID :"+authOrgTypeID);

                    if(authOrgTypeID.equalsIgnoreCase("000007")){
                        authOrgValue =  authOrgValue+property.getValue().toString()+"/";
                    }

                    if(authOrgTypeID.equalsIgnoreCase("000009")){
                        saleArea.add(authOrgValue+property.getValue().toString());

                        System.out.println("authOrgTypeID Trigger"+saleArea.size());


                    }
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return saleArea;
    }



    public static ArrayList<String> getDistibuterChannelIds(String logiQry) {
        String authOrgTypeID = "";
        String authOrgValue = "";
        ArrayList<String> saleArea = new ArrayList<>();
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    properties = entity.getProperties();
                    property = properties.get(Constants.AuthOrgTypeID);
                    authOrgTypeID = property.getValue().toString();
                    property = properties.get(Constants.AuthOrgValue);

                    System.out.println("AuthOrgValue : "+property.getValue().toString()+"     AuthOrgTypeID :"+authOrgTypeID);

                    try {
                        authOrgValue = property.getValue().toString();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    saleArea.add(authOrgValue);

                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return saleArea;
    }




    public static String getCustomerSalesAreaQry(String customerQry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        ArrayList<String> tempList = new ArrayList<>();
        String qry = "";
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, customerQry);
                if (entities != null) {
                    for (int i=0;i<entities.size();i++) {
                        ODataEntity entity = entities.get(i);
                        properties = entity.getProperties();
                        property = properties.get(Constants.CustomerNo);
                        String customerNo = (String) property.getValue();
//                        if (!tempList.contains(customerNo)) {
                            if(i==entities.size()-1){
                                qry = qry + "CustomerNo eq '"+customerNo+"'";
                            }else {
                                qry = qry + "CustomerNo eq '"+customerNo+"' or ";
                            }
//                            tempList.add(customerNo);
//                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + customerQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return qry;

    }

    public static ArrayList<SaleAreaBean> getSaleAreaFromCustomerCreditLmt(String logiQry) {
        String creditControlAreaID = "";
        String creditControlAreaDesc = "";
        ArrayList<String> saleArea = new ArrayList<>();
        ArrayList<SaleAreaBean> saleAreaal = new ArrayList<>();
        SaleAreaBean saleAreaBean = null;
        ODataProperty property;
        ODataPropMap properties;
        List<ODataEntity> entities;
        try {
            entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, logiQry);
            if (entities != null && !entities.isEmpty()) {
                for (ODataEntity entity : entities) {
                    saleAreaBean  = new SaleAreaBean();
                    properties = entity.getProperties();
                    property = properties.get(Constants.CreditControlAreaID);
                    creditControlAreaID = property.getValue().toString();
                    saleAreaBean.setCreditControlAreaID(creditControlAreaID);
                    property = properties.get(Constants.CreditControlAreaDesc);
                    creditControlAreaDesc = property.getValue().toString();
                    saleAreaBean.setCreditControlAreaDesc(creditControlAreaDesc);
                    saleAreaal.add(saleAreaBean);
                }
            }
        } catch (OfflineODataStoreException e) {
            e.printStackTrace();
        }
        return saleAreaal;
    }
    public static String getCollectionPlanGuidID(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        String routeGuid = "";
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.CollectionPlanGUID);
                        try {
                            ODataGuid mInvoiceGUID = (ODataGuid) property.getValue();
                            routeGuid = mInvoiceGUID.guidAsString36().toUpperCase();
                            //To Remove
                            break;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + qry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return routeGuid;
    }

    /*private static ODataRequestChangeSet createRequestItemParameterBatchList(OnlineODataStore store, ArrayList<Hashtable<String, String>> itemhashtable, ODataRequestChangeSet changeSetItem, int type) throws ODataException {
        for (int i = 0; i < itemhashtable.size(); i++) {
            Hashtable<String, String> singleRow = itemhashtable.get(i);

            ODataRequestParamSingle batchItem = new ODataRequestParamSingleDefaultImpl();
            batchItem.setResourcePath(Constants.SyncHistorys);
            batchItem.setMode(ODataRequestParamSingle.Mode.Create);
            batchItem.setContentID("1");
            ODataEntity newEntity = new ODataEntityDefaultImpl(UtilConstants.getNameSpaceOnline(store) + "" + Constants.SyncHistorysENTITY);
            newEntity = createSyncHistroyEntity(singleRow);
            newEntity.setResourcePath(Constants.SyncHistorys + "(" + ((i + 1) * 10) + ")", Constants.SyncHistorys + "(" + ((i + 1) * 10) + ")");

            store.allocateProperties(newEntity, ODataStore.PropMode.Keys);
            store.allocateNavigationProperties(newEntity);
            batchItem.setPayload(newEntity);
            changeSetItem.add(batchItem);
        }

        return changeSetItem;
    }

    public static void postBatchSyncHistory(ArrayList<Hashtable<String, String>> itemtable, OnlineODataInterface OdataInterface, Bundle bundle) throws com.arteriatech.mutils.common.OnlineODataStoreException {
        OnlineStoreListener openListener = OnlineStoreListener.getInstance();
        OnlineODataStore store = openListener.getStore();
        if (store != null) {
            try {
                ODataRequestParamBatch requestParamBatch = new ODataRequestParamBatchDefaultImpl();
                ODataRequestChangeSet changeSetItem = new ODataRequestChangeSetDefaultImpl();
                changeSetItem = createRequestItemParameterBatchList(store,  itemtable, changeSetItem, 1);
                OnlineRequestListeners batchListener = new OnlineRequestListeners(OdataInterface, bundle);
                requestParamBatch.add(changeSetItem);
                try {
                    store.scheduleRequest(requestParamBatch, batchListener);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } catch (Exception e) {
                throw new com.arteriatech.mutils.common.OnlineODataStoreException(e);
            }
        }
    }*/

    public static boolean isOfflineStoreOpenGeo() {
        boolean isOpen = false;
        try {
            if (offlineGeo != null && ODataOfflineStoreState.ODataOfflineStoreOpen.name().equals(storeState)) {
                isOpen = true;
            }
            return isOpen;
        } catch (Exception e) {
            return isOpen;
        }
    }

    public static boolean closeOfflineStoreGeo(Context context, ODataOfflineStoreOptions
            options) throws OfflineODataStoreException {
        try {
            OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
            UtilOfflineManager.closeOfflineStore(context, options, OfflineManager.offlineGeo, Constants.PREFS_NAME);
            return true;
        } catch (Exception e) {
            LogManager.writeLogError(Constants.offline_store_not_closed + e.getMessage());
            throw new OfflineODataStoreException(e);
        }
    }

    public static boolean closeStoreGeo(Context mContext, ODataOfflineStoreOptions options,
                                            String errMsg, ODataOfflineStore offlineStore,
                                            String sharedPrefName, String err_code) {
        boolean isReInitStore = false;

        try {
            if (!errMsg.contains("-100036") && !errMsg.contains("-100097") && !errMsg.contains("-10214")
                    /*&& !errMsg.contains("-10104")*/ && !err_code.contains("-10247") && !err_code.contains("-10001")) {
                isReInitStore = false;
            } else {
                try {
                    OfflineManager.setStoreState(ODataOfflineStoreState.ODataOfflineStoreClosed.name());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                isReInitStore = UtilOfflineManager.closeOfflineStore(mContext, options, offlineStore, sharedPrefName);
            }
        } catch (Exception var7) {
            LogManager.writeLogError("Error during store close: " + var7.getMessage());
        }

        return isReInitStore;
    }


    public static boolean openOfflineStoreGeo(Context context, UIListener uiListener) throws
            OfflineODataStoreException {
        if (!isOfflineStoreOpenGeo()) {
            try {
                //This instantiate the native UDB libraries which are located in the
                System.out.println("Service started 2");
                ODataOfflineStore.globalInit();
                //Get application endpoint URL
//                LogonCoreContext lgCtx = LogonCore.getInstance().getLogonContext();
//                String endPointURL = lgCtx.getAppEndPointUrl();
                String endPointURL = MyUtils.getDefaultEndPointURL();
                URL url = new URL(endPointURL);
                // Define the offline store options.
                // Connection parameter and credentials and
                // the application connection id we got at the registration
                System.out.println("Service started 3");
                optionsGeo = new ODataOfflineStoreOptions();
                optionsGeo.storeEncryptionKey = Constants.EncryptKey;
                optionsGeo.host = url.getHost();
                optionsGeo.port = String.valueOf(url.getPort());
                optionsGeo.enableHTTPS = Configuration.IS_HTTPS;
                optionsGeo.enableRepeatableRequests = true;
                System.out.println("Service started 4");
                // the serviceRoot is the backend connector name, which is usually the same
                // as the application configuration name in the SMP Management Cockpit
                optionsGeo.serviceRoot = Configuration.SPGEO;

                //for Relay enable next line
                /*if (lgCtx.getResourcePath() != null && !lgCtx.getResourcePath().equalsIgnoreCase("")) {
                    optionsGeo.urlSuffix = lgCtx.getResourcePath() + "/" + lgCtx.getFarmId();
                }*/

                //The logon configurator uses the information obtained in the registration
                // (i.e endpoint URL, login, etc ) to configure the conversation manager
               /* IManagerConfigurator configurator =
                        LogonUIFacade.getInstance().getLogonConfigurator(context);
                HttpConversationManager manager = new HttpConversationManager(context);
                configurator.configure(manager);*/
                CredentialsProvider credProvider = CredentialsProvider.getInstance(context);
                HttpConversationManager manager = new CommonAuthFlowsConfigurator(context).supportBasicAuthUsing(credProvider).configure(new HttpConversationManager(context));

                optionsGeo.conversationManager = manager;
                optionsGeo.storeName = Constants.STORE_NAMEGEO;

                optionsGeo.customHeaders.put(Constants.arteria_dayfilter, Constants.NO_OF_DAYS);
                String collectionName = Constants.SPGeos;
                if (collectionName.equalsIgnoreCase(Constants.MerchReviewImages)) {
                    optionsGeo.addDefiningRequest(collectionName, collectionName, true);
                } else {
                    optionsGeo.addDefiningRequest(collectionName, collectionName, false);
                }

                offlineGeo = new ODataOfflineStore(context);
                OfflineStoreGeoListener offlineStoreListner = new OfflineStoreGeoListener(uiListener);
                offlineGeo.setOfflineStoreListener(offlineStoreListner);
                //Assign an Offline
                offlineGeo.setRequestErrorListener(new OfflineErrorListener());

                offlineGeo.openStoreSync(optionsGeo);
                return true;
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        } else {
            return true;
        }
        //END
    }

    public static void refreshRequestsGeo(Context context, String collName, UIListener
            uiListener) throws
            OfflineODataStoreException {
        //Check if the offline oData store has been initialized
        if (offlineGeo == null) return;
        try {
            //used to get progress updates of a refresh operation
            OfflineRefreshListener refreshListener = new OfflineRefreshListener(context, Constants.Fresh, collName, uiListener);
            //Asynchronously starts sending pending modification request to the server
            offlineGeo.scheduleRefresh(collName, refreshListener);
        } catch (ODataException e) {
            throw new OfflineODataStoreException(e);
        }
        //END
    }

    public static boolean isSoPresent(Context mContext, String retailerStockQry) throws OfflineODataStoreException {
        boolean isCheck = false;
        if (offlineStore != null) {
            SalesOrderBean salesOrderBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(retailerStockQry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if(entities!=null && entities.size()>0) isCheck = true;

                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }

        return isCheck;

    }

    public static ArrayList<AttendanceSummaryBean> getCustomerPartnerFunctionList(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
        ArrayList<String> deplicateCode = new ArrayList<>();
        ArrayList<AttendanceSummaryBean> summaryBeanArrayList= new ArrayList<>();
        AttendanceSummaryBean summaryBean = null;
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        summaryBean = new AttendanceSummaryBean();
                        properties = entity.getProperties();
                        property = properties.get(Constants.PartnerVendorNo);
                        summaryBean.setCreatedBy((String) property.getValue());
                        property = properties.get(Constants.PartnerVendorName);
                        summaryBean.setSPName((String) property.getValue());
                        summaryBean.setTimeDiff("00:00");
                        if(!deplicateCode.contains(summaryBean.getCreatedBy())){
                            deplicateCode.add(summaryBean.getCreatedBy());
                            summaryBeanArrayList.add(summaryBean);
                        }
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + qry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return summaryBeanArrayList;
    }

    public static String getMTPMonthByRschGuid(String rschGuidQry) throws OfflineODataStoreException {
        String month="";

        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, rschGuidQry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.Month);
                        month = (String) property.getValue();
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + rschGuidQry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return month;
    }

    public static String getRoleTYpe(String qry) throws OfflineODataStoreException {

        //Check if the offline oData store is initialized
       String roleType="";
        if (offlineStore != null) {
            CustomerBean retBean;
            ODataProperty property;
            ODataPropMap properties;
            try {
                List<ODataEntity> entities = UtilOfflineManager.getEntities(OfflineManager.offlineStore, qry);
                if (entities != null) {
                    for (ODataEntity entity : entities) {
                        properties = entity.getProperties();
                        property = properties.get(Constants.PartnerFunctionID);
                        try {
                            roleType= (String) property.getValue();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        break;
                    }
                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + qry);
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return roleType;
    }
    public static  HashMap<String, MyTargetsBean> getConfigTypeValuesForMonthlyKPI(String query) throws OfflineODataStoreException {
        ArrayList<ConfigTypeValues> configTypesetTypesBeanArrayList = new ArrayList<>();
        ConfigTypeValues configTypesetTypesBean;
      /*  configTypesetTypesBean = new ConfigTypeValues();
        configTypesetTypesBean.setType("");
        configTypesetTypesBean.setTypeName(Constants.All);
        configTypesetTypesBean.setTypeset("");
        configTypesetTypesBean.setTypeValue("");
        configTypesetTypesBeanArrayList.add(configTypesetTypesBean);*/
        String[] configVal[] = null;
        HashMap<String, MyTargetsBean> mapMatGrpBasedOnUOM = new HashMap<>();
        if (offlineStore != null) {
            ODataProperty property;
            ODataPropMap properties;

            try {
                //Define the resource path
                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(query);
                //Send a request to read the config from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    for (ODataEntity entity : entities) {
                        configTypesetTypesBean = new ConfigTypeValues();
                        properties = entity.getProperties();
                        property = properties.get(Constants.Types);
                        if (property != null)
                            configTypesetTypesBean.setType((String) property.getValue());

                        property = properties.get(Constants.Typesname);
                        if (property != null)
                            configTypesetTypesBean.setTypeName((String) property.getValue());

                        property = properties.get(Constants.TypesValue);
                        if (property != null)
                            configTypesetTypesBean.setTypeValue((String) property.getValue());

                        property = properties.get(Constants.Typeset);
                        if (property != null)
                            configTypesetTypesBean.setTypeset((String) property.getValue());
//                        if (!TextUtils.isEmpty(configTypesetTypesBean.getTypeValue().trim())) {
                            MyTargetsBean matGrpayListTemp = Constants.mapMatGrpBasedOnUOMTemp.get(configTypesetTypesBean.getTypeValue());
                            if (matGrpayListTemp == null) {
                                ArrayList<String> arrayList1 = new ArrayList<>();
                                arrayList1.add(configTypesetTypesBean.getType());
                                matGrpayListTemp = new MyTargetsBean();
                                matGrpayListTemp.setUOM(configTypesetTypesBean.getTypeName());
                                matGrpayListTemp.setArrayList(arrayList1);
                                mapMatGrpBasedOnUOM.put(configTypesetTypesBean.getTypeValue(), matGrpayListTemp);
                            } else {
                                ArrayList<String> arrayList1 = matGrpayListTemp.getArrayList();
                                arrayList1.add(configTypesetTypesBean.getType());
                                matGrpayListTemp.setUOM(configTypesetTypesBean.getTypeName());
                                matGrpayListTemp.setArrayList(arrayList1);
                                mapMatGrpBasedOnUOM.put(configTypesetTypesBean.getTypeValue(), matGrpayListTemp);
                            }
//                        }
                    }

                } else {
                    throw new OfflineODataStoreException(Constants.invalid_payload_entityset_expected + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return mapMatGrpBasedOnUOM;
    }

    public static String checkBlockedCustomer(Context mContext, String qry) throws OfflineODataStoreException {
        String jsonStr="";
        if (offlineStore != null) {

            ODataProperty property;
            ODataPropMap properties;
            try {
                //Define the resource path

                ODataRequestParamSingle request = new ODataRequestParamSingleDefaultImpl();
                request.setMode(ODataRequestParamSingle.Mode.Read);
                request.setResourcePath(qry);
                //Send a request to read the HelpLine from the local database
                ODataResponseSingle response = (ODataResponseSingle) offlineStore.
                        executeRequest(request);
                //Check if the response is an error
                if (response.getPayloadType() == ODataPayload.Type.Error) {
                    ODataErrorDefaultImpl error = (ODataErrorDefaultImpl)
                            response.getPayload();
                    throw new OfflineODataStoreException(error.getMessage());
                    //Check if the response contains EntitySet
                } else if (response.getPayloadType() == ODataPayload.Type.EntitySet) {
                    ODataEntitySet feed = (ODataEntitySet) response.getPayload();
                    List<ODataEntity> entities = feed.getEntities();
                    //Retrieve the data from the response
                    if(entities!=null && entities.size()>0) {
                        for (ODataEntity entity : entities) {
                            properties = entity.getProperties();
                            property = properties.get(Constants.String1);
                            jsonStr=property.getValue().toString();
                        }
                    }
                } else {
                    throw new OfflineODataStoreException("Invalid payload:EntitySet expected"
                            + "but got " + response.getPayloadType().name());
                }
            } catch (Exception e) {
                throw new OfflineODataStoreException(e);
            }
        }
        return jsonStr;
    }
}
